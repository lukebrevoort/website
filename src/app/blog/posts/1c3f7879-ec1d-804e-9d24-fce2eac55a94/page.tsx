"use client"
    
  import { lukesFont, crimsonText } from '@/app/fonts';
  import { AppSidebar } from "@/components/app-sidebar";
  import { Breadcrumb, BreadcrumbItem, BreadcrumbLink, BreadcrumbList, BreadcrumbSeparator } from "@/components/ui/breadcrumb";
  import { SidebarProvider, SidebarInset, SidebarTrigger } from "@/components/ui/sidebar";
  import { Separator } from "@/components/ui/separator";
  import { motion } from "framer-motion";
  import { MotionConfig } from "framer-motion";
  import dynamic from 'next/dynamic';
  import SecureImage from "@/components/secure-image";
  import Image from "next/image";
  import { useState, useEffect } from "react";
  
  const ReactMarkdown = dynamic(() => import('react-markdown'), { ssr: true });
  
  export default function BlogPost() {
  // Store processed markdown in state
  const [content, setContent] = useState(`# What is Vibe Coding 🥸


If you haven’t heard of it by now, Vibe Coding is a way of going through code that purely relies on LLMs to construct and fix its own problems. This usually culminates, in my personal experience, through frustration in a project or some form of laziness, where when something doesn’t work, you give it to ChatGPT or Claude and pray it fixes it 🙏!

![Image](image-placeholder-vibecodingdiagram.jpeg)


After a few cycles of this back and forth, you’ll probably have more problems than you started out with. Maybe you no longer understand the underlying code and methods, or worse, you never did to begin with!

Vibe Coding, while maybe initially seeming like the easy way out, is a simple case of digging your own grave when it comes to productivity. But,

> Where is the line or the difference between *Vibe Coding* and *AI Assistance?* 🤔


# Ideas and Solutions 💡


When trying to code a personal project or put something together, not everyone is going to think through it the same way. This is usually based on personal experience or even expertise in a certain language. What I’ve realized when I fall into the disastrous Vibe Coding trap is that it’s when **I’ve lost faith in my own creative solutions**. This usually leads to prompts in Github Copilot like:

\`\`\`javascript
"@terminal Why won't this function work? How can we fix it? Please help me 😔"

"@terminal Your code didn't work. Why didn't it work and can you fix it please?"

Or my favorite:

"@terminal /explain What happened? Fix it"
\`\`\`


While I usually try to be nice to my LLMs (because of a subconscious fear of AI Takeover), sometimes, after 8 iterations of confusion and nothing working, I try being more direct

Every time I have run into this Vibe Coding trap, my way out has always been generated by **My Solution **or an approach I come up with that the LLM can try to implement. In all honesty, Vibe Coding feels really easy and feels like magic when it does actually work out. The reality is, the only way to take advantage of these tools is to understand the code and also put your own ideas first. As soon as every idea is from an LLM, you take away the greatest advantage of being human: *Creativity*

.

# No AI 🙈 vs. AI Assistance 🫨


I think there is a fine line in AI usage, especially as a Freshman in CS. Do you use the tools available to you since they will inevitably become the industry standard? Or try and do everything on your own to learn as much as possible? Here are my Pros and Cons:


### Assistance 🫨:


### Pros:


Build and deploy tools much faster 

Learn with industry tools and gain valuable skills in prompting and usage

Great for getting started quickly!

### Cons:


Might get stuck in the Vibe Coding Cycle

End up skipping over valuable skills since Ai handles it for you

Lack of robust code that could lead to data leaks

### No AI 🙈:


### Pros:


Get to take away as much as possible

Learn the entire process step by step 

Great for learning new Languages and Frameworks

### Cons:


Much slower to build and deploy projects

Takes much more work up-front to watch tutorials and get things going 

No longer working with the most productive systems 

In my personal opinion, I think the best way to go about projects is a mixture of both. If you are brand new to a framework or language, you should try your best to go through the process of learning it step by step, **using as little AI as possible**. This will give you a good enough understanding so that when you use AI and encounter issues, you can sit down and **diagnose the problem**.

This has tremendously helped me avoid the Vibe Code pitfalls in my recent projects and given me the upside of utilizing tools when I fully understand the project.

> Vibe Coding comes from relying too much on assistance without learning the foundations.  Leading to stagnation in progress and understanding as a whole.


# What Do I Use? 🧐


I think personally I have struck a good balance while working on my upcoming project, **Flowstate,** which I plan to make a blog post about another day 🤫. My current workflow has looked something along the lines of this:

![Image](image-placeholder-lukeworkflowdiagram.jpeg)


Lets walk through each section:

### Project Ideas 💭


Usually, when I brainstorm, I like bouncing ideas off either a friend or an LLM like Claude or ChatGPT. I like to prompt the LLMs with my resume sometimes if I want to get across what I know already, as well as some things I would like to know. Here’s a recent prompt I gave to Claude for Brainstorming:

> I have decided to embed my Resume below; Could you give me some Computer Science project ideas to expand my knowledge and improve my resume. Any project Ideas that you think for my skill level are achievable and would improve my skills as a programmer? (Something with Agents would be great!)


Something like this gives the LLM a good outline for what I am looking for and has generally produced some pretty cool project ideas!

### Learning The Software ☕️


This part usually takes the longest, and while tedious, is **absolutely** **necessary** when it comes to programming (in my opinion). I try and start by looking at open-source resources that could be useful for the project; something like **LangChain or smolagents** for agent-based building or Google Calendar API for a Calendar app.

After I’ve found what I should be looking for, I use Perplexity to walk me through the API and get a good understanding of what I need to know. I start by creating a **Space** and then add whatever content is needed for the project.

I spend a lot of time bouncing between the **Documentation and Perplexity** to get a good understanding and outline the workflow of the project. If you couldn’t tell already, I love drawing diagrams on my iPad as a way of getting a top-down look at my project.

### Implementing Features 👨‍💻


Once I have a good outline of the project and a solid foundation on the framework or language, I begin building! **Usually I realize halfway through building that I don’t know enough** (which I find completely okay!) 😅. This is where I go back to Perplexity and the Documentation to try and find the gaps in my knowledge. While a tedious step, I think this is an **essential** part of the process to not fall into Vibe Coding and relying on the AI Assistance tools you are using.

This step is usually the most fun for me because I get to see tangible results from all the work I’ve put into learning this software. There is nothing quite like the feeling of having an idea and having Claude implement exactly what you were thinking of doing (or maybe that's just me lol).

# Conclusion 🤖


While I think Vibe Coding is being overdramatized in CS media and circles, I also think as a Student its something to really watch out for. There is nothing more soul-crushing than finishing, or even getting halfway through, a cool project and **realizing you have no idea how anything works** 😔.

I **strongly beli**e**ve** that all students should use AI Assistance in some way (Especially with free Github Pro and Copilot)! Students, like myself, just need to be mindful of their use and make sure they understand the underlying programs that are going on. Here’s to hoping the world doesn’t end in Ai taking over the world! (and if it does, I hope they remember I was saying “please” while prompting 😉)

But if you enjoyed reading at all or have any questions my email is always open!

## Contact:


luke@brevoort.com
`);
  const [imageMap, setImageMap] = useState<Record<string, string>>({});
  const [isLoading, setIsLoading] = useState(true);
  const [loadedImages, setLoadedImages] = useState(false);
  const [isDarkMode, setIsDarkMode] = useState(false);
  const postId = "1c3f7879-ec1d-804e-9d24-fce2eac55a94";
  
  // Detect color scheme preference
  useEffect(() => {
    if (typeof window !== 'undefined') {
    const isDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
    setIsDarkMode(isDark);
    
    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');
    const handleChange = (e: MediaQueryListEvent) => setIsDarkMode(e.matches);
    
    mediaQuery.addEventListener('change', handleChange);
    return () => mediaQuery.removeEventListener('change', handleChange);
    }
  }, []);
  
  // Function to preload images to blob storage
  const preloadImages = async (imageMap: Record<string, string>) => {
    // ...existing preload images code...
  };
  
  // Combined effect for image mappings
  useEffect(() => {
    // ...existing image mapping code...
  }, [postId, content]);
  
  return (
    <SidebarProvider defaultOpen={false}>
    <AppSidebar />
    <MotionConfig reducedMotion="user">
      <SidebarInset className="overflow-x-hidden">
      <header className="flex h-14 md:h-16 shrink-0 items-center gap-1 md:gap-2 transition-[width,height] ease-linear group-has-[[data-collapsible=icon]]/sidebar-wrapper:h-12 sticky top-0 z-50 bg-background">
        <div className="flex items-center gap-1 md:gap-2 px-2 md:px-4">
        <SidebarTrigger className="-ml-1" />
        <Separator orientation="vertical" className="mr-2 h-4" />
        <Breadcrumb>
          <BreadcrumbList>
          <BreadcrumbItem className="hidden md:block">
            <BreadcrumbLink href="/">Home</BreadcrumbLink>
          </BreadcrumbItem>
          <BreadcrumbSeparator className="hidden md:block" />
          <BreadcrumbItem>
            <BreadcrumbLink href="/blog/posts">Blog</BreadcrumbLink>
          </BreadcrumbItem>
          <BreadcrumbSeparator />
          <BreadcrumbItem>
            <BreadcrumbLink>{"Vibe Coding vs. AI Assistance 🤖"}</BreadcrumbLink>
          </BreadcrumbItem>
          </BreadcrumbList>
        </Breadcrumb>
        </div>
      </header>
  
      <motion.article 
        initial={{ opacity: 0 }} 
        animate={{ opacity: 1 }}
        transition={{ duration: 0.5 }}
        className="container mx-auto py-4 sm:py-6 md:py-10 px-3 sm:px-4 md:px-6 max-w-3xl overflow-hidden"
      >
        <header className="mb-6 md:mb-8">
          <h1 className={`${lukesFont.className} text-2xl sm:text-3xl md:text-4xl lg:text-5xl font-bold mb-2 md:mb-3`}>{"Vibe Coding vs. AI Assistance 🤖"}</h1>
          <time className="text-gray-500 text-base sm:text-lg">3/27/2025</time>
        </header>
        
        {isLoading ? (
          <div className="animate-pulse">Loading content...</div>
        ) : (
          <div className={`prose dark:prose-invert max-w-none prose-base sm:prose-lg md:prose-lg lg:prose-xl ${crimsonText.className} prose-headings:mb-3 prose-p:mb-3 sm:prose-p:mb-4 prose-p:leading-relaxed prose-li:my-1 sm:prose-li:my-2 overflow-hidden prose-pre:overflow-x-auto`}>
            <ReactMarkdown 
              key={loadedImages ? 'loaded' : 'loading'}
              components={{
                img: ({ node, ...props }) => {
                  const imageSrc = props.src || '';
                  console.log('Rendering image in markdown:', imageSrc);
                  console.log('Available mappings:', Object.keys(imageMap));
                  console.log('Image mapped?', !!imageMap[imageSrc]);
                  
                  // First check if we have a mapping
                  if (imageMap[imageSrc]) {
                    console.log(`Using mapped image: ${imageMap[imageSrc]}`);
                    return (
                      <div className="my-6 sm:my-8 w-full">
                        <Image 
                          src={imageMap[imageSrc]} 
                          alt={props.alt || ''} 
                          className="rounded-lg w-full shadow-md hover:shadow-lg transition-shadow"
                          width={0}
                          height={0}
                          sizes="(max-width: 640px) 95vw, (max-width: 768px) 90vw, 800px"
                          style={{
                            width: '100%',
                            height: 'auto',
                            maxHeight: '70vh',
                            objectFit: 'contain'
                          }}
                          priority={true}
                        />
                        {props.alt && <figcaption className="mt-2 text-center text-sm text-gray-500">{props.alt}</figcaption>}
                      </div>
                    );
                  }
                  
                  // If all else fails, try SecureImage
                  return (
                    <div className="my-6 sm:my-8 w-full">
                      <SecureImage 
                        src={imageSrc} 
                        alt={props.alt || ''} 
                        className="rounded-lg shadow-md hover:shadow-lg transition-shadow w-full h-auto max-h-[70vh] object-contain" 
                        postId={postId}
                        imageMap={imageMap}
                      />
                      {props.alt && <figcaption className="mt-2 text-center text-sm text-gray-500">{props.alt}</figcaption>}
                    </div>
                  );
                },
                code: ({ node, inline, className, children, ...props }) => {
                  const match = /language-(\w+)/.exec(className || '');
                  
                  // For inline code (not code blocks)
                  if (inline || !match) {
                    return (
                      <code 
                        className="px-1.5 py-0.5 mx-0.5 bg-gray-100 dark:bg-gray-800 rounded text-sm font-mono"
                        {...props}
                      >
                        {children}
                      </code>
                    );
                  }
                  
                  // For code blocks - simplified without specific syntax highlighting
                  return (
                    <div className="my-4 sm:my-6 overflow-hidden rounded-lg shadow-lg">
                      <div className="flex items-center justify-between px-3 py-1.5 sm:px-4 sm:py-2 text-xs font-mono bg-gray-200 dark:bg-gray-800 text-gray-800 dark:text-gray-200">
                        <span>{match[1].toUpperCase()}</span>
                        <button
                          onClick={() => {
                            navigator.clipboard.writeText(String(children));
                          }}
                          className="hover:text-primary transition-colors"
                          aria-label="Copy code"
                        >
                          Copy
                        </button>
                      </div>
                      <pre className="p-3 sm:p-4 overflow-x-auto text-xs sm:text-sm bg-gray-50 dark:bg-gray-900 text-gray-800 dark:text-gray-200">
                        <code className="font-mono">
                          {String(children).replace(/\n$/, '')}
                        </code>
                      </pre>
                    </div>
                  );
                }
              }}
            >{content}</ReactMarkdown>
          </div>
        )}
      </motion.article>
  
      <button 
        onClick={() => window.scrollTo({ top: 0, behavior: 'smooth' })}
        className="fixed bottom-4 right-4 sm:bottom-6 sm:right-6 bg-primary text-primary-foreground p-1.5 sm:p-2 rounded-full shadow-lg opacity-80 hover:opacity-100 transition-opacity"
        aria-label="Back to top"
      >
        <svg 
          xmlns="http://www.w3.org/2000/svg" 
          width="20" 
          height="20" 
          viewBox="0 0 24 24" 
          fill="none" 
          stroke="currentColor" 
          strokeWidth="2" 
          strokeLinecap="round" 
          strokeLinejoin="round"
        >
          <path d="m18 15-6-6-6 6"/>
        </svg>
      </button>
      </SidebarInset>
    </MotionConfig>
    </SidebarProvider>
  );
  }