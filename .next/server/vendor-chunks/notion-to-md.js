/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/notion-to-md";
exports.ids = ["vendor-chunks/notion-to-md"];
exports.modules = {

/***/ "(rsc)/./node_modules/notion-to-md/build/core/block-fetcher/index.js":
/*!*********************************************************************!*\
  !*** ./node_modules/notion-to-md/build/core/block-fetcher/index.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BlockFetcher = void 0;\nconst notion_1 = __webpack_require__(/*! ../../utils/notion */ \"(rsc)/./node_modules/notion-to-md/build/utils/notion/index.js\");\nclass BlockFetcher {\n    constructor(pageId, client, config = {\n        fetchPageProperties: false,\n        fetchComments: false,\n        maxRequestsPerSecond: 3,\n        batchSize: 3,\n    }) {\n        var _a, _b;\n        this.client = client;\n        this.config = config;\n        this.queue = [];\n        this.blocks = new Map();\n        this.processedTasks = new Set();\n        this.rootComments = [];\n        this.rootBlockId = '';\n        this.mediaBlocks = [];\n        this.pageRefBlocks = [];\n        this.rateLimitWindow = {\n            requests: 0,\n            startTime: Date.now(),\n        };\n        const moduleType = 'BlockFetcher';\n        this.config.maxRequestsPerSecond = (_a = config.maxRequestsPerSecond) !== null && _a !== void 0 ? _a : 3;\n        this.config.batchSize = (_b = config.batchSize) !== null && _b !== void 0 ? _b : 3;\n    }\n    async process(data) {\n        const blockTree = await this.getBlocks(data.pageId);\n        const updatedData = {\n            ...data,\n            blockTree,\n        };\n        return this.next ? this.next.process(updatedData) : updatedData;\n    }\n    async getBlocks(pageId) {\n        this.rootBlockId = pageId;\n        this.queue = [];\n        this.blocks.clear();\n        this.processedTasks.clear();\n        this.pageProperties = undefined;\n        this.rootComments = [];\n        // Initialize queue with root level tasks\n        this.addTask({ type: 'fetch_blocks', id: pageId });\n        if (this.config.fetchPageProperties) {\n            this.addTask({ type: 'fetch_properties', id: pageId });\n        }\n        if (this.config.fetchComments) {\n            this.addTask({ type: 'fetch_comments', id: pageId });\n        }\n        // Process queue until empty\n        while (this.queue.length > 0) {\n            const batch = this.queue.splice(0, this.config.batchSize);\n            await Promise.all(batch.map((task) => this.processTask(task)));\n        }\n        const baseOutput = {\n            properties: this.pageProperties || {},\n            comments: this.rootComments,\n            blocks: this.buildBlockTree(pageId),\n        };\n        // Only include special arrays if tracking was enabled\n        if (this.config.trackMediaBlocks || this.config.trackPageRefBlocks) {\n            return {\n                ...baseOutput,\n                ...(this.config.trackMediaBlocks && { mediaBlocks: this.mediaBlocks }),\n                ...(this.config.trackPageRefBlocks && {\n                    pageRefBlocks: this.pageRefBlocks,\n                }),\n            };\n        }\n        return baseOutput;\n    }\n    addTask(task) {\n        const taskId = `${task.type}-${task.id}`;\n        if (!this.processedTasks.has(taskId)) {\n            this.queue.push(task);\n        }\n    }\n    async processTask(task) {\n        const taskId = `${task.type}-${task.id}`;\n        if (this.processedTasks.has(taskId))\n            return;\n        switch (task.type) {\n            case 'fetch_blocks': {\n                const blocks = await this.fetchBlockChildren(task.id);\n                for (const block of blocks) {\n                    const storedBlock = {\n                        ...block,\n                        children: [],\n                        comments: [],\n                    };\n                    this.blocks.set(block.id, storedBlock);\n                    // Track special blocks if enabled (storing references)\n                    // these will be used by the next stage saving us from a\n                    // lot of recursive calls to idenitfy blocks\n                    if (this.config.trackMediaBlocks && (0, notion_1.isMediaBlock)(storedBlock)) {\n                        this.mediaBlocks.push(storedBlock);\n                    }\n                    if (this.config.trackPageRefBlocks && (0, notion_1.isPageRefBlock)(storedBlock)) {\n                        this.pageRefBlocks.push(storedBlock);\n                    }\n                    // If block has children, queue task to fetch them\n                    if ('has_children' in block && block.has_children) {\n                        this.addTask({\n                            type: 'fetch_blocks',\n                            id: block.id,\n                            parentId: task.id,\n                        });\n                    }\n                    // Queue comment fetching for each block if enabled\n                    // extra api call for comment fetching, no way to know otherwise\n                    if (this.config.fetchComments) {\n                        this.addTask({\n                            type: 'fetch_comments',\n                            id: block.id,\n                        });\n                    }\n                }\n                break;\n            }\n            case 'fetch_comments': {\n                const comments = await this.fetchAllComments(task.id);\n                if (task.id === this.rootBlockId) {\n                    // page level comments\n                    this.rootComments = comments;\n                }\n                else {\n                    const block = this.blocks.get(task.id);\n                    if (block) {\n                        block.comments = comments;\n                    }\n                }\n                break;\n            }\n            case 'fetch_properties': {\n                const properties = await this.fetchPageProperties(task.id);\n                this.pageProperties = properties;\n                break;\n            }\n        }\n        this.processedTasks.add(taskId);\n    }\n    async rateLimitRequest(request) {\n        const now = Date.now();\n        const windowSize = 1000;\n        // Reset window if it's expired\n        if (now - this.rateLimitWindow.startTime >= windowSize) {\n            this.rateLimitWindow = {\n                requests: 0,\n                startTime: now,\n            };\n        }\n        // Wait if we've hit the rate limit\n        if (this.rateLimitWindow.requests >= this.config.maxRequestsPerSecond) {\n            const waitTime = windowSize - (now - this.rateLimitWindow.startTime);\n            await new Promise((resolve) => setTimeout(resolve, waitTime));\n            this.rateLimitWindow = {\n                requests: 0,\n                startTime: Date.now(),\n            };\n        }\n        this.rateLimitWindow.requests++;\n        return request();\n    }\n    async fetchBlockChildren(blockId) {\n        var _a;\n        let allBlocks = [];\n        let hasMore = true;\n        let cursor;\n        while (hasMore) {\n            const response = await this.rateLimitRequest(() => this.client.blocks.children.list({\n                block_id: blockId,\n                start_cursor: cursor,\n            }));\n            // Filter out unsupported blocks\n            // should we leave it here or let user handle it in renderer?\n            const blocks = response.results.filter((block) => 'type' in block && block.type !== 'unsupported');\n            allBlocks = [...allBlocks, ...blocks];\n            hasMore = response.has_more;\n            cursor = (_a = response.next_cursor) !== null && _a !== void 0 ? _a : undefined;\n        }\n        return allBlocks;\n    }\n    async fetchAllComments(blockId) {\n        var _a;\n        let allComments = [];\n        let hasMore = true;\n        let cursor;\n        while (hasMore) {\n            const response = await this.rateLimitRequest(() => this.client.comments.list({\n                block_id: blockId,\n                start_cursor: cursor,\n            }));\n            allComments = [...allComments, ...response.results];\n            hasMore = response.has_more;\n            cursor = (_a = response.next_cursor) !== null && _a !== void 0 ? _a : undefined;\n        }\n        return allComments;\n    }\n    async fetchPageProperties(pageId) {\n        const response = await this.rateLimitRequest(() => this.client.pages.retrieve({ page_id: pageId }));\n        return 'properties' in response ? response.properties : {};\n    }\n    normalizeId(id) {\n        return id.replace(/-/g, '');\n    }\n    buildBlockTree(rootId) {\n        var _a, _b;\n        const childrenMap = new Map();\n        for (const [id, block] of this.blocks.entries()) {\n            const parentId = \n            // @ts-ignore\n            ((_a = block.parent) === null || _a === void 0 ? void 0 : _a.type) === 'block_id'\n                ? // @ts-ignore\n                    this.normalizeId(block.parent.block_id)\n                : // @ts-ignore\n                    ((_b = block.parent) === null || _b === void 0 ? void 0 : _b.type) === 'page_id'\n                        ? // @ts-ignore\n                            this.normalizeId(block.parent.page_id)\n                        : undefined;\n            if (parentId) {\n                if (!childrenMap.has(parentId)) {\n                    childrenMap.set(parentId, []);\n                }\n                childrenMap.get(parentId).push(block);\n            }\n        }\n        const buildChildren = (parentId) => {\n            const children = childrenMap.get(this.normalizeId(parentId)) || [];\n            return children.map((block) => {\n                block.children = buildChildren(block.id);\n                return block;\n            });\n        };\n        return buildChildren(rootId);\n    }\n}\nexports.BlockFetcher = BlockFetcher;\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/notion-to-md/build/core/block-fetcher/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/notion-to-md/build/core/errors.js":
/*!********************************************************!*\
  !*** ./node_modules/notion-to-md/build/core/errors.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.PageReferenceHandlerError = exports.MediaHandlerError = exports.ManifestNotInitializedError = void 0;\n/**\n * Specific error for when manifest management fails\n */\nclass ManifestNotInitializedError extends Error {\n    constructor(moduleType) {\n        super(`Manifest manager not initialized for ${moduleType}. Call setManifestManager before accessing manifest.`);\n        this.name = \"ManifestNotInitializedError\";\n    }\n}\nexports.ManifestNotInitializedError = ManifestNotInitializedError;\nclass MediaHandlerError extends Error {\n    constructor(message, cause) {\n        super(message);\n        this.name = \"MediaHandlerError\";\n    }\n}\nexports.MediaHandlerError = MediaHandlerError;\n/**\n * Specific error class for page reference handling errors\n */\nclass PageReferenceHandlerError extends Error {\n    constructor(message, cause) {\n        super(message);\n        this.name = \"PageReferenceHandlerError\";\n    }\n}\nexports.PageReferenceHandlerError = PageReferenceHandlerError;\n//# sourceMappingURL=errors.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm90aW9uLXRvLW1kL2J1aWxkL2NvcmUvZXJyb3JzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGlDQUFpQyxHQUFHLHlCQUF5QixHQUFHLG1DQUFtQztBQUNuRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0RBQXNELFdBQVc7QUFDakU7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUM7QUFDakMiLCJzb3VyY2VzIjpbIi9Vc2Vycy9sYnJldm9vcnQvRGVza3RvcC9wcm9qZWN0cy9wZXJzb25hbC13ZWJzaXRlL25vZGVfbW9kdWxlcy9ub3Rpb24tdG8tbWQvYnVpbGQvY29yZS9lcnJvcnMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlBhZ2VSZWZlcmVuY2VIYW5kbGVyRXJyb3IgPSBleHBvcnRzLk1lZGlhSGFuZGxlckVycm9yID0gZXhwb3J0cy5NYW5pZmVzdE5vdEluaXRpYWxpemVkRXJyb3IgPSB2b2lkIDA7XG4vKipcbiAqIFNwZWNpZmljIGVycm9yIGZvciB3aGVuIG1hbmlmZXN0IG1hbmFnZW1lbnQgZmFpbHNcbiAqL1xuY2xhc3MgTWFuaWZlc3ROb3RJbml0aWFsaXplZEVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKG1vZHVsZVR5cGUpIHtcbiAgICAgICAgc3VwZXIoYE1hbmlmZXN0IG1hbmFnZXIgbm90IGluaXRpYWxpemVkIGZvciAke21vZHVsZVR5cGV9LiBDYWxsIHNldE1hbmlmZXN0TWFuYWdlciBiZWZvcmUgYWNjZXNzaW5nIG1hbmlmZXN0LmApO1xuICAgICAgICB0aGlzLm5hbWUgPSBcIk1hbmlmZXN0Tm90SW5pdGlhbGl6ZWRFcnJvclwiO1xuICAgIH1cbn1cbmV4cG9ydHMuTWFuaWZlc3ROb3RJbml0aWFsaXplZEVycm9yID0gTWFuaWZlc3ROb3RJbml0aWFsaXplZEVycm9yO1xuY2xhc3MgTWVkaWFIYW5kbGVyRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgY29uc3RydWN0b3IobWVzc2FnZSwgY2F1c2UpIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSk7XG4gICAgICAgIHRoaXMubmFtZSA9IFwiTWVkaWFIYW5kbGVyRXJyb3JcIjtcbiAgICB9XG59XG5leHBvcnRzLk1lZGlhSGFuZGxlckVycm9yID0gTWVkaWFIYW5kbGVyRXJyb3I7XG4vKipcbiAqIFNwZWNpZmljIGVycm9yIGNsYXNzIGZvciBwYWdlIHJlZmVyZW5jZSBoYW5kbGluZyBlcnJvcnNcbiAqL1xuY2xhc3MgUGFnZVJlZmVyZW5jZUhhbmRsZXJFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlLCBjYXVzZSkge1xuICAgICAgICBzdXBlcihtZXNzYWdlKTtcbiAgICAgICAgdGhpcy5uYW1lID0gXCJQYWdlUmVmZXJlbmNlSGFuZGxlckVycm9yXCI7XG4gICAgfVxufVxuZXhwb3J0cy5QYWdlUmVmZXJlbmNlSGFuZGxlckVycm9yID0gUGFnZVJlZmVyZW5jZUhhbmRsZXJFcnJvcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVycm9ycy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/notion-to-md/build/core/errors.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/notion-to-md/build/core/exporter/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/notion-to-md/build/core/exporter/index.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Exporter = void 0;\nconst types_1 = __webpack_require__(/*! ../../types */ \"(rsc)/./node_modules/notion-to-md/build/types/index.js\");\n/**\n * A chain node that manages multiple exporters and runs them as the final step\n * in our processing chain\n */\nclass Exporter {\n    constructor(exporters) {\n        this.exporters = exporters;\n        console.debug('[Exporter] Initializing with exporters:', {\n            count: (exporters === null || exporters === void 0 ? void 0 : exporters.length) || 0,\n        });\n        if (!(exporters === null || exporters === void 0 ? void 0 : exporters.length)) {\n            console.debug('[Exporter] No exporters provided');\n            throw new Error('At least one exporter is required');\n        }\n        console.debug('[Exporter] Successfully initialized with exporters');\n    }\n    async process(data) {\n        console.debug('[Exporter] Starting export process', {\n            pageId: data.pageId,\n            exporterCount: this.exporters.length,\n        });\n        const errors = [];\n        // Try all exporters, collecting errors but continuing\n        for (let i = 0; i < this.exporters.length; i++) {\n            const exporter = this.exporters[i];\n            console.debug('[Exporter] Running exporter', {\n                index: i,\n                total: this.exporters.length,\n            });\n            try {\n                await exporter.export(data);\n                console.debug('[Exporter] Successfully completed export', { index: i });\n            }\n            catch (error) {\n                const exporterError = error instanceof types_1.ExporterError\n                    ? error\n                    : new types_1.ExporterError('Exporter failed', data.pageId, 'export', error);\n                // Log error and continue with next exporter\n                console.debug('[Exporter] Export failed', {\n                    index: i,\n                    error: exporterError.message,\n                    details: exporterError.details,\n                });\n                errors.push(exporterError);\n            }\n        }\n        // Add any export errors to metadata for potential handling upstream\n        if (errors.length > 0) {\n            console.debug('[Exporter] Completed with errors', {\n                errorCount: errors.length,\n                totalExporters: this.exporters.length,\n            });\n            data.metadata = {\n                ...data.metadata,\n                exportErrors: errors,\n            };\n        }\n        else {\n            console.debug('[Exporter] All exports completed successfully');\n        }\n        console.debug('[Exporter] Export process finished');\n        return data;\n    }\n}\nexports.Exporter = Exporter;\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm90aW9uLXRvLW1kL2J1aWxkL2NvcmUvZXhwb3J0ZXIvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsZ0JBQWdCO0FBQ2hCLGdCQUFnQixtQkFBTyxDQUFDLDJFQUFhO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0Esd0JBQXdCLDJCQUEyQjtBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsNEVBQTRFLFVBQVU7QUFDdEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9sYnJldm9vcnQvRGVza3RvcC9wcm9qZWN0cy9wZXJzb25hbC13ZWJzaXRlL25vZGVfbW9kdWxlcy9ub3Rpb24tdG8tbWQvYnVpbGQvY29yZS9leHBvcnRlci9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuRXhwb3J0ZXIgPSB2b2lkIDA7XG5jb25zdCB0eXBlc18xID0gcmVxdWlyZShcIi4uLy4uL3R5cGVzXCIpO1xuLyoqXG4gKiBBIGNoYWluIG5vZGUgdGhhdCBtYW5hZ2VzIG11bHRpcGxlIGV4cG9ydGVycyBhbmQgcnVucyB0aGVtIGFzIHRoZSBmaW5hbCBzdGVwXG4gKiBpbiBvdXIgcHJvY2Vzc2luZyBjaGFpblxuICovXG5jbGFzcyBFeHBvcnRlciB7XG4gICAgY29uc3RydWN0b3IoZXhwb3J0ZXJzKSB7XG4gICAgICAgIHRoaXMuZXhwb3J0ZXJzID0gZXhwb3J0ZXJzO1xuICAgICAgICBjb25zb2xlLmRlYnVnKCdbRXhwb3J0ZXJdIEluaXRpYWxpemluZyB3aXRoIGV4cG9ydGVyczonLCB7XG4gICAgICAgICAgICBjb3VudDogKGV4cG9ydGVycyA9PT0gbnVsbCB8fCBleHBvcnRlcnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGV4cG9ydGVycy5sZW5ndGgpIHx8IDAsXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoIShleHBvcnRlcnMgPT09IG51bGwgfHwgZXhwb3J0ZXJzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBleHBvcnRlcnMubGVuZ3RoKSkge1xuICAgICAgICAgICAgY29uc29sZS5kZWJ1ZygnW0V4cG9ydGVyXSBObyBleHBvcnRlcnMgcHJvdmlkZWQnKTtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQXQgbGVhc3Qgb25lIGV4cG9ydGVyIGlzIHJlcXVpcmVkJyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc29sZS5kZWJ1ZygnW0V4cG9ydGVyXSBTdWNjZXNzZnVsbHkgaW5pdGlhbGl6ZWQgd2l0aCBleHBvcnRlcnMnKTtcbiAgICB9XG4gICAgYXN5bmMgcHJvY2VzcyhkYXRhKSB7XG4gICAgICAgIGNvbnNvbGUuZGVidWcoJ1tFeHBvcnRlcl0gU3RhcnRpbmcgZXhwb3J0IHByb2Nlc3MnLCB7XG4gICAgICAgICAgICBwYWdlSWQ6IGRhdGEucGFnZUlkLFxuICAgICAgICAgICAgZXhwb3J0ZXJDb3VudDogdGhpcy5leHBvcnRlcnMubGVuZ3RoLFxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgZXJyb3JzID0gW107XG4gICAgICAgIC8vIFRyeSBhbGwgZXhwb3J0ZXJzLCBjb2xsZWN0aW5nIGVycm9ycyBidXQgY29udGludWluZ1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuZXhwb3J0ZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBleHBvcnRlciA9IHRoaXMuZXhwb3J0ZXJzW2ldO1xuICAgICAgICAgICAgY29uc29sZS5kZWJ1ZygnW0V4cG9ydGVyXSBSdW5uaW5nIGV4cG9ydGVyJywge1xuICAgICAgICAgICAgICAgIGluZGV4OiBpLFxuICAgICAgICAgICAgICAgIHRvdGFsOiB0aGlzLmV4cG9ydGVycy5sZW5ndGgsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgZXhwb3J0ZXIuZXhwb3J0KGRhdGEpO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZGVidWcoJ1tFeHBvcnRlcl0gU3VjY2Vzc2Z1bGx5IGNvbXBsZXRlZCBleHBvcnQnLCB7IGluZGV4OiBpIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZXhwb3J0ZXJFcnJvciA9IGVycm9yIGluc3RhbmNlb2YgdHlwZXNfMS5FeHBvcnRlckVycm9yXG4gICAgICAgICAgICAgICAgICAgID8gZXJyb3JcbiAgICAgICAgICAgICAgICAgICAgOiBuZXcgdHlwZXNfMS5FeHBvcnRlckVycm9yKCdFeHBvcnRlciBmYWlsZWQnLCBkYXRhLnBhZ2VJZCwgJ2V4cG9ydCcsIGVycm9yKTtcbiAgICAgICAgICAgICAgICAvLyBMb2cgZXJyb3IgYW5kIGNvbnRpbnVlIHdpdGggbmV4dCBleHBvcnRlclxuICAgICAgICAgICAgICAgIGNvbnNvbGUuZGVidWcoJ1tFeHBvcnRlcl0gRXhwb3J0IGZhaWxlZCcsIHtcbiAgICAgICAgICAgICAgICAgICAgaW5kZXg6IGksXG4gICAgICAgICAgICAgICAgICAgIGVycm9yOiBleHBvcnRlckVycm9yLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgIGRldGFpbHM6IGV4cG9ydGVyRXJyb3IuZGV0YWlscyxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBlcnJvcnMucHVzaChleHBvcnRlckVycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBBZGQgYW55IGV4cG9ydCBlcnJvcnMgdG8gbWV0YWRhdGEgZm9yIHBvdGVudGlhbCBoYW5kbGluZyB1cHN0cmVhbVxuICAgICAgICBpZiAoZXJyb3JzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZGVidWcoJ1tFeHBvcnRlcl0gQ29tcGxldGVkIHdpdGggZXJyb3JzJywge1xuICAgICAgICAgICAgICAgIGVycm9yQ291bnQ6IGVycm9ycy5sZW5ndGgsXG4gICAgICAgICAgICAgICAgdG90YWxFeHBvcnRlcnM6IHRoaXMuZXhwb3J0ZXJzLmxlbmd0aCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZGF0YS5tZXRhZGF0YSA9IHtcbiAgICAgICAgICAgICAgICAuLi5kYXRhLm1ldGFkYXRhLFxuICAgICAgICAgICAgICAgIGV4cG9ydEVycm9yczogZXJyb3JzLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZGVidWcoJ1tFeHBvcnRlcl0gQWxsIGV4cG9ydHMgY29tcGxldGVkIHN1Y2Nlc3NmdWxseScpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnNvbGUuZGVidWcoJ1tFeHBvcnRlcl0gRXhwb3J0IHByb2Nlc3MgZmluaXNoZWQnKTtcbiAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxufVxuZXhwb3J0cy5FeHBvcnRlciA9IEV4cG9ydGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/notion-to-md/build/core/exporter/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/notion-to-md/build/core/media-handler/index.js":
/*!*********************************************************************!*\
  !*** ./node_modules/notion-to-md/build/core/media-handler/index.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MediaHandler = void 0;\nconst errors_1 = __webpack_require__(/*! ../errors */ \"(rsc)/./node_modules/notion-to-md/build/core/errors.js\");\nclass MediaHandler {\n    constructor(pageId, config, manifestManager) {\n        var _a;\n        this.config = config;\n        this.processedBlockIds = new Set();\n        console.debug(\"[MediaHandler] Initializing for page:\", pageId);\n        console.debug(\"[MediaHandler] Configuration:\", config);\n        if (!this.config.strategy) {\n            console.debug(\"[MediaHandler] Initialization failed: No strategy provided\");\n            throw new errors_1.MediaHandlerError(\"Media strategy is required\");\n        }\n        this.strategy = this.config.strategy;\n        this.failForward = (_a = this.config.failForward) !== null && _a !== void 0 ? _a : true;\n        this.manifestManager = manifestManager;\n        console.debug(\"[MediaHandler] Initialized successfully. failForward:\", this.failForward);\n    }\n    async process(data) {\n        console.debug(\"[MediaHandler] Starting processing chain\");\n        if (data.blockTree.mediaBlocks) {\n            console.debug(\"[MediaHandler] Found media blocks to process:\", data.blockTree.mediaBlocks.length);\n            await this.processBlocks(data.blockTree.mediaBlocks);\n        }\n        else {\n            console.debug(\"[MediaHandler] No media blocks to process\");\n        }\n        console.debug(\"[MediaHandler] Processing complete, forwarding to next processor\");\n        return this.next ? this.next.process(data) : data;\n    }\n    /**\n     * Process all media blocks\n     */\n    async processBlocks(mediaBlocks) {\n        console.debug(\"[MediaHandler] Starting batch processing of media blocks\");\n        if (!this.manifestManager) {\n            console.debug(\"[MediaHandler] Process failed: Manifest manager not initialized\");\n            throw new errors_1.MediaHandlerError(\"Manifest manager not initialized\");\n        }\n        // Reset tracking state\n        this.processedBlockIds.clear();\n        console.debug(\"[MediaHandler] Reset processed blocks tracking\");\n        console.debug(\"[MediaHandler] Processing media blocks in parallel\");\n        await Promise.all(mediaBlocks.map((block) => this.processMediaBlock(block)));\n        console.debug(\"[MediaHandler] Starting cleanup of removed blocks\");\n        await this.cleanupRemovedBlocks();\n        console.debug(\"[MediaHandler] Saving manifest\");\n        await this.manifestManager.save();\n        console.debug(\"[MediaHandler] Batch processing complete\");\n    }\n    async processMediaBlock(block) {\n        console.debug(\"[MediaHandler] Processing media block:\", block.id);\n        let existingEntry = this.manifestManager.getEntry(block.id);\n        // @ts-ignore - If block hasn't changed, just mark as processed and return\n        if (existingEntry && existingEntry.lastEdited === block.last_edited_time) {\n            console.debug(\"[MediaHandler] Block unchanged, skipping processing:\", block.id);\n            this.processedBlockIds.add(block.id);\n            return;\n        }\n        try {\n            // Cleanup old media if content changed (but block is same)\n            if (existingEntry) {\n                console.debug(\"[MediaHandler] Cleaning up existing media for block:\", block.id);\n                await this.strategy.cleanup(existingEntry);\n            }\n            console.debug(\"[MediaHandler] Processing media for block:\", block.id);\n            const mediaInfo = await this.strategy.process(block);\n            console.debug(\"[MediaHandler] Updating block media information:\", block.id);\n            this.updateBlockMedia(block, mediaInfo);\n            console.debug(\"[MediaHandler] Updating manifest entry for block:\", block.id);\n            if (mediaInfo.type !== \"DIRECT\") {\n                await this.manifestManager.updateEntry(block.id, {\n                    mediaInfo,\n                    // @ts-ignore\n                    lastEdited: block.last_edited_time,\n                });\n            }\n            this.processedBlockIds.add(block.id);\n            console.debug(\"[MediaHandler] Block processing complete:\", block.id);\n        }\n        catch (error) {\n            console.debug(\"[MediaHandler] Error processing block:\", block.id, error);\n            if (!this.failForward) {\n                throw error;\n            }\n            console.error(error);\n        }\n    }\n    async cleanupRemovedBlocks() {\n        console.debug(\"[MediaHandler] Starting cleanup of removed blocks\");\n        const manifestData = this.manifestManager.getManifest();\n        // Find entries for blocks that no longer exist and clean them up\n        for (const [blockId, entry] of Object.entries(manifestData.mediaEntries)) {\n            if (!this.processedBlockIds.has(blockId)) {\n                console.debug(\"[MediaHandler] Cleaning up removed block:\", blockId);\n                try {\n                    await this.strategy.cleanup(entry);\n                    this.manifestManager.removeEntry(blockId);\n                    console.debug(\"[MediaHandler] Successfully cleaned up block:\", blockId);\n                }\n                catch (error) {\n                    // Cleanup errors are always logged but don't stop processing\n                    console.debug(\"[MediaHandler] Error during cleanup for block:\", blockId, error);\n                    console.warn(error);\n                }\n            }\n        }\n        console.debug(\"[MediaHandler] Cleanup complete\");\n    }\n    /**\n     * Update block with processed media information\n     */\n    updateBlockMedia(block, mediaInfo) {\n        console.debug(\"[MediaHandler] Updating media information for block:\", block.id);\n        if (!(\"type\" in block)) {\n            console.debug(\"[MediaHandler] Invalid block structure, skipping update\");\n            return;\n        }\n        const blockType = block.type;\n        if (![\"image\", \"video\", \"file\", \"pdf\"].includes(blockType)) {\n            console.debug(\"[MediaHandler] Unsupported block type:\", blockType);\n            return;\n        }\n        // @ts-ignore\n        const urlType = block[blockType].type;\n        console.debug(\"[MediaHandler] Updating URL for block type:\", blockType, \"URL type:\", urlType);\n        // @ts-ignore\n        block[blockType][urlType].url = mediaInfo.transformedUrl;\n        console.debug(\"[MediaHandler] Updated block media URL to:\", mediaInfo.transformedUrl);\n    }\n}\nexports.MediaHandler = MediaHandler;\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/notion-to-md/build/core/media-handler/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/notion-to-md/build/core/media-handler/strategies/download.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/notion-to-md/build/core/media-handler/strategies/download.js ***!
  \***********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DownloadStrategy = void 0;\nconst types_1 = __webpack_require__(/*! ../../../types */ \"(rsc)/./node_modules/notion-to-md/build/types/index.js\");\nconst node_fetch_1 = __importDefault(__webpack_require__(/*! node-fetch */ \"(rsc)/./node_modules/node-fetch/lib/index.mjs\"));\nconst fs = __importStar(__webpack_require__(/*! fs/promises */ \"fs/promises\"));\nconst path = __importStar(__webpack_require__(/*! path */ \"path\"));\nconst lite_1 = __importDefault(__webpack_require__(/*! mime/lite */ \"(rsc)/./node_modules/notion-to-md/node_modules/mime/lite.js\"));\nconst url_1 = __webpack_require__(/*! ../../../utils/url */ \"(rsc)/./node_modules/notion-to-md/build/utils/url.js\");\nclass DownloadStrategy {\n    constructor(config) {\n        var _a;\n        this.config = config;\n        console.debug('[DownloadStrategy] Initializing with config:', config);\n        // Constructor validation always throws since it's a configuration error\n        if (!config.outputDir) {\n            console.debug('[DownloadStrategy] Initialization failed: missing outputDir');\n            throw new types_1.MediaProcessingError('Configuration Error', 'constructor', 'initialization', new Error('outputDir is required for DownloadStrategy'));\n        }\n        // Set default for failForward if not provided\n        this.config.failForward = (_a = config.failForward) !== null && _a !== void 0 ? _a : true;\n        console.debug('[DownloadStrategy] Initialized successfully. failForward:', this.config.failForward);\n    }\n    async process(block) {\n        console.debug('[DownloadStrategy] Processing block:', block.id);\n        console.debug('[DownloadStrategy] Extracting media URL from block:', block.id);\n        const url = this.extractMediaUrl(block);\n        if (!url) {\n            console.debug('[DownloadStrategy] No media URL found in block:', block.id);\n            const error = new types_1.MediaProcessingError('No media URL found in block', block.id, 'process', new Error('URL extraction failed'));\n            if (!this.config.failForward) {\n                throw error;\n            }\n            console.error(error);\n            return {\n                type: types_1.MediaStrategyType.DIRECT,\n                originalUrl: '',\n                transformedUrl: '',\n            };\n        }\n        console.debug('[DownloadStrategy] Extracted media URL:', url);\n        // Handle external URLs - this is always allowed regardless of failForward\n        if (this.config.preserveExternalUrls && (0, url_1.isExternalUrl)(url)) {\n            console.debug('[DownloadStrategy] Preserving external URL:', url);\n            return {\n                type: types_1.MediaStrategyType.DIRECT,\n                originalUrl: url,\n                transformedUrl: url,\n            };\n        }\n        try {\n            console.debug('[DownloadStrategy] Downloading file from:', url);\n            const { localPath, mimeType } = await this.downloadFile(url, block.id);\n            console.debug('[DownloadStrategy] File downloaded successfully. Local path:', localPath, 'MIME type:', mimeType);\n            const mediaInfo = {\n                type: types_1.MediaStrategyType.DOWNLOAD,\n                originalUrl: url,\n                localPath,\n                mimeType,\n                transformedUrl: this.transform({\n                    type: types_1.MediaStrategyType.DOWNLOAD,\n                    originalUrl: url,\n                    localPath,\n                    mimeType,\n                }),\n            };\n            console.debug('[DownloadStrategy] Media info created:', mediaInfo);\n            return mediaInfo;\n        }\n        catch (error) {\n            console.debug('[DownloadStrategy] Error processing block:', error);\n            const processingError = new types_1.MediaProcessingError('Failed to download media', block.id, 'process', error);\n            if (!this.config.failForward) {\n                throw processingError;\n            }\n            console.error(processingError);\n            return {\n                type: types_1.MediaStrategyType.DIRECT,\n                originalUrl: url,\n                transformedUrl: url,\n            };\n        }\n    }\n    transform(mediaInfo) {\n        if (mediaInfo.type === types_1.MediaStrategyType.DIRECT) {\n            console.debug('[DownloadStrategy] Direct media type, returning original URL');\n            return mediaInfo.originalUrl;\n        }\n        if (!mediaInfo.localPath) {\n            console.debug('[DownloadStrategy] Missing local path in media info');\n            const error = new types_1.MediaProcessingError('Missing local path for downloaded file', 'unknown', 'transform', new Error('Local path required for transformation'));\n            if (!this.config.failForward) {\n                throw error;\n            }\n            console.error(error);\n            return mediaInfo.originalUrl;\n        }\n        try {\n            let transformedPath;\n            if (this.config.transformPath) {\n                console.debug('[DownloadStrategy] Applying custom path transformation');\n                transformedPath = this.config.transformPath(mediaInfo.localPath);\n            }\n            else {\n                console.debug('[DownloadStrategy] Using default path');\n                transformedPath = mediaInfo.localPath;\n            }\n            console.debug('[DownloadStrategy] Transformed path:', transformedPath);\n            return transformedPath;\n        }\n        catch (error) {\n            console.debug('[DownloadStrategy] Error during path transformation:', error);\n            const processingError = new types_1.MediaProcessingError('Failed to transform path', 'unknown', 'transform', error);\n            if (!this.config.failForward) {\n                throw processingError;\n            }\n            console.error(processingError);\n            return mediaInfo.originalUrl;\n        }\n    }\n    async cleanup(entry) {\n        console.debug('[DownloadStrategy] Starting cleanup for media at: ', \n        // @ts-ignore\n        entry.mediaInfo.localPath);\n        // Cleanup always fails forward regardless of config\n        // This prevents cleanup errors from breaking the entire process\n        if (entry.mediaInfo.type === types_1.MediaStrategyType.DOWNLOAD &&\n            entry.mediaInfo.localPath) {\n            try {\n                console.debug('[DownloadStrategy] Deleting file:', entry.mediaInfo.localPath);\n                await fs.unlink(entry.mediaInfo.localPath);\n                console.debug('[DownloadStrategy] File deleted successfully');\n            }\n            catch (error) {\n                console.debug('[DownloadStrategy] Error during cleanup:', error);\n                const processingError = new types_1.MediaProcessingError('Failed to cleanup file', entry.mediaInfo.localPath, 'cleanup', error);\n                console.error(processingError);\n            }\n        }\n        else {\n            console.debug('[DownloadStrategy] Nothing to cleanup for entry:', \n            // @ts-ignore\n            entry.blockId);\n        }\n    }\n    async downloadFile(url, blockId) {\n        const response = await (0, node_fetch_1.default)(url);\n        if (!response.ok) {\n            console.debug('[DownloadStrategy] Download failed with status:', response.status);\n            throw new Error(`Failed to download file: ${response.statusText}`);\n        }\n        // Get the content type and clean it up\n        const contentType = response.headers.get('content-type') || '';\n        const mimeType = contentType.split(';')[0].trim();\n        console.debug('[DownloadStrategy] Detected MIME type:', mimeType);\n        // Try to determine extension using multiple methods\n        let extension = this.determineFileExtension(mimeType);\n        console.debug('[DownloadStrategy] Determined extension:', extension);\n        await fs.mkdir(this.config.outputDir, { recursive: true });\n        console.debug('[DownloadStrategy] Created output directory:', this.config.outputDir);\n        const filename = `${blockId}.${extension}`;\n        const localPath = path.join(this.config.outputDir, filename);\n        console.debug('[DownloadStrategy] Generated local path:', localPath);\n        const buffer = await response.buffer();\n        await fs.writeFile(localPath, buffer);\n        console.debug('[DownloadStrategy] File written successfully');\n        return { localPath, mimeType };\n    }\n    extractMediaUrl(block) {\n        var _a, _b;\n        try {\n            if (!block || !('type' in block)) {\n                console.debug('[DownloadStrategy] Invalid block structure');\n                return null;\n            }\n            // @ts-ignore\n            if (!['image', 'video', 'file', 'pdf'].includes(block.type)) {\n                console.debug('[DownloadStrategy] Unsupported block type:', block.type);\n                return null;\n            }\n            // @ts-ignore\n            const mediaBlock = block[block.type];\n            if (!mediaBlock) {\n                console.debug('[DownloadStrategy] No media block found');\n                return null;\n            }\n            const url = mediaBlock.type === 'external'\n                ? (_a = mediaBlock.external) === null || _a === void 0 ? void 0 : _a.url\n                : (_b = mediaBlock.file) === null || _b === void 0 ? void 0 : _b.url;\n            return url;\n        }\n        catch (error) {\n            console.debug('[DownloadStrategy] Error extracting media URL:', error);\n            return null;\n        }\n    }\n    /**\n     * Determines file extension using multiple fallback methods:\n     * 1. Standard MIME package detection\n     * 2. Extraction from application/[ext] format\n     * 3. Default .bin fallback\n     */\n    determineFileExtension(mimeType) {\n        // First try: Use standard mime package detection\n        const standardExtension = lite_1.default.getExtension(mimeType);\n        if (standardExtension) {\n            console.debug('[DownloadStrategy] Found extension via mime package:', standardExtension);\n            return standardExtension;\n        }\n        // Second try: Extract from application/[extension] format\n        if (mimeType.startsWith('application/')) {\n            const parts = mimeType.split('/');\n            if (parts.length === 2) {\n                // Clean up the extension by removing any parameters\n                // e.g., application/x-custom+xml -> x-custom\n                const rawExt = parts[1].split('+')[0];\n                // Remove x- prefix if present (common in MIME types)\n                const cleanExt = rawExt.replace(/^x-/, '');\n                // Only use if the extension looks valid (contains valid characters)\n                if (/^[a-zA-Z0-9-]+$/.test(cleanExt)) {\n                    console.debug('[DownloadStrategy] Extracted extension from MIME type:', cleanExt);\n                    return cleanExt;\n                }\n            }\n        }\n        // Fallback: Use .bin for unknown types\n        console.debug('[DownloadStrategy] Using fallback .bin extension');\n        return 'bin';\n    }\n}\nexports.DownloadStrategy = DownloadStrategy;\n//# sourceMappingURL=download.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/notion-to-md/build/core/media-handler/strategies/download.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/notion-to-md/build/core/media-handler/strategies/upload.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/notion-to-md/build/core/media-handler/strategies/upload.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.UploadStrategy = void 0;\nconst types_1 = __webpack_require__(/*! ../../../types */ \"(rsc)/./node_modules/notion-to-md/build/types/index.js\");\nconst url_1 = __webpack_require__(/*! ../../../utils/url */ \"(rsc)/./node_modules/notion-to-md/build/utils/url.js\");\nclass UploadStrategy {\n    constructor(config) {\n        var _a;\n        this.config = config;\n        // Constructor validation always throws as it's a configuration error\n        if (!config.uploadHandler) {\n            throw new types_1.MediaProcessingError('Configuration Error', 'constructor', 'initialization', new Error('uploadHandler is required for UploadStrategy'));\n        }\n        // Set default for failForward if not provided\n        this.config.failForward = (_a = config.failForward) !== null && _a !== void 0 ? _a : true;\n    }\n    async process(block) {\n        const url = this.extractMediaUrl(block);\n        // Handle missing URL\n        if (!url) {\n            const error = new types_1.MediaProcessingError('No media URL found in block', block.id, 'process', new Error('URL extraction failed'));\n            if (!this.config.failForward) {\n                throw error;\n            }\n            console.error(error);\n            return {\n                type: types_1.MediaStrategyType.DIRECT,\n                originalUrl: '',\n                transformedUrl: '',\n            };\n        }\n        // Handle external URLs preservation\n        if (this.config.preserveExternalUrls && (0, url_1.isExternalUrl)(url)) {\n            return {\n                type: types_1.MediaStrategyType.DIRECT,\n                originalUrl: url,\n                transformedUrl: url,\n            };\n        }\n        try {\n            // Attempt upload\n            const uploadedUrl = await this.config.uploadHandler(url, block.id);\n            // Handle failed upload (handler returns falsy value)\n            if (!uploadedUrl) {\n                const error = new types_1.MediaProcessingError('Upload handler returned invalid URL', block.id, 'process', new Error('Upload failed'));\n                if (!this.config.failForward) {\n                    throw error;\n                }\n                console.error(error);\n                return {\n                    type: types_1.MediaStrategyType.DIRECT,\n                    originalUrl: url,\n                    transformedUrl: url,\n                };\n            }\n            // Successful upload\n            const mediaInfo = {\n                type: types_1.MediaStrategyType.UPLOAD,\n                originalUrl: url,\n                uploadedUrl,\n                transformedUrl: this.transform({\n                    type: types_1.MediaStrategyType.UPLOAD,\n                    originalUrl: url,\n                    uploadedUrl,\n                }),\n            };\n            return mediaInfo;\n        }\n        catch (error) {\n            const processingError = new types_1.MediaProcessingError('Failed to upload media', block.id, 'process', error);\n            if (!this.config.failForward) {\n                throw processingError;\n            }\n            console.error(processingError);\n            return {\n                type: types_1.MediaStrategyType.DIRECT,\n                originalUrl: url,\n                transformedUrl: url,\n            };\n        }\n    }\n    transform(mediaInfo) {\n        // For direct types, always return original URL\n        if (mediaInfo.type === types_1.MediaStrategyType.DIRECT) {\n            return mediaInfo.originalUrl;\n        }\n        // Validate uploaded URL\n        if (!mediaInfo.uploadedUrl) {\n            const error = new types_1.MediaProcessingError('Missing uploaded URL', 'unknown', 'transform', new Error('Uploaded URL required for transformation'));\n            if (!this.config.failForward) {\n                throw error;\n            }\n            console.error(error);\n            return mediaInfo.originalUrl;\n        }\n        try {\n            // Apply custom transformation if configured\n            if (this.config.transformPath) {\n                return this.config.transformPath(mediaInfo.uploadedUrl);\n            }\n            return mediaInfo.uploadedUrl;\n        }\n        catch (error) {\n            const processingError = new types_1.MediaProcessingError('Failed to transform URL', 'unknown', 'transform', error);\n            if (!this.config.failForward) {\n                throw processingError;\n            }\n            console.error(processingError);\n            return mediaInfo.originalUrl;\n        }\n    }\n    async cleanup(entry) {\n        // Cleanup always fails forward regardless of config\n        if (entry.mediaInfo.type === types_1.MediaStrategyType.UPLOAD &&\n            this.config.cleanupHandler &&\n            entry.mediaInfo.uploadedUrl) {\n            try {\n                await this.config.cleanupHandler(entry);\n            }\n            catch (error) {\n                const processingError = new types_1.MediaProcessingError('Failed to cleanup uploaded file', entry.mediaInfo.originalUrl, 'cleanup', error);\n                console.error(processingError);\n            }\n        }\n    }\n    extractMediaUrl(block) {\n        var _a, _b;\n        try {\n            if (!block || !('type' in block)) {\n                return null;\n            }\n            // @ts-ignore\n            if (!['image', 'video', 'file', 'pdf'].includes(block.type)) {\n                return null;\n            }\n            // @ts-ignore\n            const mediaBlock = block[block.type];\n            if (!mediaBlock) {\n                return null;\n            }\n            return mediaBlock.type === 'external'\n                ? (_a = mediaBlock.external) === null || _a === void 0 ? void 0 : _a.url\n                : (_b = mediaBlock.file) === null || _b === void 0 ? void 0 : _b.url;\n        }\n        catch {\n            return null;\n        }\n    }\n}\nexports.UploadStrategy = UploadStrategy;\n//# sourceMappingURL=upload.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/notion-to-md/build/core/media-handler/strategies/upload.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/notion-to-md/build/core/page-ref-handler/index.js":
/*!************************************************************************!*\
  !*** ./node_modules/notion-to-md/build/core/page-ref-handler/index.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.PageReferenceHandler = void 0;\nconst types_1 = __webpack_require__(/*! ../../types */ \"(rsc)/./node_modules/notion-to-md/build/types/index.js\");\nconst errors_1 = __webpack_require__(/*! ../errors */ \"(rsc)/./node_modules/notion-to-md/build/core/errors.js\");\nclass PageReferenceHandler {\n    constructor(pageId, config = {}, manifestManager) {\n        this.config = config;\n        this.processedRefs = new Set();\n        this.pageProperties = null;\n        console.debug('[PageRefHandler] Initializing with config:', config);\n        if (!pageId)\n            throw new errors_1.PageReferenceHandlerError('Page ID is required');\n        if (!manifestManager)\n            throw new errors_1.PageReferenceHandlerError('Manifest manager is required');\n        this.pageId = pageId;\n        this.manifestManager = manifestManager;\n        console.debug('[PageRefHandler] Initialized for page:', pageId);\n    }\n    async process(data) {\n        console.debug('[PageRefHandler] Starting process');\n        if (data.blockTree.pageRefBlocks && data.blockTree.properties) {\n            await this.processBlocks(data.blockTree.pageRefBlocks, data.blockTree.properties);\n        }\n        console.debug('[PageRefHandler] Process complete');\n        return this.next ? this.next.process(data) : data;\n    }\n    async processBlocks(blocks, properties) {\n        try {\n            console.debug('[PageRefHandler] Processing blocks:', blocks.length);\n            if (!(blocks === null || blocks === void 0 ? void 0 : blocks.length))\n                throw new errors_1.PageReferenceHandlerError('Invalid blocks array');\n            if (!properties)\n                throw new errors_1.PageReferenceHandlerError('Properties required');\n            this.pageProperties = properties;\n            await this.handlePageProperties();\n            for (const block of blocks) {\n                await this.processPageRef(block);\n            }\n            console.debug('[PageRefHandler] Blocks processing complete');\n        }\n        catch (error) {\n            console.error('[PageRefHandler] Block processing failed:', error);\n            throw new errors_1.PageReferenceHandlerError('Failed to process blocks', error instanceof Error ? error : undefined);\n        }\n    }\n    async handlePageProperties() {\n        var _a, _b, _c;\n        if (!this.config.UrlPropertyNameNotion || !this.pageProperties) {\n            console.debug('[PageRefHandler] Skipping property handling - no config/properties');\n            return;\n        }\n        try {\n            console.debug('[PageRefHandler] Processing page properties');\n            const urlProperty = this.pageProperties[this.config.UrlPropertyNameNotion];\n            let url = null;\n            if (!urlProperty) {\n                console.debug('[PageRefHandler] Skipping property handling - no url property');\n                return;\n            }\n            if ('url' in urlProperty) {\n                url = urlProperty.url;\n            }\n            else if ('rich_text' in urlProperty &&\n                ((_c = (_b = (_a = urlProperty.rich_text) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.plain_text) === null || _c === void 0 ? void 0 : _c.startsWith('http'))) {\n                url = urlProperty.rich_text[0].plain_text;\n            }\n            if (url) {\n                console.debug('[PageRefHandler] Updating manifest with URL:', url);\n                await this.manifestManager.updateEntry(this.pageId, {\n                    url,\n                    source: types_1.PageReferenceEntryType.PROPERTY,\n                    lastUpdated: new Date().toISOString(),\n                });\n            }\n        }\n        catch (error) {\n            console.error('[PageRefHandler] Property handling failed:', error);\n            throw new errors_1.PageReferenceHandlerError('Property handling failed', error instanceof Error ? error : undefined);\n        }\n    }\n    async processPageRef(block) {\n        try {\n            const pageId = this.extractPageId(block);\n            if (!pageId)\n                return;\n            console.debug('[PageRefHandler] Processing reference:', pageId);\n            const entry = this.manifestManager.getEntry(pageId);\n            if (!entry) {\n                console.debug('[PageRefHandler] No manifest entry for:', pageId);\n                return;\n            }\n            const transformedUrl = this.transformUrl(entry.url);\n            this.updateBlockContent(block, transformedUrl);\n            this.processedRefs.add(pageId);\n        }\n        catch (error) {\n            console.error('[PageRefHandler] Reference processing failed:', error);\n            throw new errors_1.PageReferenceHandlerError('Reference processing failed', error instanceof Error ? error : undefined);\n        }\n    }\n    extractPageId(block) {\n        var _a, _b, _c;\n        if ('type' in block &&\n            block.type === 'link_to_page' &&\n            ((_a = block.link_to_page) === null || _a === void 0 ? void 0 : _a.type) === 'page_id') {\n            return block.link_to_page.page_id;\n        }\n        // @ts-ignore\n        if ('type' in block && block[block.type] && block[block.type].rich_text) {\n            // @ts-ignore\n            const richText = block[block.type].rich_text;\n            for (const text of richText) {\n                if (text.type === 'mention' &&\n                    ((_b = text.mention) === null || _b === void 0 ? void 0 : _b.type) === 'page' &&\n                    ((_c = text.mention.page) === null || _c === void 0 ? void 0 : _c.id)) {\n                    return text.mention.page.id;\n                }\n            }\n        }\n        return null;\n    }\n    transformUrl(url) {\n        if (!url)\n            throw new errors_1.PageReferenceHandlerError('URL required');\n        try {\n            if (this.config.transformUrl)\n                return this.config.transformUrl(url);\n            if (this.config.baseUrl) {\n                const baseUrl = this.config.baseUrl.replace(/\\/$/, '');\n                const pathUrl = url.replace(/^\\//, '');\n                return `${baseUrl}/${pathUrl}`;\n            }\n            return url;\n        }\n        catch (error) {\n            console.error('[PageRefHandler] URL transformation failed:', error);\n            throw new errors_1.PageReferenceHandlerError('URL transformation failed', error instanceof Error ? error : undefined);\n        }\n    }\n    /**\n     * Update's block content with URL\n     * Blocks: link_to_page, child_page, mention\n     * NOTE: since link_to_page and child_page do not support URL/href property,\n     * we only convert them to mention block to maintain consistency\n     */\n    updateBlockContent(block, url) {\n        var _a, _b;\n        try {\n            if (!('type' in block)) {\n                throw new errors_1.PageReferenceHandlerError('Invalid block structure');\n            }\n            // Handle direct page references\n            if (block.type === 'link_to_page' &&\n                ((_a = block.link_to_page) === null || _a === void 0 ? void 0 : _a.type) === 'page_id') {\n                //@ts-ignore - url doesn't exist in block, we are forcefully adding one\n                block.link_to_page.url = url;\n            }\n            else if (block.type === 'child_page') {\n                //@ts-ignore - Add URL to child page block\n                block.child_page.url = url;\n            }\n            else {\n                // Handle mentions\n                const blockContent = block[block.type];\n                // @ts-ignore\n                if (blockContent && 'rich_text' in blockContent) {\n                    for (const text of blockContent.rich_text) {\n                        if (text.type === 'mention' && ((_b = text.mention) === null || _b === void 0 ? void 0 : _b.type) === 'page') {\n                            text.href = url;\n                        }\n                    }\n                }\n            }\n        }\n        catch (error) {\n            console.error('[PageRefHandler] Block content update failed:', error);\n            throw new errors_1.PageReferenceHandlerError('Content update failed', error instanceof Error ? error : undefined);\n        }\n    }\n}\nexports.PageReferenceHandler = PageReferenceHandler;\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/notion-to-md/build/core/page-ref-handler/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/notion-to-md/build/core/renderer/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/notion-to-md/build/core/renderer/index.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BaseRendererPlugin = void 0;\n/**\n * Interface for renderer plugins in the Notion-to-MD system.\n * Provides core framework for transforming Notion blocks into any desired output format.\n */\nclass BaseRendererPlugin {\n    constructor() {\n        /**\n         * Defines the document structure using variables in {{{variableName}}} format.\n         * Must include at least 'content' and 'imports' variables.\n         */\n        this.template = `{{{imports}}}\\n{{{content}}}`;\n        // Internal state\n        this.variableDataCollector = new Map();\n        this.variableResolvers = new Map();\n        /**\n         * Default resolver for variables without custom resolvers.\n         * Joins collected content with newlines.\n         */\n        this.defaultResolver = async (variableName, context) => {\n            const collected = context.variableData.get(variableName) || [];\n            return collected.join('\\n');\n        };\n        // Initialize context with default values\n        this.context = {\n            pageId: '',\n            pageProperties: {},\n            metadata: {},\n            block: {},\n            blockTree: [],\n            variableData: this.variableDataCollector,\n            transformers: {\n                blocks: {},\n                annotations: {},\n            },\n            utils: {\n                processRichText: this.processRichText.bind(this),\n                processBlock: this.processBlock.bind(this),\n            },\n        };\n        console.debug('[BaseRendererPlugin] Context initialized');\n        // Initialize required variables\n        this.initializeDefaultVariables();\n        // Initialize additional variables from template\n        this.validateAndInitializeTemplate();\n        console.debug('[BaseRendererPlugin] Renderer plugin initialization complete');\n    }\n    validateAndInitializeTemplate() {\n        console.debug('[BaseRendererPlugin] Validating and initializing template');\n        // First validate the template exists\n        if (!this.template) {\n            console.debug('[BaseRendererPlugin] Template not defined');\n            throw new Error('Template must be defined');\n        }\n        // Reuse existing validation method\n        this.validateTemplate(this.template);\n        // Initialize default variables first - these are required\n        this.initializeDefaultVariables();\n        // Then initialize template-specific variables\n        this.initializeTemplateVariables();\n        console.debug('[BaseRendererPlugin] Template initialization complete');\n    }\n    /**\n     * Adds custom metadata that will be available throughout rendering\n     */\n    addMetadata(key, value) {\n        this.context.metadata[key] = value;\n        return this;\n    }\n    /**\n     * Adds a new variable with an optional custom resolver\n     */\n    addVariable(name, resolver) {\n        console.debug(`[BaseRendererPlugin] Adding variable: ${name}`);\n        // Create collector if it doesn't exist\n        if (!this.variableDataCollector.has(name)) {\n            this.variableDataCollector.set(name, []);\n            console.debug(`[BaseRendererPlugin] Created new collector for: ${name}`);\n        }\n        // Register resolver if provided\n        if (resolver) {\n            this.variableResolvers.set(name, resolver);\n            console.debug(`[BaseRendererPlugin] Registered custom resolver for: ${name}`);\n        }\n        return this;\n    }\n    /**\n     * Adds imports that will be collected in the imports variable\n     */\n    addImports(...imports) {\n        const importCollector = this.variableDataCollector.get('imports') || [];\n        imports.forEach((imp) => {\n            if (!importCollector.includes(imp)) {\n                importCollector.push(imp);\n            }\n        });\n        this.variableDataCollector.set('imports', importCollector);\n        return this;\n    }\n    /**\n     * Updates template while ensuring required variables exist\n     */\n    setTemplate(template) {\n        this.validateTemplate(template);\n        this.template = template;\n        this.initializeTemplateVariables();\n        return this;\n    }\n    /**\n     * Creates a single block transformer with proper type inference.\n     * Note: Block level imports are stored with the transformer, not added to import variable immediately.\n     * Only added when the transformer is actually used.\n     */\n    createBlockTransformer(type, transformer) {\n        this.context.transformers.blocks[type] = transformer;\n        return this;\n    }\n    /**\n     * Creates multiple block transformers at once\n     */\n    createBlockTransformers(transformers) {\n        for (const [type, transformer] of Object.entries(transformers)) {\n            if (transformer) {\n                this.createBlockTransformer(type, transformer);\n            }\n        }\n        return this;\n    }\n    /**\n     * Creates a single annotation transformer with proper type inference.\n     */\n    createAnnotationTransformer(name, transformer) {\n        this.context.transformers.annotations[name] = transformer;\n        return this;\n    }\n    /**\n     * Creates multiple annotation transformers simultaneously.\n     */\n    createAnnotationTransformers(transformers) {\n        Object.entries(transformers).forEach(([name, transformer]) => {\n            this.createAnnotationTransformer(name, transformer);\n        });\n        return this;\n    }\n    /**\n     * Main processing method that orchestrates the rendering pipeline\n     */\n    async process(data) {\n        console.debug('[BaseRendererPlugin] Starting rendering process', {\n            pageId: data.pageId,\n            blockCount: data.blockTree.blocks.length,\n        });\n        try {\n            this.updateContext(data);\n            this.resetCollectors();\n            // Process all blocks\n            console.debug('[BaseRendererPlugin] Processing blocks');\n            for (const block of data.blockTree.blocks) {\n                await this.processBlock(block);\n            }\n            const content = await this.renderTemplate();\n            console.debug('[BaseRendererPlugin] Rendering process completed successfully');\n            data = {\n                ...data,\n                content,\n            };\n            return this.next ? this.next.process(data) : data;\n        }\n        catch (error) {\n            console.debug('[BaseRendererPlugin] Error during rendering:', error);\n            throw new Error(`Renderer failed: ${error instanceof Error ? error.message : String(error)}`);\n        }\n    }\n    /**\n     * Core processing function that processes Notion rich text content.\n     * Applies registered annotation transformers in order.\n     */\n    async processRichText(richText, metadata) {\n        const results = await Promise.all(richText.map(async (item) => {\n            let text = item.plain_text;\n            let link = item.href;\n            // Process each annotation that has a registered transformer\n            for (const [name, value] of Object.entries(item.annotations)) {\n                if (value && this.context.transformers.annotations[name]) {\n                    text = await this.context.transformers.annotations[name].transform({\n                        text,\n                        annotations: item.annotations,\n                        metadata,\n                    });\n                }\n            }\n            // @ts-ignore\n            let equation = item.equation;\n            if (equation) {\n                text = await this.context.transformers.annotations.equation.transform({\n                    text,\n                    metadata,\n                });\n            }\n            if (link) {\n                // Apply link transformation last if exists\n                text = await this.context.transformers.annotations.link.transform({\n                    text,\n                    link: link ? { url: link } : undefined,\n                    metadata,\n                });\n            }\n            return text;\n        }));\n        return results.join('');\n    }\n    /**\n     * Processes a single Notion block by applying the appropriate transformer and managing its content.\n     *\n     * This method serves as a critical junction in the rendering pipeline, handling two key responsibilities:\n     * 1. Block Transformation: Converts a Notion block into the target format using registered transformers\n     * 2. Content Collection: Manages how transformed content enters the final output\n     *\n     * The method follows an important principle about content hierarchy:\n     * - Top-level blocks (those with parent.type === \"page_id\") are added to the variable collector\n     * - Nested blocks (those with parent.type === \"block_id\") return their content but don't add to collector\n     *\n     * This design ensures that nested content (like list items within a list) can be:\n     * - Transformed individually using their specific transformers\n     * - Assembled into larger structures by their parent blocks\n     * - Added to the final output only when the complete structure is ready\n     *\n     * For example, in a nested list:\n     * - Child items are transformed but not collected\n     * - The parent list assembles all children into the complete list structure\n     * - Only the complete list is added to the collector\n     */\n    async processBlock(block, metadata) {\n        var _a;\n        // @ts-ignore\n        const blockType = block.type;\n        console.debug(`[BaseRendererPlugin] Processing block of type: ${blockType}`);\n        const transformer = this.context.transformers.blocks[blockType];\n        if (!transformer) {\n            console.debug(`[BaseRendererPlugin] No transformer found for type: ${blockType}`);\n            return '';\n        }\n        try {\n            // Create context for this block transformation\n            const blockContext = {\n                ...this.context,\n                block,\n                metadata: {\n                    ...this.context.metadata,\n                    ...metadata,\n                },\n            };\n            // Process the block\n            const output = await transformer.transform(blockContext);\n            console.debug(`[BaseRendererPlugin] Successfully transformed block: ${blockType}`);\n            // Handle imports\n            if ((_a = transformer.imports) === null || _a === void 0 ? void 0 : _a.length) {\n                console.debug(`[BaseRendererPlugin] Adding imports for ${blockType}`);\n                this.addImports(...transformer.imports);\n            }\n            // Handle variable targeting\n            const targetVariable = transformer.targetVariable || 'content';\n            if (!this.variableDataCollector.has(targetVariable)) {\n                console.debug(`[BaseRendererPlugin] Creating new collector for target: ${targetVariable}`);\n                this.addVariable(targetVariable);\n            }\n            // Only collect if this isn't a child block\n            // Note: Even top-level blocks are technically children of the page\n            // So we might want to handle this collection at a higher level\n            // @ts-ignore\n            if (block.parent.type === 'page_id') {\n                this.addToCollector(targetVariable, output);\n            }\n            return output;\n        }\n        catch (error) {\n            console.debug(`[BaseRendererPlugin] Error processing block ${blockType}:`, error);\n            throw new Error(`Failed to process block: ${error instanceof Error ? error.message : String(error)}`);\n        }\n    }\n    /**\n     * Initializes the required 'content' and 'imports' variables.\n     * Sets up default resolver for 'imports' variable.\n     */\n    initializeDefaultVariables() {\n        console.debug('[BaseRendererPlugin] Initializing default variables');\n        BaseRendererPlugin.DEFAULT_VARIABLES.forEach((variable) => {\n            this.addVariable(variable, this.defaultResolver);\n        });\n        console.debug('[BaseRendererPlugin] Default variables initialized');\n    }\n    initializeTemplateVariables() {\n        const variables = this.template.match(/{{{(\\w+)}}}/g) || [];\n        variables.forEach((variable) => {\n            const name = variable.replace(/{{{|}}}/, '');\n            this.addVariable(name);\n        });\n    }\n    validateTemplate(template) {\n        BaseRendererPlugin.DEFAULT_VARIABLES.forEach((name) => {\n            if (!template.includes(`{{{${name}}}}`)) {\n                throw new Error(`Template must contain ${name} variable`);\n            }\n        });\n    }\n    /**\n     * Adds content to a variable's collector, creating it if needed.\n     */\n    addToCollector(variable, content) {\n        // Ensure the collector exists\n        if (!this.variableDataCollector.has(variable)) {\n            this.variableDataCollector.set(variable, []);\n        }\n        // Add content to collector\n        const collector = this.variableDataCollector.get(variable);\n        collector.push(content);\n    }\n    /**\n     * Resolves variables using their registered resolvers or default resolver.\n     * Replaces {{{variableName}}} in template with resolved content.\n     */\n    async renderTemplate() {\n        console.debug('[BaseRendererPlugin] Starting template rendering');\n        const resolvedVariables = {};\n        for (const [name, collector] of this.variableDataCollector.entries()) {\n            console.debug(`[BaseRendererPlugin] Resolving variable: ${name}`);\n            const resolver = this.variableResolvers.get(name) || this.defaultResolver;\n            resolvedVariables[name] = await resolver(name, {\n                ...this.context,\n            });\n        }\n        console.debug('[BaseRendererPlugin] Template variables resolved, applying to template');\n        return this.template.replace(/{{{(\\w+)}}}/g, (_, name) => resolvedVariables[name] || '');\n    }\n    /**\n     * Resets all variable collectors while preserving imports.\n     * Called at the start of each processing cycle.\n     */\n    resetCollectors() {\n        // Reset all collectors while preserving imports\n        const imports = this.variableDataCollector.get('imports') || [];\n        for (const [name] of this.variableDataCollector) {\n            this.variableDataCollector.set(name, name === 'imports' ? imports : []);\n        }\n    }\n    updateContext(data) {\n        this.context = {\n            ...this.context,\n            pageId: data.pageId,\n            pageProperties: data.blockTree.properties,\n            blockTree: data.blockTree.blocks,\n            metadata: {\n                ...this.context.metadata,\n                ...data.metadata,\n            },\n        };\n    }\n}\nexports.BaseRendererPlugin = BaseRendererPlugin;\n// Class-level constants for required variables\nBaseRendererPlugin.DEFAULT_VARIABLES = ['content', 'imports'];\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/notion-to-md/build/core/renderer/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/notion-to-md/build/index.js":
/*!**************************************************!*\
  !*** ./node_modules/notion-to-md/build/index.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.NotionConverter = void 0;\nconst block_fetcher_1 = __webpack_require__(/*! ./core/block-fetcher */ \"(rsc)/./node_modules/notion-to-md/build/core/block-fetcher/index.js\");\nconst exporter_1 = __webpack_require__(/*! ./core/exporter */ \"(rsc)/./node_modules/notion-to-md/build/core/exporter/index.js\");\nconst media_handler_1 = __webpack_require__(/*! ./core/media-handler */ \"(rsc)/./node_modules/notion-to-md/build/core/media-handler/index.js\");\nconst download_1 = __webpack_require__(/*! ./core/media-handler/strategies/download */ \"(rsc)/./node_modules/notion-to-md/build/core/media-handler/strategies/download.js\");\nconst upload_1 = __webpack_require__(/*! ./core/media-handler/strategies/upload */ \"(rsc)/./node_modules/notion-to-md/build/core/media-handler/strategies/upload.js\");\nconst page_ref_handler_1 = __webpack_require__(/*! ./core/page-ref-handler */ \"(rsc)/./node_modules/notion-to-md/build/core/page-ref-handler/index.js\");\nconst types_1 = __webpack_require__(/*! ./types */ \"(rsc)/./node_modules/notion-to-md/build/types/index.js\");\nconst manifest_manager_1 = __webpack_require__(/*! ./utils/manifest-manager */ \"(rsc)/./node_modules/notion-to-md/build/utils/manifest-manager/index.js\");\nconst mdx_1 = __webpack_require__(/*! ./plugins/renderer/mdx */ \"(rsc)/./node_modules/notion-to-md/build/plugins/renderer/mdx/index.js\");\n/**\n * Main class that orchestrates the conversion process using a chain of processors.\n * Uses builder pattern for configuration and manages the complete pipeline.\n */\nclass NotionConverter {\n    constructor(notionClient) {\n        this.notionClient = notionClient;\n        this.config = {};\n        console.debug('[NotionConverter] Initializing with default configuration');\n        this.config.blockFetcherConfig = {\n            fetchPageProperties: true,\n            fetchComments: false,\n            maxRequestsPerSecond: 3,\n            batchSize: 3,\n            trackMediaBlocks: false,\n            trackPageRefBlocks: false,\n        };\n        console.debug('[NotionConverter] Default block fetcher config:', this.config.blockFetcherConfig);\n    }\n    /**\n     * Configures the block fetcher behavior.\n     * Controls how blocks are fetched from Notion and what additional data is tracked.\n     */\n    configureFetcher(config) {\n        console.debug('[NotionConverter] Configuring block fetcher with:', config);\n        this.config.blockFetcherConfig = {\n            ...this.config.blockFetcherConfig,\n            ...config,\n        };\n        console.debug('[NotionConverter] Updated block fetcher config:', this.config.blockFetcherConfig);\n        return this;\n    }\n    /**\n     * Configures the download strategy for media handling.\n     * Files will be downloaded to local filesystem.\n     */\n    downloadMediaTo(config) {\n        console.debug('[NotionConverter] Configuring download media strategy with:', config);\n        this.config.mediaConfig = {\n            type: types_1.MediaStrategyType.DOWNLOAD,\n            config,\n        };\n        return this;\n    }\n    /**\n     * Configures the upload strategy for media handling.\n     * Files will be uploaded to external storage.\n     */\n    uploadMediaUsing(config) {\n        console.debug('[NotionConverter] Configuring upload media strategy with:', config);\n        this.config.mediaConfig = {\n            type: types_1.MediaStrategyType.UPLOAD,\n            config,\n        };\n        return this;\n    }\n    /**\n     * Configures page reference handling for transforming Notion URLs\n     * into public-facing URLs.\n     */\n    withPageReferences(config) {\n        console.debug('[NotionConverter] Configuring page reference handling with:', config || {});\n        this.config.pageRefConfig = config || {};\n        return this;\n    }\n    /**\n     * Sets the renderer to use for converting blocks to the target format.\n     * If not set, default markdown renderer is used.\n     */\n    withRenderer(renderer) {\n        this.config.renderer = renderer;\n        return this;\n    }\n    /**\n     * Configures one or more exporters to handle the final output.\n     * Exporters receive the complete ChainData for maximum flexibility.\n     */\n    withExporter(exporter) {\n        console.debug('[NotionConverter] Configuring exporters');\n        this.config.exporters = Array.isArray(exporter) ? exporter : [exporter];\n        console.debug('[NotionConverter] Number of configured exporters:', this.config.exporters.length);\n        return this;\n    }\n    /**\n     * Main conversion method that processes a Notion page through the chain.\n     */\n    async convert(pageId) {\n        console.debug('[NotionConverter] Starting conversion for page:', pageId);\n        try {\n            // Initialize the processor chain if not already done\n            if (!this.processorChain) {\n                console.debug('[NotionConverter] Initializing processor chain');\n                await this.initializeProcessorChain(pageId);\n            }\n            // Start the processing chain with initial data\n            console.debug('[NotionConverter] Creating initial chain data');\n            const chainData = {\n                pageId,\n                blockTree: {},\n                content: '',\n            };\n            // Process through the chain\n            console.debug('[NotionConverter] Beginning chain processing');\n            await this.processorChain.process(chainData);\n            console.debug('[NotionConverter] Chain processing completed successfully');\n        }\n        catch (error) {\n            console.debug('[NotionConverter] Error during conversion:', error);\n            this.handleError(error);\n        }\n    }\n    /**\n     * Initializes and links together all the processors based on configuration.\n     * Sets up the complete processing chain in the correct order.\n     */\n    async initializeProcessorChain(pageId) {\n        var _a, _b, _c;\n        console.debug('[NotionConverter] Initializing processor chain for page:', pageId);\n        // Start with BlockFetcher as the head of our chain\n        this.config.blockFetcherConfig = {\n            ...this.config.blockFetcherConfig,\n            trackMediaBlocks: this.config.mediaConfig\n                ? true\n                : (_a = this.config.blockFetcherConfig) === null || _a === void 0 ? void 0 : _a.trackMediaBlocks,\n            trackPageRefBlocks: this.config.pageRefConfig\n                ? true\n                : (_b = this.config.blockFetcherConfig) === null || _b === void 0 ? void 0 : _b.trackPageRefBlocks,\n        };\n        console.debug('[NotionConverter] Creating BlockFetcher with config \\n', this.config.blockFetcherConfig);\n        let head = new block_fetcher_1.BlockFetcher(pageId, this.notionClient, this.config.blockFetcherConfig);\n        let current = head;\n        // Add MediaHandler if media processing is configured\n        if (this.config.mediaConfig) {\n            console.debug('[NotionConverter] Adding MediaHandler to chain');\n            const strategy = this.createMediaStrategy(this.config.mediaConfig);\n            const mediaManifestManager = new manifest_manager_1.MediaManifestManager();\n            await mediaManifestManager.initialize(pageId);\n            const mediaHandler = new media_handler_1.MediaHandler(pageId, { strategy }, mediaManifestManager);\n            current.next = mediaHandler;\n            current = mediaHandler;\n        }\n        // Add PageReferenceHandler if configured\n        if (this.config.pageRefConfig) {\n            console.debug('[NotionConverter] Adding PageReferenceHandler to chain');\n            const pageReferenceManifestManager = new manifest_manager_1.PageReferenceManifestManager();\n            await pageReferenceManifestManager.initialize();\n            const pageRefHandler = new page_ref_handler_1.PageReferenceHandler(pageId, this.config.pageRefConfig, pageReferenceManifestManager);\n            current.next = pageRefHandler;\n            current = pageRefHandler;\n        }\n        // Add renderer node if configured else fallback to default\n        if (!this.config.renderer) {\n            console.debug('[NotionConverter] Using default markdown renderer');\n            this.config.renderer = new mdx_1.MDXRenderer(); // without frontmatter\n        }\n        console.debug('[NotionConverter] Adding renderer to chain');\n        current.next = this.config.renderer;\n        current = this.config.renderer;\n        // Add exporter node if exporters are configured\n        if ((_c = this.config.exporters) === null || _c === void 0 ? void 0 : _c.length) {\n            console.debug('[NotionConverter] Adding Exporter to chain');\n            const exporterNode = new exporter_1.Exporter(this.config.exporters);\n            current.next = exporterNode;\n            // No need to update current since exporter is last as of now\n        }\n        this.processorChain = head;\n        console.debug('[NotionConverter] Processor chain initialization complete');\n    }\n    /**\n     * Creates appropriate media strategy based on configuration\n     */\n    createMediaStrategy(config) {\n        console.debug('[NotionConverter] Creating media strategy of type:', config === null || config === void 0 ? void 0 : config.type);\n        if (!config)\n            throw new Error('Media config is required to create strategy');\n        return config.type === types_1.MediaStrategyType.DOWNLOAD\n            ? new download_1.DownloadStrategy(config.config)\n            : new upload_1.UploadStrategy(config.config);\n    }\n    /**\n     * Handles errors that occur during the conversion process\n     */\n    handleError(error) {\n        console.debug('[NotionConverter] Handling error:', error);\n        throw error;\n    }\n}\nexports.NotionConverter = NotionConverter;\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/notion-to-md/build/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/notion-to-md/build/plugins/exporter/DefaultExporter/index.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/notion-to-md/build/plugins/exporter/DefaultExporter/index.js ***!
  \***********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DefaultExporter = void 0;\nconst promises_1 = __importDefault(__webpack_require__(/*! fs/promises */ \"fs/promises\"));\nconst path_1 = __importDefault(__webpack_require__(/*! path */ \"path\"));\nconst types_1 = __webpack_require__(/*! ../../../types */ \"(rsc)/./node_modules/notion-to-md/build/types/index.js\");\n/**\n * Default exporter that handles saving content to the filesystem,\n * printing to stdout, or storing in a buffer\n */\nclass DefaultExporter {\n    constructor(config) {\n        this.config = config;\n        this.validateConfig();\n    }\n    /**\n     * Export the conversion result according to configuration\n     */\n    async export(data) {\n        try {\n            const { pageId, content } = data;\n            switch (this.config.outputType) {\n                case 'file':\n                    await this.exportToFile(pageId, content);\n                    break;\n                case 'stdout':\n                    this.exportToStdout(content);\n                    break;\n                case 'buffer':\n                    this.exportToBuffer(pageId, content);\n                    break;\n            }\n        }\n        catch (error) {\n            throw new types_1.ExporterError(`Export failed: ${error instanceof Error ? error.message : String(error)}`, data.pageId, 'export', error);\n        }\n    }\n    /**\n     * Export content to a file\n     */\n    async exportToFile(pageId, content) {\n        if (!this.config.outputPath) {\n            throw new Error('outputPath is required for file output type');\n        }\n        // Get the directory path from the full file path\n        const dirPath = path_1.default.dirname(this.config.outputPath);\n        // Create all parent directories if they don't exist\n        await promises_1.default.mkdir(dirPath, { recursive: true });\n        try {\n            await promises_1.default.writeFile(this.config.outputPath, content, 'utf-8');\n        }\n        catch (error) {\n            throw new Error(`Failed to write file: ${error instanceof Error ? error.message : String(error)}`);\n        }\n    }\n    /**\n     * Export content to stdout\n     */\n    exportToStdout(content) {\n        console.log(content);\n    }\n    /**\n     * Export content to a buffer object\n     */\n    exportToBuffer(pageId, content) {\n        if (!this.config.buffer) {\n            throw new Error('buffer is required for buffer output type');\n        }\n        this.config.buffer[pageId] = content;\n    }\n    /**\n     * Validate the provided configuration\n     */\n    validateConfig() {\n        if (!this.config.outputType) {\n            throw new Error('outputType is required');\n        }\n        if (this.config.outputType === 'file' && !this.config.outputPath) {\n            throw new Error('outputPath is required for file output type');\n        }\n        if (this.config.outputType === 'buffer' && !this.config.buffer) {\n            throw new Error('buffer is required for buffer output type');\n        }\n    }\n}\nexports.DefaultExporter = DefaultExporter;\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm90aW9uLXRvLW1kL2J1aWxkL3BsdWdpbnMvZXhwb3J0ZXIvRGVmYXVsdEV4cG9ydGVyL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQSw2Q0FBNkM7QUFDN0M7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsdUJBQXVCO0FBQ3ZCLG1DQUFtQyxtQkFBTyxDQUFDLGdDQUFhO0FBQ3hELCtCQUErQixtQkFBTyxDQUFDLGtCQUFNO0FBQzdDLGdCQUFnQixtQkFBTyxDQUFDLDhFQUFnQjtBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLGtCQUFrQjtBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhEQUE4RCx1REFBdUQ7QUFDckg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0RBQWtELGlCQUFpQjtBQUNuRTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFEQUFxRCx1REFBdUQ7QUFDNUc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QiIsInNvdXJjZXMiOlsiL1VzZXJzL2xicmV2b29ydC9EZXNrdG9wL3Byb2plY3RzL3BlcnNvbmFsLXdlYnNpdGUvbm9kZV9tb2R1bGVzL25vdGlvbi10by1tZC9idWlsZC9wbHVnaW5zL2V4cG9ydGVyL0RlZmF1bHRFeHBvcnRlci9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuRGVmYXVsdEV4cG9ydGVyID0gdm9pZCAwO1xuY29uc3QgcHJvbWlzZXNfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiZnMvcHJvbWlzZXNcIikpO1xuY29uc3QgcGF0aF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJwYXRoXCIpKTtcbmNvbnN0IHR5cGVzXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vdHlwZXNcIik7XG4vKipcbiAqIERlZmF1bHQgZXhwb3J0ZXIgdGhhdCBoYW5kbGVzIHNhdmluZyBjb250ZW50IHRvIHRoZSBmaWxlc3lzdGVtLFxuICogcHJpbnRpbmcgdG8gc3Rkb3V0LCBvciBzdG9yaW5nIGluIGEgYnVmZmVyXG4gKi9cbmNsYXNzIERlZmF1bHRFeHBvcnRlciB7XG4gICAgY29uc3RydWN0b3IoY29uZmlnKSB7XG4gICAgICAgIHRoaXMuY29uZmlnID0gY29uZmlnO1xuICAgICAgICB0aGlzLnZhbGlkYXRlQ29uZmlnKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEV4cG9ydCB0aGUgY29udmVyc2lvbiByZXN1bHQgYWNjb3JkaW5nIHRvIGNvbmZpZ3VyYXRpb25cbiAgICAgKi9cbiAgICBhc3luYyBleHBvcnQoZGF0YSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgeyBwYWdlSWQsIGNvbnRlbnQgfSA9IGRhdGE7XG4gICAgICAgICAgICBzd2l0Y2ggKHRoaXMuY29uZmlnLm91dHB1dFR5cGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdmaWxlJzpcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5leHBvcnRUb0ZpbGUocGFnZUlkLCBjb250ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnc3Rkb3V0JzpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5leHBvcnRUb1N0ZG91dChjb250ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnYnVmZmVyJzpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5leHBvcnRUb0J1ZmZlcihwYWdlSWQsIGNvbnRlbnQpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyB0eXBlc18xLkV4cG9ydGVyRXJyb3IoYEV4cG9ydCBmYWlsZWQ6ICR7ZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiBTdHJpbmcoZXJyb3IpfWAsIGRhdGEucGFnZUlkLCAnZXhwb3J0JywgZXJyb3IpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEV4cG9ydCBjb250ZW50IHRvIGEgZmlsZVxuICAgICAqL1xuICAgIGFzeW5jIGV4cG9ydFRvRmlsZShwYWdlSWQsIGNvbnRlbnQpIHtcbiAgICAgICAgaWYgKCF0aGlzLmNvbmZpZy5vdXRwdXRQYXRoKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ291dHB1dFBhdGggaXMgcmVxdWlyZWQgZm9yIGZpbGUgb3V0cHV0IHR5cGUnKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBHZXQgdGhlIGRpcmVjdG9yeSBwYXRoIGZyb20gdGhlIGZ1bGwgZmlsZSBwYXRoXG4gICAgICAgIGNvbnN0IGRpclBhdGggPSBwYXRoXzEuZGVmYXVsdC5kaXJuYW1lKHRoaXMuY29uZmlnLm91dHB1dFBhdGgpO1xuICAgICAgICAvLyBDcmVhdGUgYWxsIHBhcmVudCBkaXJlY3RvcmllcyBpZiB0aGV5IGRvbid0IGV4aXN0XG4gICAgICAgIGF3YWl0IHByb21pc2VzXzEuZGVmYXVsdC5ta2RpcihkaXJQYXRoLCB7IHJlY3Vyc2l2ZTogdHJ1ZSB9KTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGF3YWl0IHByb21pc2VzXzEuZGVmYXVsdC53cml0ZUZpbGUodGhpcy5jb25maWcub3V0cHV0UGF0aCwgY29udGVudCwgJ3V0Zi04Jyk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZCB0byB3cml0ZSBmaWxlOiAke2Vycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogU3RyaW5nKGVycm9yKX1gKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBFeHBvcnQgY29udGVudCB0byBzdGRvdXRcbiAgICAgKi9cbiAgICBleHBvcnRUb1N0ZG91dChjb250ZW50KSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGNvbnRlbnQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBFeHBvcnQgY29udGVudCB0byBhIGJ1ZmZlciBvYmplY3RcbiAgICAgKi9cbiAgICBleHBvcnRUb0J1ZmZlcihwYWdlSWQsIGNvbnRlbnQpIHtcbiAgICAgICAgaWYgKCF0aGlzLmNvbmZpZy5idWZmZXIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignYnVmZmVyIGlzIHJlcXVpcmVkIGZvciBidWZmZXIgb3V0cHV0IHR5cGUnKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNvbmZpZy5idWZmZXJbcGFnZUlkXSA9IGNvbnRlbnQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFZhbGlkYXRlIHRoZSBwcm92aWRlZCBjb25maWd1cmF0aW9uXG4gICAgICovXG4gICAgdmFsaWRhdGVDb25maWcoKSB7XG4gICAgICAgIGlmICghdGhpcy5jb25maWcub3V0cHV0VHlwZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdvdXRwdXRUeXBlIGlzIHJlcXVpcmVkJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuY29uZmlnLm91dHB1dFR5cGUgPT09ICdmaWxlJyAmJiAhdGhpcy5jb25maWcub3V0cHV0UGF0aCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdvdXRwdXRQYXRoIGlzIHJlcXVpcmVkIGZvciBmaWxlIG91dHB1dCB0eXBlJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuY29uZmlnLm91dHB1dFR5cGUgPT09ICdidWZmZXInICYmICF0aGlzLmNvbmZpZy5idWZmZXIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignYnVmZmVyIGlzIHJlcXVpcmVkIGZvciBidWZmZXIgb3V0cHV0IHR5cGUnKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuRGVmYXVsdEV4cG9ydGVyID0gRGVmYXVsdEV4cG9ydGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/notion-to-md/build/plugins/exporter/DefaultExporter/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/notion-to-md/build/plugins/exporter/index.js":
/*!*******************************************************************!*\
  !*** ./node_modules/notion-to-md/build/plugins/exporter/index.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./DefaultExporter */ \"(rsc)/./node_modules/notion-to-md/build/plugins/exporter/DefaultExporter/index.js\"), exports);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm90aW9uLXRvLW1kL2J1aWxkL3BsdWdpbnMvZXhwb3J0ZXIvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsb0NBQW9DO0FBQ25EO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsYUFBYSxtQkFBTyxDQUFDLDRHQUFtQjtBQUN4QyIsInNvdXJjZXMiOlsiL1VzZXJzL2xicmV2b29ydC9EZXNrdG9wL3Byb2plY3RzL3BlcnNvbmFsLXdlYnNpdGUvbm9kZV9tb2R1bGVzL25vdGlvbi10by1tZC9idWlsZC9wbHVnaW5zL2V4cG9ydGVyL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXhwb3J0cywgcCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vRGVmYXVsdEV4cG9ydGVyXCIpLCBleHBvcnRzKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/notion-to-md/build/plugins/exporter/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/notion-to-md/build/plugins/renderer/mdx/helpers.js":
/*!*************************************************************************!*\
  !*** ./node_modules/notion-to-md/build/plugins/renderer/mdx/helpers.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.formatFrontmatter = exports.formatYamlValue = exports.extractPropertyValue = void 0;\n// Helper to extract values from Notion property objects using proper types\nfunction extractPropertyValue(property) {\n    var _a, _b, _c, _d, _e, _f, _g, _h;\n    // If no property, return null\n    if (!property)\n        return null;\n    // Use type narrowing based on the property type\n    switch (property.type) {\n        case 'title':\n            return ((_a = property.title[0]) === null || _a === void 0 ? void 0 : _a.plain_text) || '';\n        case 'rich_text':\n            return ((_b = property.rich_text[0]) === null || _b === void 0 ? void 0 : _b.plain_text) || '';\n        case 'select':\n            return ((_c = property.select) === null || _c === void 0 ? void 0 : _c.name) || '';\n        case 'multi_select':\n            return property.multi_select.map((item) => item.name);\n        case 'date':\n            // Handle both single dates and date ranges\n            if (!property.date)\n                return '';\n            return property.date.end\n                ? `${property.date.start} to ${property.date.end}`\n                : property.date.start;\n        case 'number':\n            return (_d = property.number) !== null && _d !== void 0 ? _d : 0;\n        case 'checkbox':\n            return property.checkbox;\n        case 'url':\n            return property.url || '';\n        case 'email':\n            return property.email || '';\n        case 'phone_number':\n            return property.phone_number || '';\n        case 'created_time':\n            return property.created_time;\n        case 'created_by':\n            // @ts-ignore\n            return property.created_by.name || property.created_by.id;\n        case 'last_edited_time':\n            return property.last_edited_time;\n        case 'last_edited_by':\n            // @ts-ignore\n            return property.last_edited_by.name || property.last_edited_by.id;\n        case 'formula':\n            // Handle different formula result types\n            switch (property.formula.type) {\n                case 'string':\n                    return property.formula.string || '';\n                case 'number':\n                    return (_e = property.formula.number) !== null && _e !== void 0 ? _e : 0;\n                case 'boolean':\n                    return property.formula.boolean;\n                case 'date':\n                    return ((_f = property.formula.date) === null || _f === void 0 ? void 0 : _f.start) || '';\n            }\n            break;\n        case 'rollup':\n            // Handle different rollup types\n            switch (property.rollup.type) {\n                case 'number':\n                    return (_g = property.rollup.number) !== null && _g !== void 0 ? _g : 0;\n                case 'date':\n                    return ((_h = property.rollup.date) === null || _h === void 0 ? void 0 : _h.start) || '';\n                case 'array':\n                    return property.rollup.array.map((item) => extractPropertyValue(item));\n            }\n            break;\n        case 'files':\n            return property.files.map((file) => \n            // @ts-ignore\n            file.type === 'external' ? file.external.url : file.file.url);\n        case 'people':\n            // @ts-ignore\n            return property.people.map((person) => person.name || person.id);\n        case 'relation':\n            return property.relation.map((item) => item.id);\n        default:\n            return null;\n    }\n}\nexports.extractPropertyValue = extractPropertyValue;\n// Helper to format values for YAML frontmatter\nfunction formatYamlValue(value) {\n    if (Array.isArray(value)) {\n        return `[${value.map((v) => `\"${v}\"`).join(', ')}]`;\n    }\n    if (typeof value === 'string') {\n        return `\"${value.replace(/\"/g, '\\\\\"')}\"`;\n    }\n    return String(value);\n}\nexports.formatYamlValue = formatYamlValue;\nfunction formatFrontmatter(obj) {\n    return `---\\n${Object.entries(obj)\n        .map(([key, value]) => `${key}: ${formatYamlValue(value)}`)\n        .join('\\n')}\\n---\\n\\n`;\n}\nexports.formatFrontmatter = formatFrontmatter;\n//# sourceMappingURL=helpers.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm90aW9uLXRvLW1kL2J1aWxkL3BsdWdpbnMvcmVuZGVyZXIvbWR4L2hlbHBlcnMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QseUJBQXlCLEdBQUcsdUJBQXVCLEdBQUcsNEJBQTRCO0FBQ2xGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixxQkFBcUIsS0FBSyxrQkFBa0I7QUFDakU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEI7QUFDNUI7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLHFCQUFxQixFQUFFLGVBQWU7QUFDekQ7QUFDQTtBQUNBLG1CQUFtQiwyQkFBMkI7QUFDOUM7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0EsbUJBQW1CO0FBQ25CLGtDQUFrQyxJQUFJLElBQUksdUJBQXVCO0FBQ2pFLG9CQUFvQjtBQUNwQjtBQUNBLHlCQUF5QjtBQUN6QiIsInNvdXJjZXMiOlsiL1VzZXJzL2xicmV2b29ydC9EZXNrdG9wL3Byb2plY3RzL3BlcnNvbmFsLXdlYnNpdGUvbm9kZV9tb2R1bGVzL25vdGlvbi10by1tZC9idWlsZC9wbHVnaW5zL3JlbmRlcmVyL21keC9oZWxwZXJzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5mb3JtYXRGcm9udG1hdHRlciA9IGV4cG9ydHMuZm9ybWF0WWFtbFZhbHVlID0gZXhwb3J0cy5leHRyYWN0UHJvcGVydHlWYWx1ZSA9IHZvaWQgMDtcbi8vIEhlbHBlciB0byBleHRyYWN0IHZhbHVlcyBmcm9tIE5vdGlvbiBwcm9wZXJ0eSBvYmplY3RzIHVzaW5nIHByb3BlciB0eXBlc1xuZnVuY3Rpb24gZXh0cmFjdFByb3BlcnR5VmFsdWUocHJvcGVydHkpIHtcbiAgICB2YXIgX2EsIF9iLCBfYywgX2QsIF9lLCBfZiwgX2csIF9oO1xuICAgIC8vIElmIG5vIHByb3BlcnR5LCByZXR1cm4gbnVsbFxuICAgIGlmICghcHJvcGVydHkpXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIC8vIFVzZSB0eXBlIG5hcnJvd2luZyBiYXNlZCBvbiB0aGUgcHJvcGVydHkgdHlwZVxuICAgIHN3aXRjaCAocHJvcGVydHkudHlwZSkge1xuICAgICAgICBjYXNlICd0aXRsZSc6XG4gICAgICAgICAgICByZXR1cm4gKChfYSA9IHByb3BlcnR5LnRpdGxlWzBdKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EucGxhaW5fdGV4dCkgfHwgJyc7XG4gICAgICAgIGNhc2UgJ3JpY2hfdGV4dCc6XG4gICAgICAgICAgICByZXR1cm4gKChfYiA9IHByb3BlcnR5LnJpY2hfdGV4dFswXSkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLnBsYWluX3RleHQpIHx8ICcnO1xuICAgICAgICBjYXNlICdzZWxlY3QnOlxuICAgICAgICAgICAgcmV0dXJuICgoX2MgPSBwcm9wZXJ0eS5zZWxlY3QpID09PSBudWxsIHx8IF9jID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYy5uYW1lKSB8fCAnJztcbiAgICAgICAgY2FzZSAnbXVsdGlfc2VsZWN0JzpcbiAgICAgICAgICAgIHJldHVybiBwcm9wZXJ0eS5tdWx0aV9zZWxlY3QubWFwKChpdGVtKSA9PiBpdGVtLm5hbWUpO1xuICAgICAgICBjYXNlICdkYXRlJzpcbiAgICAgICAgICAgIC8vIEhhbmRsZSBib3RoIHNpbmdsZSBkYXRlcyBhbmQgZGF0ZSByYW5nZXNcbiAgICAgICAgICAgIGlmICghcHJvcGVydHkuZGF0ZSlcbiAgICAgICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgICAgICByZXR1cm4gcHJvcGVydHkuZGF0ZS5lbmRcbiAgICAgICAgICAgICAgICA/IGAke3Byb3BlcnR5LmRhdGUuc3RhcnR9IHRvICR7cHJvcGVydHkuZGF0ZS5lbmR9YFxuICAgICAgICAgICAgICAgIDogcHJvcGVydHkuZGF0ZS5zdGFydDtcbiAgICAgICAgY2FzZSAnbnVtYmVyJzpcbiAgICAgICAgICAgIHJldHVybiAoX2QgPSBwcm9wZXJ0eS5udW1iZXIpICE9PSBudWxsICYmIF9kICE9PSB2b2lkIDAgPyBfZCA6IDA7XG4gICAgICAgIGNhc2UgJ2NoZWNrYm94JzpcbiAgICAgICAgICAgIHJldHVybiBwcm9wZXJ0eS5jaGVja2JveDtcbiAgICAgICAgY2FzZSAndXJsJzpcbiAgICAgICAgICAgIHJldHVybiBwcm9wZXJ0eS51cmwgfHwgJyc7XG4gICAgICAgIGNhc2UgJ2VtYWlsJzpcbiAgICAgICAgICAgIHJldHVybiBwcm9wZXJ0eS5lbWFpbCB8fCAnJztcbiAgICAgICAgY2FzZSAncGhvbmVfbnVtYmVyJzpcbiAgICAgICAgICAgIHJldHVybiBwcm9wZXJ0eS5waG9uZV9udW1iZXIgfHwgJyc7XG4gICAgICAgIGNhc2UgJ2NyZWF0ZWRfdGltZSc6XG4gICAgICAgICAgICByZXR1cm4gcHJvcGVydHkuY3JlYXRlZF90aW1lO1xuICAgICAgICBjYXNlICdjcmVhdGVkX2J5JzpcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgIHJldHVybiBwcm9wZXJ0eS5jcmVhdGVkX2J5Lm5hbWUgfHwgcHJvcGVydHkuY3JlYXRlZF9ieS5pZDtcbiAgICAgICAgY2FzZSAnbGFzdF9lZGl0ZWRfdGltZSc6XG4gICAgICAgICAgICByZXR1cm4gcHJvcGVydHkubGFzdF9lZGl0ZWRfdGltZTtcbiAgICAgICAgY2FzZSAnbGFzdF9lZGl0ZWRfYnknOlxuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgcmV0dXJuIHByb3BlcnR5Lmxhc3RfZWRpdGVkX2J5Lm5hbWUgfHwgcHJvcGVydHkubGFzdF9lZGl0ZWRfYnkuaWQ7XG4gICAgICAgIGNhc2UgJ2Zvcm11bGEnOlxuICAgICAgICAgICAgLy8gSGFuZGxlIGRpZmZlcmVudCBmb3JtdWxhIHJlc3VsdCB0eXBlc1xuICAgICAgICAgICAgc3dpdGNoIChwcm9wZXJ0eS5mb3JtdWxhLnR5cGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdzdHJpbmcnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcHJvcGVydHkuZm9ybXVsYS5zdHJpbmcgfHwgJyc7XG4gICAgICAgICAgICAgICAgY2FzZSAnbnVtYmVyJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChfZSA9IHByb3BlcnR5LmZvcm11bGEubnVtYmVyKSAhPT0gbnVsbCAmJiBfZSAhPT0gdm9pZCAwID8gX2UgOiAwO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2Jvb2xlYW4nOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcHJvcGVydHkuZm9ybXVsYS5ib29sZWFuO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2RhdGUnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKChfZiA9IHByb3BlcnR5LmZvcm11bGEuZGF0ZSkgPT09IG51bGwgfHwgX2YgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9mLnN0YXJ0KSB8fCAnJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdyb2xsdXAnOlxuICAgICAgICAgICAgLy8gSGFuZGxlIGRpZmZlcmVudCByb2xsdXAgdHlwZXNcbiAgICAgICAgICAgIHN3aXRjaCAocHJvcGVydHkucm9sbHVwLnR5cGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdudW1iZXInOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKF9nID0gcHJvcGVydHkucm9sbHVwLm51bWJlcikgIT09IG51bGwgJiYgX2cgIT09IHZvaWQgMCA/IF9nIDogMDtcbiAgICAgICAgICAgICAgICBjYXNlICdkYXRlJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICgoX2ggPSBwcm9wZXJ0eS5yb2xsdXAuZGF0ZSkgPT09IG51bGwgfHwgX2ggPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9oLnN0YXJ0KSB8fCAnJztcbiAgICAgICAgICAgICAgICBjYXNlICdhcnJheSc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwcm9wZXJ0eS5yb2xsdXAuYXJyYXkubWFwKChpdGVtKSA9PiBleHRyYWN0UHJvcGVydHlWYWx1ZShpdGVtKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnZmlsZXMnOlxuICAgICAgICAgICAgcmV0dXJuIHByb3BlcnR5LmZpbGVzLm1hcCgoZmlsZSkgPT4gXG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICBmaWxlLnR5cGUgPT09ICdleHRlcm5hbCcgPyBmaWxlLmV4dGVybmFsLnVybCA6IGZpbGUuZmlsZS51cmwpO1xuICAgICAgICBjYXNlICdwZW9wbGUnOlxuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgcmV0dXJuIHByb3BlcnR5LnBlb3BsZS5tYXAoKHBlcnNvbikgPT4gcGVyc29uLm5hbWUgfHwgcGVyc29uLmlkKTtcbiAgICAgICAgY2FzZSAncmVsYXRpb24nOlxuICAgICAgICAgICAgcmV0dXJuIHByb3BlcnR5LnJlbGF0aW9uLm1hcCgoaXRlbSkgPT4gaXRlbS5pZCk7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG59XG5leHBvcnRzLmV4dHJhY3RQcm9wZXJ0eVZhbHVlID0gZXh0cmFjdFByb3BlcnR5VmFsdWU7XG4vLyBIZWxwZXIgdG8gZm9ybWF0IHZhbHVlcyBmb3IgWUFNTCBmcm9udG1hdHRlclxuZnVuY3Rpb24gZm9ybWF0WWFtbFZhbHVlKHZhbHVlKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBgWyR7dmFsdWUubWFwKCh2KSA9PiBgXCIke3Z9XCJgKS5qb2luKCcsICcpfV1gO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gYFwiJHt2YWx1ZS5yZXBsYWNlKC9cIi9nLCAnXFxcXFwiJyl9XCJgO1xuICAgIH1cbiAgICByZXR1cm4gU3RyaW5nKHZhbHVlKTtcbn1cbmV4cG9ydHMuZm9ybWF0WWFtbFZhbHVlID0gZm9ybWF0WWFtbFZhbHVlO1xuZnVuY3Rpb24gZm9ybWF0RnJvbnRtYXR0ZXIob2JqKSB7XG4gICAgcmV0dXJuIGAtLS1cXG4ke09iamVjdC5lbnRyaWVzKG9iailcbiAgICAgICAgLm1hcCgoW2tleSwgdmFsdWVdKSA9PiBgJHtrZXl9OiAke2Zvcm1hdFlhbWxWYWx1ZSh2YWx1ZSl9YClcbiAgICAgICAgLmpvaW4oJ1xcbicpfVxcbi0tLVxcblxcbmA7XG59XG5leHBvcnRzLmZvcm1hdEZyb250bWF0dGVyID0gZm9ybWF0RnJvbnRtYXR0ZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1oZWxwZXJzLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/notion-to-md/build/plugins/renderer/mdx/helpers.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/notion-to-md/build/plugins/renderer/mdx/index.js":
/*!***********************************************************************!*\
  !*** ./node_modules/notion-to-md/build/plugins/renderer/mdx/index.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MDXRenderer = void 0;\nconst index_1 = __webpack_require__(/*! ../../../core/renderer/index */ \"(rsc)/./node_modules/notion-to-md/build/core/renderer/index.js\");\nconst blocks_1 = __webpack_require__(/*! ./transformers/blocks */ \"(rsc)/./node_modules/notion-to-md/build/plugins/renderer/mdx/transformers/blocks.js\");\nconst annotations_1 = __webpack_require__(/*! ./transformers/annotations */ \"(rsc)/./node_modules/notion-to-md/build/plugins/renderer/mdx/transformers/annotations.js\");\nconst resolvers_1 = __webpack_require__(/*! ./resolvers */ \"(rsc)/./node_modules/notion-to-md/build/plugins/renderer/mdx/resolvers.js\");\nclass MDXRenderer extends index_1.BaseRendererPlugin {\n    constructor(config = {}) {\n        super();\n        this.template = `{{{frontmatter}}}{{{imports}}}{{{content}}}`;\n        // Store configuration in metadata\n        this.addMetadata('config', config);\n        // Initialize transformers\n        this.createBlockTransformers(blocks_1.blockTransformers);\n        this.createAnnotationTransformers(annotations_1.annotationTransformers);\n        // Initialize resolvers\n        const resolvers = (0, resolvers_1.createDefaultVariableResolvers)();\n        Object.entries(resolvers).forEach(([name, resolver]) => {\n            this.addVariable(name, resolver);\n        });\n    }\n}\nexports.MDXRenderer = MDXRenderer;\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm90aW9uLXRvLW1kL2J1aWxkL3BsdWdpbnMvcmVuZGVyZXIvbWR4L2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG1CQUFtQjtBQUNuQixnQkFBZ0IsbUJBQU8sQ0FBQyxvR0FBOEI7QUFDdEQsaUJBQWlCLG1CQUFPLENBQUMsa0hBQXVCO0FBQ2hELHNCQUFzQixtQkFBTyxDQUFDLDRIQUE0QjtBQUMxRCxvQkFBb0IsbUJBQU8sQ0FBQyw4RkFBYTtBQUN6QztBQUNBLDJCQUEyQjtBQUMzQjtBQUNBLDRCQUE0QixpQkFBaUIsYUFBYSxVQUFVO0FBQ3BFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsbUJBQW1CO0FBQ25CIiwic291cmNlcyI6WyIvVXNlcnMvbGJyZXZvb3J0L0Rlc2t0b3AvcHJvamVjdHMvcGVyc29uYWwtd2Vic2l0ZS9ub2RlX21vZHVsZXMvbm90aW9uLXRvLW1kL2J1aWxkL3BsdWdpbnMvcmVuZGVyZXIvbWR4L2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5NRFhSZW5kZXJlciA9IHZvaWQgMDtcbmNvbnN0IGluZGV4XzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vY29yZS9yZW5kZXJlci9pbmRleFwiKTtcbmNvbnN0IGJsb2Nrc18xID0gcmVxdWlyZShcIi4vdHJhbnNmb3JtZXJzL2Jsb2Nrc1wiKTtcbmNvbnN0IGFubm90YXRpb25zXzEgPSByZXF1aXJlKFwiLi90cmFuc2Zvcm1lcnMvYW5ub3RhdGlvbnNcIik7XG5jb25zdCByZXNvbHZlcnNfMSA9IHJlcXVpcmUoXCIuL3Jlc29sdmVyc1wiKTtcbmNsYXNzIE1EWFJlbmRlcmVyIGV4dGVuZHMgaW5kZXhfMS5CYXNlUmVuZGVyZXJQbHVnaW4ge1xuICAgIGNvbnN0cnVjdG9yKGNvbmZpZyA9IHt9KSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMudGVtcGxhdGUgPSBge3t7ZnJvbnRtYXR0ZXJ9fX17e3tpbXBvcnRzfX19e3t7Y29udGVudH19fWA7XG4gICAgICAgIC8vIFN0b3JlIGNvbmZpZ3VyYXRpb24gaW4gbWV0YWRhdGFcbiAgICAgICAgdGhpcy5hZGRNZXRhZGF0YSgnY29uZmlnJywgY29uZmlnKTtcbiAgICAgICAgLy8gSW5pdGlhbGl6ZSB0cmFuc2Zvcm1lcnNcbiAgICAgICAgdGhpcy5jcmVhdGVCbG9ja1RyYW5zZm9ybWVycyhibG9ja3NfMS5ibG9ja1RyYW5zZm9ybWVycyk7XG4gICAgICAgIHRoaXMuY3JlYXRlQW5ub3RhdGlvblRyYW5zZm9ybWVycyhhbm5vdGF0aW9uc18xLmFubm90YXRpb25UcmFuc2Zvcm1lcnMpO1xuICAgICAgICAvLyBJbml0aWFsaXplIHJlc29sdmVyc1xuICAgICAgICBjb25zdCByZXNvbHZlcnMgPSAoMCwgcmVzb2x2ZXJzXzEuY3JlYXRlRGVmYXVsdFZhcmlhYmxlUmVzb2x2ZXJzKSgpO1xuICAgICAgICBPYmplY3QuZW50cmllcyhyZXNvbHZlcnMpLmZvckVhY2goKFtuYW1lLCByZXNvbHZlcl0pID0+IHtcbiAgICAgICAgICAgIHRoaXMuYWRkVmFyaWFibGUobmFtZSwgcmVzb2x2ZXIpO1xuICAgICAgICB9KTtcbiAgICB9XG59XG5leHBvcnRzLk1EWFJlbmRlcmVyID0gTURYUmVuZGVyZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/notion-to-md/build/plugins/renderer/mdx/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/notion-to-md/build/plugins/renderer/mdx/resolvers.js":
/*!***************************************************************************!*\
  !*** ./node_modules/notion-to-md/build/plugins/renderer/mdx/resolvers.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.createDefaultVariableResolvers = exports.getDefaultFrontmatterConfig = exports.createImportsResolver = exports.createContentResolver = exports.createFrontmatterResolver = void 0;\nconst helpers_1 = __webpack_require__(/*! ./helpers */ \"(rsc)/./node_modules/notion-to-md/build/plugins/renderer/mdx/helpers.js\");\n/**\n * Resolver for frontmatter variable that handles configuration-based\n * property extraction and formatting\n */\n/**\n * Creates a resolver for frontmatter that handles both boolean and detailed configuration\n */\nconst createFrontmatterResolver = () => {\n    return async (_, context) => {\n        var _a, _b, _c;\n        const frontmatterOption = (_a = context.metadata.config) === null || _a === void 0 ? void 0 : _a.frontmatter;\n        // Early return if disabled\n        if (!frontmatterOption) {\n            return '';\n        }\n        const properties = context.pageProperties;\n        if (!properties || Object.keys(properties).length === 0) {\n            return '';\n        }\n        // Use provided config or default if just true\n        const config = frontmatterOption === true\n            ? getDefaultFrontmatterConfig()\n            : frontmatterOption;\n        const frontmatterObj = {};\n        // Process properties according to configuration\n        for (const [key, value] of Object.entries(properties)) {\n            // Skip if explicitly excluded\n            if ((_b = config.exclude) === null || _b === void 0 ? void 0 : _b.includes(key)) {\n                continue;\n            }\n            // Skip if not in include list when specified\n            if (config.include && !config.include.includes(key)) {\n                continue;\n            }\n            // Apply property name mapping or use original\n            const propertyName = ((_c = config.rename) === null || _c === void 0 ? void 0 : _c[key]) || key;\n            frontmatterObj[propertyName] = (0, helpers_1.extractPropertyValue)(value);\n        }\n        // Apply any provided defaults\n        if (config.defaults) {\n            for (const [key, value] of Object.entries(config.defaults)) {\n                if (!(key in frontmatterObj)) {\n                    frontmatterObj[key] = value;\n                }\n            }\n        }\n        return (0, helpers_1.formatFrontmatter)(frontmatterObj);\n    };\n};\nexports.createFrontmatterResolver = createFrontmatterResolver;\n/**\n * Default resolver for content variable that joins collected content with newlines\n */\nconst createContentResolver = () => {\n    return async (_, context) => {\n        const collected = context.variableData.get('content') || [];\n        return collected.filter((line) => line.trim()).join('\\n');\n    };\n};\nexports.createContentResolver = createContentResolver;\n/**\n * Resolver for imports variable that handles deduplication and formatting\n */\nconst createImportsResolver = () => {\n    return async (_, context) => {\n        const imports = context.variableData.get('imports') || [];\n        // Deduplicate imports while preserving order\n        const uniqueImports = [...new Set(imports)];\n        return uniqueImports.join('\\n');\n    };\n};\nexports.createImportsResolver = createImportsResolver;\nfunction getDefaultFrontmatterConfig() {\n    return {\n        // No include = include all properties\n        include: undefined,\n        // No exclude = exclude none\n        exclude: undefined,\n        // No rename mappings\n        rename: undefined,\n        // No default values\n        defaults: undefined,\n    };\n}\nexports.getDefaultFrontmatterConfig = getDefaultFrontmatterConfig;\n/**\n * Creates a collection of default resolvers used by the MD renderer\n */\nconst createDefaultVariableResolvers = () => ({\n    frontmatter: (0, exports.createFrontmatterResolver)(),\n    content: (0, exports.createContentResolver)(),\n    imports: (0, exports.createImportsResolver)(),\n});\nexports.createDefaultVariableResolvers = createDefaultVariableResolvers;\n//# sourceMappingURL=resolvers.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm90aW9uLXRvLW1kL2J1aWxkL3BsdWdpbnMvcmVuZGVyZXIvbWR4L3Jlc29sdmVycy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxzQ0FBc0MsR0FBRyxtQ0FBbUMsR0FBRyw2QkFBNkIsR0FBRyw2QkFBNkIsR0FBRyxpQ0FBaUM7QUFDaEwsa0JBQWtCLG1CQUFPLENBQUMsMEZBQVc7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUM7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkI7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNELHNDQUFzQztBQUN0QyIsInNvdXJjZXMiOlsiL1VzZXJzL2xicmV2b29ydC9EZXNrdG9wL3Byb2plY3RzL3BlcnNvbmFsLXdlYnNpdGUvbm9kZV9tb2R1bGVzL25vdGlvbi10by1tZC9idWlsZC9wbHVnaW5zL3JlbmRlcmVyL21keC9yZXNvbHZlcnMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmNyZWF0ZURlZmF1bHRWYXJpYWJsZVJlc29sdmVycyA9IGV4cG9ydHMuZ2V0RGVmYXVsdEZyb250bWF0dGVyQ29uZmlnID0gZXhwb3J0cy5jcmVhdGVJbXBvcnRzUmVzb2x2ZXIgPSBleHBvcnRzLmNyZWF0ZUNvbnRlbnRSZXNvbHZlciA9IGV4cG9ydHMuY3JlYXRlRnJvbnRtYXR0ZXJSZXNvbHZlciA9IHZvaWQgMDtcbmNvbnN0IGhlbHBlcnNfMSA9IHJlcXVpcmUoXCIuL2hlbHBlcnNcIik7XG4vKipcbiAqIFJlc29sdmVyIGZvciBmcm9udG1hdHRlciB2YXJpYWJsZSB0aGF0IGhhbmRsZXMgY29uZmlndXJhdGlvbi1iYXNlZFxuICogcHJvcGVydHkgZXh0cmFjdGlvbiBhbmQgZm9ybWF0dGluZ1xuICovXG4vKipcbiAqIENyZWF0ZXMgYSByZXNvbHZlciBmb3IgZnJvbnRtYXR0ZXIgdGhhdCBoYW5kbGVzIGJvdGggYm9vbGVhbiBhbmQgZGV0YWlsZWQgY29uZmlndXJhdGlvblxuICovXG5jb25zdCBjcmVhdGVGcm9udG1hdHRlclJlc29sdmVyID0gKCkgPT4ge1xuICAgIHJldHVybiBhc3luYyAoXywgY29udGV4dCkgPT4ge1xuICAgICAgICB2YXIgX2EsIF9iLCBfYztcbiAgICAgICAgY29uc3QgZnJvbnRtYXR0ZXJPcHRpb24gPSAoX2EgPSBjb250ZXh0Lm1ldGFkYXRhLmNvbmZpZykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmZyb250bWF0dGVyO1xuICAgICAgICAvLyBFYXJseSByZXR1cm4gaWYgZGlzYWJsZWRcbiAgICAgICAgaWYgKCFmcm9udG1hdHRlck9wdGlvbikge1xuICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHByb3BlcnRpZXMgPSBjb250ZXh0LnBhZ2VQcm9wZXJ0aWVzO1xuICAgICAgICBpZiAoIXByb3BlcnRpZXMgfHwgT2JqZWN0LmtleXMocHJvcGVydGllcykubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgIH1cbiAgICAgICAgLy8gVXNlIHByb3ZpZGVkIGNvbmZpZyBvciBkZWZhdWx0IGlmIGp1c3QgdHJ1ZVxuICAgICAgICBjb25zdCBjb25maWcgPSBmcm9udG1hdHRlck9wdGlvbiA9PT0gdHJ1ZVxuICAgICAgICAgICAgPyBnZXREZWZhdWx0RnJvbnRtYXR0ZXJDb25maWcoKVxuICAgICAgICAgICAgOiBmcm9udG1hdHRlck9wdGlvbjtcbiAgICAgICAgY29uc3QgZnJvbnRtYXR0ZXJPYmogPSB7fTtcbiAgICAgICAgLy8gUHJvY2VzcyBwcm9wZXJ0aWVzIGFjY29yZGluZyB0byBjb25maWd1cmF0aW9uXG4gICAgICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKHByb3BlcnRpZXMpKSB7XG4gICAgICAgICAgICAvLyBTa2lwIGlmIGV4cGxpY2l0bHkgZXhjbHVkZWRcbiAgICAgICAgICAgIGlmICgoX2IgPSBjb25maWcuZXhjbHVkZSkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmluY2x1ZGVzKGtleSkpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFNraXAgaWYgbm90IGluIGluY2x1ZGUgbGlzdCB3aGVuIHNwZWNpZmllZFxuICAgICAgICAgICAgaWYgKGNvbmZpZy5pbmNsdWRlICYmICFjb25maWcuaW5jbHVkZS5pbmNsdWRlcyhrZXkpKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBBcHBseSBwcm9wZXJ0eSBuYW1lIG1hcHBpbmcgb3IgdXNlIG9yaWdpbmFsXG4gICAgICAgICAgICBjb25zdCBwcm9wZXJ0eU5hbWUgPSAoKF9jID0gY29uZmlnLnJlbmFtZSkgPT09IG51bGwgfHwgX2MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jW2tleV0pIHx8IGtleTtcbiAgICAgICAgICAgIGZyb250bWF0dGVyT2JqW3Byb3BlcnR5TmFtZV0gPSAoMCwgaGVscGVyc18xLmV4dHJhY3RQcm9wZXJ0eVZhbHVlKSh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQXBwbHkgYW55IHByb3ZpZGVkIGRlZmF1bHRzXG4gICAgICAgIGlmIChjb25maWcuZGVmYXVsdHMpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKGNvbmZpZy5kZWZhdWx0cykpIHtcbiAgICAgICAgICAgICAgICBpZiAoIShrZXkgaW4gZnJvbnRtYXR0ZXJPYmopKSB7XG4gICAgICAgICAgICAgICAgICAgIGZyb250bWF0dGVyT2JqW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICgwLCBoZWxwZXJzXzEuZm9ybWF0RnJvbnRtYXR0ZXIpKGZyb250bWF0dGVyT2JqKTtcbiAgICB9O1xufTtcbmV4cG9ydHMuY3JlYXRlRnJvbnRtYXR0ZXJSZXNvbHZlciA9IGNyZWF0ZUZyb250bWF0dGVyUmVzb2x2ZXI7XG4vKipcbiAqIERlZmF1bHQgcmVzb2x2ZXIgZm9yIGNvbnRlbnQgdmFyaWFibGUgdGhhdCBqb2lucyBjb2xsZWN0ZWQgY29udGVudCB3aXRoIG5ld2xpbmVzXG4gKi9cbmNvbnN0IGNyZWF0ZUNvbnRlbnRSZXNvbHZlciA9ICgpID0+IHtcbiAgICByZXR1cm4gYXN5bmMgKF8sIGNvbnRleHQpID0+IHtcbiAgICAgICAgY29uc3QgY29sbGVjdGVkID0gY29udGV4dC52YXJpYWJsZURhdGEuZ2V0KCdjb250ZW50JykgfHwgW107XG4gICAgICAgIHJldHVybiBjb2xsZWN0ZWQuZmlsdGVyKChsaW5lKSA9PiBsaW5lLnRyaW0oKSkuam9pbignXFxuJyk7XG4gICAgfTtcbn07XG5leHBvcnRzLmNyZWF0ZUNvbnRlbnRSZXNvbHZlciA9IGNyZWF0ZUNvbnRlbnRSZXNvbHZlcjtcbi8qKlxuICogUmVzb2x2ZXIgZm9yIGltcG9ydHMgdmFyaWFibGUgdGhhdCBoYW5kbGVzIGRlZHVwbGljYXRpb24gYW5kIGZvcm1hdHRpbmdcbiAqL1xuY29uc3QgY3JlYXRlSW1wb3J0c1Jlc29sdmVyID0gKCkgPT4ge1xuICAgIHJldHVybiBhc3luYyAoXywgY29udGV4dCkgPT4ge1xuICAgICAgICBjb25zdCBpbXBvcnRzID0gY29udGV4dC52YXJpYWJsZURhdGEuZ2V0KCdpbXBvcnRzJykgfHwgW107XG4gICAgICAgIC8vIERlZHVwbGljYXRlIGltcG9ydHMgd2hpbGUgcHJlc2VydmluZyBvcmRlclxuICAgICAgICBjb25zdCB1bmlxdWVJbXBvcnRzID0gWy4uLm5ldyBTZXQoaW1wb3J0cyldO1xuICAgICAgICByZXR1cm4gdW5pcXVlSW1wb3J0cy5qb2luKCdcXG4nKTtcbiAgICB9O1xufTtcbmV4cG9ydHMuY3JlYXRlSW1wb3J0c1Jlc29sdmVyID0gY3JlYXRlSW1wb3J0c1Jlc29sdmVyO1xuZnVuY3Rpb24gZ2V0RGVmYXVsdEZyb250bWF0dGVyQ29uZmlnKCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIC8vIE5vIGluY2x1ZGUgPSBpbmNsdWRlIGFsbCBwcm9wZXJ0aWVzXG4gICAgICAgIGluY2x1ZGU6IHVuZGVmaW5lZCxcbiAgICAgICAgLy8gTm8gZXhjbHVkZSA9IGV4Y2x1ZGUgbm9uZVxuICAgICAgICBleGNsdWRlOiB1bmRlZmluZWQsXG4gICAgICAgIC8vIE5vIHJlbmFtZSBtYXBwaW5nc1xuICAgICAgICByZW5hbWU6IHVuZGVmaW5lZCxcbiAgICAgICAgLy8gTm8gZGVmYXVsdCB2YWx1ZXNcbiAgICAgICAgZGVmYXVsdHM6IHVuZGVmaW5lZCxcbiAgICB9O1xufVxuZXhwb3J0cy5nZXREZWZhdWx0RnJvbnRtYXR0ZXJDb25maWcgPSBnZXREZWZhdWx0RnJvbnRtYXR0ZXJDb25maWc7XG4vKipcbiAqIENyZWF0ZXMgYSBjb2xsZWN0aW9uIG9mIGRlZmF1bHQgcmVzb2x2ZXJzIHVzZWQgYnkgdGhlIE1EIHJlbmRlcmVyXG4gKi9cbmNvbnN0IGNyZWF0ZURlZmF1bHRWYXJpYWJsZVJlc29sdmVycyA9ICgpID0+ICh7XG4gICAgZnJvbnRtYXR0ZXI6ICgwLCBleHBvcnRzLmNyZWF0ZUZyb250bWF0dGVyUmVzb2x2ZXIpKCksXG4gICAgY29udGVudDogKDAsIGV4cG9ydHMuY3JlYXRlQ29udGVudFJlc29sdmVyKSgpLFxuICAgIGltcG9ydHM6ICgwLCBleHBvcnRzLmNyZWF0ZUltcG9ydHNSZXNvbHZlcikoKSxcbn0pO1xuZXhwb3J0cy5jcmVhdGVEZWZhdWx0VmFyaWFibGVSZXNvbHZlcnMgPSBjcmVhdGVEZWZhdWx0VmFyaWFibGVSZXNvbHZlcnM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZXNvbHZlcnMuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/notion-to-md/build/plugins/renderer/mdx/resolvers.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/notion-to-md/build/plugins/renderer/mdx/transformers/annotations.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/notion-to-md/build/plugins/renderer/mdx/transformers/annotations.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.annotationTransformers = void 0;\nexports.annotationTransformers = {\n    bold: {\n        transform: async ({ text, metadata }) => !(metadata === null || metadata === void 0 ? void 0 : metadata.html) ? `**${text}**` : `<strong>${text}</strong>`,\n    },\n    italic: {\n        transform: async ({ text, metadata }) => !(metadata === null || metadata === void 0 ? void 0 : metadata.html) ? `*${text}*` : `<i>${text}</i>`,\n    },\n    strikethrough: {\n        transform: async ({ text, metadata }) => !(metadata === null || metadata === void 0 ? void 0 : metadata.html) ? `~~${text}~~` : `<strike>${text}</strike>`,\n    },\n    code: {\n        transform: async ({ text, metadata }) => (metadata === null || metadata === void 0 ? void 0 : metadata.html) ? `<code>${text}</code>` : `\\`${text}\\``,\n    },\n    underline: {\n        transform: async ({ text }) => `<u>${text}</u>`,\n    },\n    link: {\n        transform: async ({ text, link, metadata }) => {\n            if (!(link === null || link === void 0 ? void 0 : link.url))\n                return text;\n            return !(metadata === null || metadata === void 0 ? void 0 : metadata.html)\n                ? `[${text}](${link.url})`\n                : `<a href=\"${link.url}\">${text}</a>`;\n        },\n    },\n    equation: {\n        transform: async ({ text, metadata }) => {\n            if (!(metadata === null || metadata === void 0 ? void 0 : metadata.html))\n                return `$${text}$`;\n            return `<code>${text}</code>`;\n        },\n    },\n};\n//# sourceMappingURL=annotations.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm90aW9uLXRvLW1kL2J1aWxkL3BsdWdpbnMvcmVuZGVyZXIvbWR4L3RyYW5zZm9ybWVycy9hbm5vdGF0aW9ucy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCw4QkFBOEI7QUFDOUIsOEJBQThCO0FBQzlCO0FBQ0EsNEJBQTRCLGdCQUFnQixpRkFBaUYsS0FBSyxpQkFBaUIsS0FBSztBQUN4SixLQUFLO0FBQ0w7QUFDQSw0QkFBNEIsZ0JBQWdCLGdGQUFnRixLQUFLLFdBQVcsS0FBSztBQUNqSixLQUFLO0FBQ0w7QUFDQSw0QkFBNEIsZ0JBQWdCLGlGQUFpRixLQUFLLGlCQUFpQixLQUFLO0FBQ3hKLEtBQUs7QUFDTDtBQUNBLDRCQUE0QixnQkFBZ0Isb0ZBQW9GLEtBQUssZ0JBQWdCLEtBQUs7QUFDMUosS0FBSztBQUNMO0FBQ0EsNEJBQTRCLE1BQU0sV0FBVyxLQUFLO0FBQ2xELEtBQUs7QUFDTDtBQUNBLDRCQUE0QixzQkFBc0I7QUFDbEQ7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLEtBQUssSUFBSSxTQUFTO0FBQ3hDLDhCQUE4QixTQUFTLElBQUksS0FBSztBQUNoRCxTQUFTO0FBQ1QsS0FBSztBQUNMO0FBQ0EsNEJBQTRCLGdCQUFnQjtBQUM1QztBQUNBLDJCQUEyQixLQUFLO0FBQ2hDLDRCQUE0QixLQUFLO0FBQ2pDLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL2xicmV2b29ydC9EZXNrdG9wL3Byb2plY3RzL3BlcnNvbmFsLXdlYnNpdGUvbm9kZV9tb2R1bGVzL25vdGlvbi10by1tZC9idWlsZC9wbHVnaW5zL3JlbmRlcmVyL21keC90cmFuc2Zvcm1lcnMvYW5ub3RhdGlvbnMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmFubm90YXRpb25UcmFuc2Zvcm1lcnMgPSB2b2lkIDA7XG5leHBvcnRzLmFubm90YXRpb25UcmFuc2Zvcm1lcnMgPSB7XG4gICAgYm9sZDoge1xuICAgICAgICB0cmFuc2Zvcm06IGFzeW5jICh7IHRleHQsIG1ldGFkYXRhIH0pID0+ICEobWV0YWRhdGEgPT09IG51bGwgfHwgbWV0YWRhdGEgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG1ldGFkYXRhLmh0bWwpID8gYCoqJHt0ZXh0fSoqYCA6IGA8c3Ryb25nPiR7dGV4dH08L3N0cm9uZz5gLFxuICAgIH0sXG4gICAgaXRhbGljOiB7XG4gICAgICAgIHRyYW5zZm9ybTogYXN5bmMgKHsgdGV4dCwgbWV0YWRhdGEgfSkgPT4gIShtZXRhZGF0YSA9PT0gbnVsbCB8fCBtZXRhZGF0YSA9PT0gdm9pZCAwID8gdm9pZCAwIDogbWV0YWRhdGEuaHRtbCkgPyBgKiR7dGV4dH0qYCA6IGA8aT4ke3RleHR9PC9pPmAsXG4gICAgfSxcbiAgICBzdHJpa2V0aHJvdWdoOiB7XG4gICAgICAgIHRyYW5zZm9ybTogYXN5bmMgKHsgdGV4dCwgbWV0YWRhdGEgfSkgPT4gIShtZXRhZGF0YSA9PT0gbnVsbCB8fCBtZXRhZGF0YSA9PT0gdm9pZCAwID8gdm9pZCAwIDogbWV0YWRhdGEuaHRtbCkgPyBgfn4ke3RleHR9fn5gIDogYDxzdHJpa2U+JHt0ZXh0fTwvc3RyaWtlPmAsXG4gICAgfSxcbiAgICBjb2RlOiB7XG4gICAgICAgIHRyYW5zZm9ybTogYXN5bmMgKHsgdGV4dCwgbWV0YWRhdGEgfSkgPT4gKG1ldGFkYXRhID09PSBudWxsIHx8IG1ldGFkYXRhID09PSB2b2lkIDAgPyB2b2lkIDAgOiBtZXRhZGF0YS5odG1sKSA/IGA8Y29kZT4ke3RleHR9PC9jb2RlPmAgOiBgXFxgJHt0ZXh0fVxcYGAsXG4gICAgfSxcbiAgICB1bmRlcmxpbmU6IHtcbiAgICAgICAgdHJhbnNmb3JtOiBhc3luYyAoeyB0ZXh0IH0pID0+IGA8dT4ke3RleHR9PC91PmAsXG4gICAgfSxcbiAgICBsaW5rOiB7XG4gICAgICAgIHRyYW5zZm9ybTogYXN5bmMgKHsgdGV4dCwgbGluaywgbWV0YWRhdGEgfSkgPT4ge1xuICAgICAgICAgICAgaWYgKCEobGluayA9PT0gbnVsbCB8fCBsaW5rID09PSB2b2lkIDAgPyB2b2lkIDAgOiBsaW5rLnVybCkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRleHQ7XG4gICAgICAgICAgICByZXR1cm4gIShtZXRhZGF0YSA9PT0gbnVsbCB8fCBtZXRhZGF0YSA9PT0gdm9pZCAwID8gdm9pZCAwIDogbWV0YWRhdGEuaHRtbClcbiAgICAgICAgICAgICAgICA/IGBbJHt0ZXh0fV0oJHtsaW5rLnVybH0pYFxuICAgICAgICAgICAgICAgIDogYDxhIGhyZWY9XCIke2xpbmsudXJsfVwiPiR7dGV4dH08L2E+YDtcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIGVxdWF0aW9uOiB7XG4gICAgICAgIHRyYW5zZm9ybTogYXN5bmMgKHsgdGV4dCwgbWV0YWRhdGEgfSkgPT4ge1xuICAgICAgICAgICAgaWYgKCEobWV0YWRhdGEgPT09IG51bGwgfHwgbWV0YWRhdGEgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG1ldGFkYXRhLmh0bWwpKVxuICAgICAgICAgICAgICAgIHJldHVybiBgJCR7dGV4dH0kYDtcbiAgICAgICAgICAgIHJldHVybiBgPGNvZGU+JHt0ZXh0fTwvY29kZT5gO1xuICAgICAgICB9LFxuICAgIH0sXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YW5ub3RhdGlvbnMuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/notion-to-md/build/plugins/renderer/mdx/transformers/annotations.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/notion-to-md/build/plugins/renderer/mdx/transformers/blocks.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/notion-to-md/build/plugins/renderer/mdx/transformers/blocks.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.blockTransformers = void 0;\nconst INDENT = '    '; // 4 whitespace = tab space (keeping it consistent)\nexports.blockTransformers = {\n    paragraph: {\n        transform: async ({ block, utils }) => {\n            //@ts-ignore Just process this block's content\n            const text = await utils.processRichText(block.paragraph.rich_text);\n            // If block has no content, return empty string\n            if (!text)\n                return '';\n            //@ts-ignore Add a newline only for top-level paragraphs\n            const needsNewline = block.parent.type === 'page_id';\n            return text + (needsNewline ? '\\n' : '');\n        },\n    },\n    heading_1: {\n        transform: async ({ block, utils }) => {\n            var _a;\n            // Get the heading text content\n            // @ts-ignore\n            const headingBlock = block.heading_1;\n            const isToggle = headingBlock.is_toggleable;\n            // since markdown doesn't get renderer in HTML, on toggle enabled\n            // we parse annotations as HTML\n            const text = await utils.processRichText(headingBlock.rich_text, {\n                html: isToggle,\n            });\n            // For regular headings, return simple markdown\n            if (!isToggle) {\n                return `# ${text}\\n\\n`;\n            }\n            // For toggleable headings, we process children directly\n            // This ensures proper content building from bottom up\n            const childrenContent = ((_a = block.children) === null || _a === void 0 ? void 0 : _a.length)\n                ? await Promise.all(block.children.map((child) => utils.processBlock(child)))\n                : [];\n            // Build the complete toggle structure with the heading\n            // we need to add a newline after the summary tag for the markdown to render\n            // cant' do the same for content inside summary tag since it adds a newline\n            // and the toggle looks ugly\n            return `<details>\n  <summary>\n  <h1>${text}</h1>\n  </summary>\n\n  ${childrenContent.join('\\n')}\n\n</details>\\n`;\n        },\n    },\n    heading_2: {\n        transform: async ({ block, utils }) => {\n            var _a;\n            // Process heading content\n            // @ts-ignore\n            const headingBlock = block.heading_2;\n            const isToggle = headingBlock.is_toggleable;\n            // since markdown doesn't get renderer in HTML, on toggle enabled\n            // we parse annotations as HTML\n            const text = await utils.processRichText(headingBlock.rich_text, {\n                html: isToggle,\n            });\n            // Regular heading case\n            if (!isToggle) {\n                return `## ${text}\\n\\n`;\n            }\n            // Handle toggleable heading with children\n            const childrenContent = ((_a = block.children) === null || _a === void 0 ? void 0 : _a.length)\n                ? await Promise.all(block.children.map((child) => utils.processBlock(child)))\n                : [];\n            // Create toggle structure with h2\n            return `<details>\n  <summary>\n  <h2>${text}</h2>\n  </summary>\n\n  ${childrenContent.join('\\n')}\n\n</details>\\n`;\n        },\n    },\n    heading_3: {\n        transform: async ({ block, utils }) => {\n            var _a;\n            // Get heading content\n            // @ts-ignore\n            const headingBlock = block.heading_3;\n            const isToggle = headingBlock.is_toggleable;\n            // since markdown doesn't get renderer in HTML, on toggle enabled\n            // we parse annotations as HTML\n            const text = await utils.processRichText(headingBlock.rich_text, {\n                html: isToggle,\n            });\n            // Simple heading case\n            if (!isToggle) {\n                return `### ${text}\\n\\n`;\n            }\n            // Process children for toggleable heading\n            const childrenContent = ((_a = block.children) === null || _a === void 0 ? void 0 : _a.length)\n                ? await Promise.all(block.children.map((child) => utils.processBlock(child)))\n                : [];\n            // Build toggle with h3\n            return `<details>\n  <summary>\n  <h3>${text}</h3>\n  </summary>\n\n  ${childrenContent.join('\\n')}\n\n</details>\\n`;\n        },\n    },\n    bulleted_list_item: {\n        transform: async ({ block, utils, metadata = {} }) => {\n            var _a;\n            // First, handle this block's own content\n            const text = await utils.processRichText(\n            // @ts-ignore\n            block.bulleted_list_item.rich_text);\n            const currentLevel = metadata.listLevel || 0;\n            const indent = INDENT.repeat(currentLevel);\n            // If no children, just return formatted content\n            if (!((_a = block.children) === null || _a === void 0 ? void 0 : _a.length)) {\n                return `${indent}- ${text}`;\n            }\n            // For blocks with children, we'll recursively handle them\n            const childMetadata = {\n                ...metadata,\n                listLevel: currentLevel + 1, // can be anything as per your use case\n            };\n            // Process each child block directly through processBlock\n            const childrenContent = await Promise.all(block.children.map((childBlock) => utils.processBlock(childBlock, childMetadata)));\n            // Combine everything with proper formatting\n            return `${indent}- ${text}\\n${childrenContent.join('\\n')}\\n`;\n        },\n    },\n    numbered_list_item: {\n        transform: async ({ block, utils, metadata = {} }) => {\n            var _a;\n            // Get the current nesting level\n            const currentLevel = metadata.listLevel || 0;\n            // The parent passes down the current number to its children\n            const currentNumber = metadata.currentNumber || 1;\n            // Create indentation based on level\n            const indent = INDENT.repeat(currentLevel);\n            // Process the item's text content\n            const text = await utils.processRichText(\n            // @ts-ignore\n            block.numbered_list_item.rich_text);\n            // Format this item with proper number\n            const formattedItem = `${indent}${currentNumber}. ${text}`;\n            // If no children, just return this item\n            if (!((_a = block.children) === null || _a === void 0 ? void 0 : _a.length)) {\n                return formattedItem;\n            }\n            // For items with children, process each child sequentially\n            // Each child starts with number 1 at its level\n            const childrenContent = [];\n            for (let i = 0; i < block.children.length; i++) {\n                const childContent = await utils.processBlock(block.children[i], {\n                    ...metadata,\n                    listLevel: currentLevel + 1,\n                    currentNumber: i + 1, // Pass sequential numbers to siblings\n                });\n                childrenContent.push(childContent);\n            }\n            // Combine this item with its children\n            return `${formattedItem}\\n${childrenContent.join('\\n')}\\n`;\n        },\n    },\n    to_do: {\n        transform: async ({ block, utils, metadata = {} }) => {\n            var _a;\n            // Get current nesting level for indentation\n            const currentLevel = metadata.listLevel || 0;\n            const indent = INDENT.repeat(currentLevel);\n            // @ts-ignore\n            const todoBlock = block.to_do;\n            const text = await utils.processRichText(todoBlock.rich_text);\n            // Determine checkbox state - checked or unchecked\n            const checkbox = todoBlock.checked ? 'x' : ' ';\n            // Format the todo item with proper indentation and checkbox\n            const formattedItem = `${indent}- [${checkbox}] ${text}`;\n            // If this todo item has no children, return just the item\n            if (!((_a = block.children) === null || _a === void 0 ? void 0 : _a.length)) {\n                return formattedItem;\n            }\n            // For todo items with children, process each child\n            // maintaining the proper hierarchy\n            const childrenContent = await Promise.all(block.children.map((child) => utils.processBlock(child, {\n                ...metadata,\n                listLevel: currentLevel + 1,\n            })));\n            return `${formattedItem}\\n${childrenContent.join('\\n')}\\n`;\n        },\n    },\n    callout: {\n        transform: async ({ block, utils }) => {\n            var _a, _b;\n            // @ts-ignore\n            const calloutBlock = block.callout;\n            const text = await utils.processRichText(calloutBlock.rich_text);\n            const icon = ((_a = calloutBlock.icon) === null || _a === void 0 ? void 0 : _a.emoji) || '';\n            // Process any children\n            const childrenContent = ((_b = block.children) === null || _b === void 0 ? void 0 : _b.length)\n                ? await Promise.all(block.children.map((child) => utils.processBlock(child)))\n                : [];\n            // Format the main content\n            const lines = text\n                .split('\\n')\n                .map((line) => `> ${line}`)\n                .join('\\n');\n            // Format children content\n            const formattedChildren = childrenContent.length\n                ? childrenContent\n                    .join('\\n')\n                    .split('\\n')\n                    .map((line) => `> ${line}`)\n                    .join('\\n')\n                : '';\n            return `> ${icon} ${text}${formattedChildren ? `\\n${formattedChildren}` : ''}\\n\\n`;\n        },\n    },\n    toggle: {\n        transform: async ({ block, utils }) => {\n            var _a;\n            // @ts-ignore Process the toggle text\n            const text = await utils.processRichText(block.toggle.rich_text, {\n                html: true, // since markdown doesn't get's renderer\n            });\n            // If no children, return just a basic toggle\n            if (!((_a = block.children) === null || _a === void 0 ? void 0 : _a.length)) {\n                return `<details>\n  <summary>\n  ${text}\n  </summary>\n</details>\\n\\n`;\n            }\n            // Process children and include them in the toggle\n            const childrenContent = await Promise.all(block.children.map((child) => utils.processBlock(child)));\n            return `<details>\n  <summary>\n  ${text}\n  </summary>\n\n  ${childrenContent.join('\\n')}\n\n</details>\\n\\n`;\n        },\n    },\n    code: {\n        transform: async ({ block, utils }) => {\n            // @ts-ignore\n            const text = await utils.processRichText(block.code.rich_text);\n            // @ts-ignore\n            const language = block.code.language || '';\n            return `\\`\\`\\`${language}\\n${text}\\n\\`\\`\\`\\n\\n`;\n        },\n    },\n    quote: {\n        transform: async ({ block, utils }) => {\n            var _a;\n            // @ts-ignore\n            const text = await utils.processRichText(block.quote.rich_text);\n            // Format main quote text\n            const lines = text\n                .split('\\n')\n                .map((line) => `> ${line}`)\n                .join('\\n');\n            // If no children, return just the quote\n            if (!((_a = block.children) === null || _a === void 0 ? void 0 : _a.length)) {\n                return `${lines}\\n\\n`;\n            }\n            // Process and format children as part of the quote\n            const childrenContent = await Promise.all(block.children.map((child) => utils.processBlock(child)));\n            const formattedChildren = childrenContent\n                .join('\\n')\n                .split('\\n')\n                .map((line) => `> ${line}`)\n                .join('\\n');\n            return `${lines}\\n${formattedChildren}\\n\\n`;\n        },\n    },\n    image: {\n        transform: async ({ block, utils }) => {\n            // @ts-ignore\n            const imageBlock = block.image;\n            const url = imageBlock.type === 'external'\n                ? imageBlock.external.url\n                : imageBlock.file.url;\n            const caption = imageBlock.caption.length > 0\n                ? await utils.processRichText(imageBlock.caption)\n                : 'Image';\n            return `![${caption}](${url})\\n\\n`;\n        },\n    },\n    video: {\n        transform: async ({ block, utils }) => {\n            // @ts-ignore\n            const videoBlock = block.video;\n            const url = videoBlock.type === 'external'\n                ? videoBlock.external.url\n                : videoBlock.file.url;\n            const caption = videoBlock.caption.length > 0\n                ? await utils.processRichText(videoBlock.caption)\n                : 'Video';\n            return `[${caption}](${url})\\n\\n`;\n        },\n    },\n    file: {\n        transform: async ({ block, utils }) => {\n            // @ts-ignore\n            const fileBlock = block.file;\n            const url = fileBlock.type === 'external'\n                ? fileBlock.external.url\n                : fileBlock.file.url;\n            const caption = fileBlock.caption.length > 0\n                ? await utils.processRichText(fileBlock.caption)\n                : fileBlock.name || 'File';\n            return `[${caption}](${url})\\n\\n`;\n        },\n    },\n    pdf: {\n        transform: async ({ block, utils }) => {\n            // @ts-ignore\n            const pdfBlock = block.pdf;\n            const url = pdfBlock.type === 'external'\n                ? pdfBlock.external.url\n                : pdfBlock.file.url;\n            const caption = pdfBlock.caption.length > 0\n                ? await utils.processRichText(pdfBlock.caption)\n                : 'PDF Document';\n            return `[${caption}](${url})\\n\\n`;\n        },\n    },\n    bookmark: {\n        transform: async ({ block, utils }) => {\n            // @ts-ignore\n            const bookmarkBlock = block.bookmark;\n            const url = bookmarkBlock.url;\n            const caption = bookmarkBlock.caption.length > 0\n                ? await utils.processRichText(bookmarkBlock.caption)\n                : url;\n            return `[${caption}](${url})\\n\\n`;\n        },\n    },\n    embed: {\n        transform: async ({ block, utils }) => {\n            // @ts-ignore\n            const embedBlock = block.embed;\n            const url = embedBlock.url;\n            const caption = embedBlock.caption.length > 0\n                ? await utils.processRichText(embedBlock.caption)\n                : url;\n            return `[${caption}](${url})\\n\\n`;\n        },\n    },\n    equation: {\n        transform: async ({ block }) => {\n            // @ts-ignore\n            const expression = block.equation.expression;\n            return `\\`\\`\\`math\\n${expression}\\n\\`\\`\\`\\n\\n`;\n        },\n    },\n    divider: {\n        transform: async () => '---\\n\\n',\n    },\n    table: {\n        transform: async ({ block, utils }) => {\n            var _a, _b, _c, _d;\n            if (!((_a = block.children) === null || _a === void 0 ? void 0 : _a.length))\n                return '';\n            // First, process all rows to get their cell content\n            const processedRows = await Promise.all(block.children.map(async (row) => {\n                // Ensure it's a table_row block\n                if (!('table_row' in row))\n                    return [];\n                // Process each cell's rich text content\n                return Promise.all(row.table_row.cells.map(async (cell) => {\n                    const content = await utils.processRichText(cell);\n                    // Ensure empty cells have a space to maintain table structure\n                    return content.trim() || ' ';\n                }));\n            }));\n            // Start building the table\n            let markdown = '';\n            // For column tables (first column is header) or tables with column headers\n            // We'll always create a header row\n            // @ts-ignore\n            if (((_b = block.table) === null || _b === void 0 ? void 0 : _b.has_column_header) || ((_c = block.table) === null || _c === void 0 ? void 0 : _c.has_row_header)) {\n                // Use first row as header\n                const headerRow = processedRows[0];\n                markdown += `| ${headerRow.join(' | ')} |\\n`;\n                // Add separator row with the correct number of columns\n                markdown += `| ${headerRow.map(() => '---').join(' | ')} |\\n`;\n                // Add remaining rows\n                processedRows.slice(1).forEach((row) => {\n                    markdown += `| ${row.join(' | ')} |\\n`;\n                });\n            }\n            else {\n                // For tables without explicit headers, we'll create a generic header\n                // Get the number of columns from the first row\n                const columnCount = ((_d = processedRows[0]) === null || _d === void 0 ? void 0 : _d.length) || 0;\n                // Create generic headers (Column 1, Column 2, etc.)\n                const headers = Array(columnCount)\n                    .fill('')\n                    .map((_, i) => `Column ${i + 1}`);\n                // Add header row\n                markdown += `| ${headers.join(' | ')} |\\n`;\n                // Add separator row\n                markdown += `| ${headers.map(() => '---').join(' | ')} |\\n`;\n                // Add all data rows\n                processedRows.forEach((row) => {\n                    markdown += `| ${row.join(' | ')} |\\n`;\n                });\n            }\n            return markdown + '\\n';\n        },\n    },\n    column_list: {\n        transform: async ({ block, utils }) => {\n            var _a;\n            // Column lists are containers - they need their children processed\n            // but don't add any formatting themselves\n            if (!((_a = block.children) === null || _a === void 0 ? void 0 : _a.length))\n                return '';\n            const columnContent = await Promise.all(block.children.map((child) => utils.processBlock(child)));\n            // Join columns with newlines to keep content separated\n            return columnContent.join('\\n');\n        },\n    },\n    column: {\n        transform: async ({ block, utils }) => {\n            var _a;\n            // Similar to column_list, columns just process their children\n            // The main difference is these are individual columns\n            if (!((_a = block.children) === null || _a === void 0 ? void 0 : _a.length))\n                return '';\n            const content = await Promise.all(block.children.map((child) => utils.processBlock(child)));\n            // Join column content, preserving block separation\n            return content.join('\\n');\n        },\n    },\n    link_to_page: {\n        transform: async ({ block }) => {\n            // @ts-ignore\n            if (block.link_to_page.type === 'page_id') {\n                // @ts-ignore\n                const url = block.link_to_page.url || block.id;\n                return `[🔗 Linked page](${url})\\n\\n`;\n            }\n            return '';\n        },\n    },\n    child_page: {\n        transform: async ({ block }) => {\n            // @ts-ignore\n            const title = block.child_page.title;\n            // @ts-ignore\n            const url = block.child_page.url || block.id;\n            return `[📑 ${title}](${url})\\n\\n`;\n        },\n    },\n    child_database: {\n        transform: async ({ block }) => {\n            // @ts-ignore\n            const title = block.child_database.title | 'child database';\n            return `[${title}](${block.id})\\n\\n`;\n        },\n    },\n    synced_block: {\n        transform: async ({ block, utils }) => {\n            var _a;\n            // Synced blocks are interesting because they reference content\n            // that might appear elsewhere. We process their children directly.\n            if (!((_a = block.children) === null || _a === void 0 ? void 0 : _a.length))\n                return '';\n            // If this is a synced_from block (original content),\n            // process its children normally\n            // @ts-ignore\n            if (!block.synced_block.synced_from) {\n                const content = await Promise.all(block.children.map((child) => utils.processBlock(child)));\n                return content.join('\\n');\n            }\n            // For duplicate blocks (those synced to original),\n            // we could potentially handle them differently\n            // but for markdown output, we'll process them the same way\n            const content = await Promise.all(block.children.map((child) => utils.processBlock(child)));\n            return content.join('\\n');\n        },\n    },\n    table_of_contents: {\n        transform: async () => '',\n    },\n    breadcrumb: {\n        transform: async () => '',\n    },\n};\n//# sourceMappingURL=blocks.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/notion-to-md/build/plugins/renderer/mdx/transformers/blocks.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/notion-to-md/build/types/index.js":
/*!********************************************************!*\
  !*** ./node_modules/notion-to-md/build/types/index.js ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./notion */ \"(rsc)/./node_modules/notion-to-md/build/types/notion.js\"), exports);\n__exportStar(__webpack_require__(/*! ./manifest-manager */ \"(rsc)/./node_modules/notion-to-md/build/types/manifest-manager.js\"), exports);\n__exportStar(__webpack_require__(/*! ./strategy */ \"(rsc)/./node_modules/notion-to-md/build/types/strategy.js\"), exports);\n__exportStar(__webpack_require__(/*! ./module */ \"(rsc)/./node_modules/notion-to-md/build/types/module.js\"), exports);\n__exportStar(__webpack_require__(/*! ./renderer */ \"(rsc)/./node_modules/notion-to-md/build/types/renderer.js\"), exports);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm90aW9uLXRvLW1kL2J1aWxkL3R5cGVzL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLG9DQUFvQztBQUNuRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGFBQWEsbUJBQU8sQ0FBQyx5RUFBVTtBQUMvQixhQUFhLG1CQUFPLENBQUMsNkZBQW9CO0FBQ3pDLGFBQWEsbUJBQU8sQ0FBQyw2RUFBWTtBQUNqQyxhQUFhLG1CQUFPLENBQUMseUVBQVU7QUFDL0IsYUFBYSxtQkFBTyxDQUFDLDZFQUFZO0FBQ2pDIiwic291cmNlcyI6WyIvVXNlcnMvbGJyZXZvb3J0L0Rlc2t0b3AvcHJvamVjdHMvcGVyc29uYWwtd2Vic2l0ZS9ub2RlX21vZHVsZXMvbm90aW9uLXRvLW1kL2J1aWxkL3R5cGVzL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXhwb3J0cywgcCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vbm90aW9uXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9tYW5pZmVzdC1tYW5hZ2VyXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9zdHJhdGVneVwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vbW9kdWxlXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9yZW5kZXJlclwiKSwgZXhwb3J0cyk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/notion-to-md/build/types/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/notion-to-md/build/types/manifest-manager.js":
/*!*******************************************************************!*\
  !*** ./node_modules/notion-to-md/build/types/manifest-manager.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.PageReferenceEntryType = exports.MediaStrategyType = void 0;\nvar MediaStrategyType;\n(function (MediaStrategyType) {\n    MediaStrategyType[\"DOWNLOAD\"] = \"DOWNLOAD\";\n    MediaStrategyType[\"UPLOAD\"] = \"UPLOAD\";\n    MediaStrategyType[\"DIRECT\"] = \"DIRECT\";\n})(MediaStrategyType = exports.MediaStrategyType || (exports.MediaStrategyType = {}));\n/**\n * Page reference handler types\n */\nvar PageReferenceEntryType;\n(function (PageReferenceEntryType) {\n    PageReferenceEntryType[\"PROPERTY\"] = \"PROPERTY\";\n    PageReferenceEntryType[\"MANIFEST\"] = \"MANIFEST\";\n})(PageReferenceEntryType = exports.PageReferenceEntryType || (exports.PageReferenceEntryType = {}));\n//# sourceMappingURL=manifest-manager.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm90aW9uLXRvLW1kL2J1aWxkL3R5cGVzL21hbmlmZXN0LW1hbmFnZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsOEJBQThCLEdBQUcseUJBQXlCO0FBQzFEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLG9EQUFvRCx5QkFBeUIsS0FBSztBQUNuRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsOERBQThELDhCQUE4QixLQUFLO0FBQ2xHIiwic291cmNlcyI6WyIvVXNlcnMvbGJyZXZvb3J0L0Rlc2t0b3AvcHJvamVjdHMvcGVyc29uYWwtd2Vic2l0ZS9ub2RlX21vZHVsZXMvbm90aW9uLXRvLW1kL2J1aWxkL3R5cGVzL21hbmlmZXN0LW1hbmFnZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlBhZ2VSZWZlcmVuY2VFbnRyeVR5cGUgPSBleHBvcnRzLk1lZGlhU3RyYXRlZ3lUeXBlID0gdm9pZCAwO1xudmFyIE1lZGlhU3RyYXRlZ3lUeXBlO1xuKGZ1bmN0aW9uIChNZWRpYVN0cmF0ZWd5VHlwZSkge1xuICAgIE1lZGlhU3RyYXRlZ3lUeXBlW1wiRE9XTkxPQURcIl0gPSBcIkRPV05MT0FEXCI7XG4gICAgTWVkaWFTdHJhdGVneVR5cGVbXCJVUExPQURcIl0gPSBcIlVQTE9BRFwiO1xuICAgIE1lZGlhU3RyYXRlZ3lUeXBlW1wiRElSRUNUXCJdID0gXCJESVJFQ1RcIjtcbn0pKE1lZGlhU3RyYXRlZ3lUeXBlID0gZXhwb3J0cy5NZWRpYVN0cmF0ZWd5VHlwZSB8fCAoZXhwb3J0cy5NZWRpYVN0cmF0ZWd5VHlwZSA9IHt9KSk7XG4vKipcbiAqIFBhZ2UgcmVmZXJlbmNlIGhhbmRsZXIgdHlwZXNcbiAqL1xudmFyIFBhZ2VSZWZlcmVuY2VFbnRyeVR5cGU7XG4oZnVuY3Rpb24gKFBhZ2VSZWZlcmVuY2VFbnRyeVR5cGUpIHtcbiAgICBQYWdlUmVmZXJlbmNlRW50cnlUeXBlW1wiUFJPUEVSVFlcIl0gPSBcIlBST1BFUlRZXCI7XG4gICAgUGFnZVJlZmVyZW5jZUVudHJ5VHlwZVtcIk1BTklGRVNUXCJdID0gXCJNQU5JRkVTVFwiO1xufSkoUGFnZVJlZmVyZW5jZUVudHJ5VHlwZSA9IGV4cG9ydHMuUGFnZVJlZmVyZW5jZUVudHJ5VHlwZSB8fCAoZXhwb3J0cy5QYWdlUmVmZXJlbmNlRW50cnlUeXBlID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1hbmlmZXN0LW1hbmFnZXIuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/notion-to-md/build/types/manifest-manager.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/notion-to-md/build/types/module.js":
/*!*********************************************************!*\
  !*** ./node_modules/notion-to-md/build/types/module.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ExporterError = void 0;\n/**\n * Types for exporters\n */\n// Standard error class for consistent error handling across all exporters\nclass ExporterError extends Error {\n    constructor(message, pageId, operation, details) {\n        super(message);\n        this.pageId = pageId;\n        this.operation = operation;\n        this.details = details;\n        this.name = 'ExporterError';\n    }\n}\nexports.ExporterError = ExporterError;\n//# sourceMappingURL=module.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm90aW9uLXRvLW1kL2J1aWxkL3R5cGVzL21vZHVsZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9sYnJldm9vcnQvRGVza3RvcC9wcm9qZWN0cy9wZXJzb25hbC13ZWJzaXRlL25vZGVfbW9kdWxlcy9ub3Rpb24tdG8tbWQvYnVpbGQvdHlwZXMvbW9kdWxlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5FeHBvcnRlckVycm9yID0gdm9pZCAwO1xuLyoqXG4gKiBUeXBlcyBmb3IgZXhwb3J0ZXJzXG4gKi9cbi8vIFN0YW5kYXJkIGVycm9yIGNsYXNzIGZvciBjb25zaXN0ZW50IGVycm9yIGhhbmRsaW5nIGFjcm9zcyBhbGwgZXhwb3J0ZXJzXG5jbGFzcyBFeHBvcnRlckVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UsIHBhZ2VJZCwgb3BlcmF0aW9uLCBkZXRhaWxzKSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgICAgICB0aGlzLnBhZ2VJZCA9IHBhZ2VJZDtcbiAgICAgICAgdGhpcy5vcGVyYXRpb24gPSBvcGVyYXRpb247XG4gICAgICAgIHRoaXMuZGV0YWlscyA9IGRldGFpbHM7XG4gICAgICAgIHRoaXMubmFtZSA9ICdFeHBvcnRlckVycm9yJztcbiAgICB9XG59XG5leHBvcnRzLkV4cG9ydGVyRXJyb3IgPSBFeHBvcnRlckVycm9yO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bW9kdWxlLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/notion-to-md/build/types/module.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/notion-to-md/build/types/notion.js":
/*!*********************************************************!*\
  !*** ./node_modules/notion-to-md/build/types/notion.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n//# sourceMappingURL=notion.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm90aW9uLXRvLW1kL2J1aWxkL3R5cGVzL25vdGlvbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCIsInNvdXJjZXMiOlsiL1VzZXJzL2xicmV2b29ydC9EZXNrdG9wL3Byb2plY3RzL3BlcnNvbmFsLXdlYnNpdGUvbm9kZV9tb2R1bGVzL25vdGlvbi10by1tZC9idWlsZC90eXBlcy9ub3Rpb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ub3Rpb24uanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/notion-to-md/build/types/notion.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/notion-to-md/build/types/renderer.js":
/*!***********************************************************!*\
  !*** ./node_modules/notion-to-md/build/types/renderer.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n//# sourceMappingURL=renderer.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm90aW9uLXRvLW1kL2J1aWxkL3R5cGVzL3JlbmRlcmVyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdEIiwic291cmNlcyI6WyIvVXNlcnMvbGJyZXZvb3J0L0Rlc2t0b3AvcHJvamVjdHMvcGVyc29uYWwtd2Vic2l0ZS9ub2RlX21vZHVsZXMvbm90aW9uLXRvLW1kL2J1aWxkL3R5cGVzL3JlbmRlcmVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVuZGVyZXIuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/notion-to-md/build/types/renderer.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/notion-to-md/build/types/strategy.js":
/*!***********************************************************!*\
  !*** ./node_modules/notion-to-md/build/types/strategy.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MediaProcessingError = void 0;\n// error handling\nclass MediaProcessingError extends Error {\n    constructor(message, blockId, operation, details) {\n        super(message);\n        this.blockId = blockId;\n        this.operation = operation;\n        this.details = details;\n        this.name = \"MediaProcessingError\";\n    }\n}\nexports.MediaProcessingError = MediaProcessingError;\n//# sourceMappingURL=strategy.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm90aW9uLXRvLW1kL2J1aWxkL3R5cGVzL3N0cmF0ZWd5LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDRCQUE0QjtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QjtBQUM1QiIsInNvdXJjZXMiOlsiL1VzZXJzL2xicmV2b29ydC9EZXNrdG9wL3Byb2plY3RzL3BlcnNvbmFsLXdlYnNpdGUvbm9kZV9tb2R1bGVzL25vdGlvbi10by1tZC9idWlsZC90eXBlcy9zdHJhdGVneS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuTWVkaWFQcm9jZXNzaW5nRXJyb3IgPSB2b2lkIDA7XG4vLyBlcnJvciBoYW5kbGluZ1xuY2xhc3MgTWVkaWFQcm9jZXNzaW5nRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgY29uc3RydWN0b3IobWVzc2FnZSwgYmxvY2tJZCwgb3BlcmF0aW9uLCBkZXRhaWxzKSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgICAgICB0aGlzLmJsb2NrSWQgPSBibG9ja0lkO1xuICAgICAgICB0aGlzLm9wZXJhdGlvbiA9IG9wZXJhdGlvbjtcbiAgICAgICAgdGhpcy5kZXRhaWxzID0gZGV0YWlscztcbiAgICAgICAgdGhpcy5uYW1lID0gXCJNZWRpYVByb2Nlc3NpbmdFcnJvclwiO1xuICAgIH1cbn1cbmV4cG9ydHMuTWVkaWFQcm9jZXNzaW5nRXJyb3IgPSBNZWRpYVByb2Nlc3NpbmdFcnJvcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0cmF0ZWd5LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/notion-to-md/build/types/strategy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/notion-to-md/build/utils/manifest-manager/base.js":
/*!************************************************************************!*\
  !*** ./node_modules/notion-to-md/build/utils/manifest-manager/base.js ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BaseManifestManager = void 0;\nconst fs = __importStar(__webpack_require__(/*! fs/promises */ \"fs/promises\"));\nconst path = __importStar(__webpack_require__(/*! path */ \"path\"));\nconst errors_1 = __webpack_require__(/*! ./errors */ \"(rsc)/./node_modules/notion-to-md/build/utils/manifest-manager/errors.js\");\nconst BASE_DIR = \".notion-to-md\";\n/**\n * Abstract base class for manifest management.\n * Provides common functionality for directory handling and file operations.\n */\nclass BaseManifestManager {\n    constructor(customBaseDir) {\n        this.baseDir = customBaseDir || path.join(process.cwd(), BASE_DIR);\n    }\n    async ensureDirectory(dir) {\n        try {\n            await fs.mkdir(dir, { recursive: true });\n        }\n        catch (error) {\n            throw new errors_1.ManifestIOError(\"create directory\", dir, error);\n        }\n    }\n    async initialize(dir) {\n        const manifestDir = path.join(this.baseDir, dir || \"\");\n        await this.ensureDirectory(manifestDir);\n    }\n    /**\n     * Generic method to save any valid JSON data to a manifest file\n     * @param filename The name of the manifest file\n     * @param data The data to save (must be JSON-serializable)\n     */\n    async save(filename, data) {\n        const manifestPath = this.getManifestPath(filename);\n        try {\n            if (!this.validateJson(data)) {\n                throw new errors_1.ManifestError(\"Invalid JSON data structure\");\n            }\n            await fs.writeFile(manifestPath, JSON.stringify(data, null, 2), \"utf-8\");\n        }\n        catch (error) {\n            if (error instanceof errors_1.ManifestError) {\n                throw error;\n            }\n            throw new errors_1.ManifestIOError(\"save\", manifestPath, error);\n        }\n    }\n    /**\n     * Generic method to load data from a manifest file\n     * @param filename The name of the manifest file to load\n     * @returns The parsed data with the specified type\n     */\n    async load(filename) {\n        const manifestPath = this.getManifestPath(filename);\n        try {\n            const content = await fs.readFile(manifestPath, \"utf-8\");\n            return JSON.parse(content);\n        }\n        catch (error) {\n            const nodeError = error;\n            if (nodeError.code === \"ENOENT\") {\n                throw new errors_1.ManifestNotFoundError(manifestPath);\n            }\n            throw new errors_1.ManifestIOError(\"read\", manifestPath, error);\n        }\n    }\n    validateJson(data) {\n        try {\n            JSON.stringify(data);\n            return true;\n        }\n        catch {\n            return false;\n        }\n    }\n    getManifestPath(pathToFile) {\n        return path.join(this.baseDir, pathToFile);\n    }\n}\nexports.BaseManifestManager = BaseManifestManager;\n//# sourceMappingURL=base.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm90aW9uLXRvLW1kL2J1aWxkL3V0aWxzL21hbmlmZXN0LW1hbmFnZXIvYmFzZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxvQ0FBb0M7QUFDbkQ7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EsMENBQTBDLDRCQUE0QjtBQUN0RSxDQUFDO0FBQ0Q7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsMkJBQTJCO0FBQzNCLHdCQUF3QixtQkFBTyxDQUFDLGdDQUFhO0FBQzdDLDBCQUEwQixtQkFBTyxDQUFDLGtCQUFNO0FBQ3hDLGlCQUFpQixtQkFBTyxDQUFDLDBGQUFVO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0MsaUJBQWlCO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCO0FBQzNCIiwic291cmNlcyI6WyIvVXNlcnMvbGJyZXZvb3J0L0Rlc2t0b3AvcHJvamVjdHMvcGVyc29uYWwtd2Vic2l0ZS9ub2RlX21vZHVsZXMvbm90aW9uLXRvLW1kL2J1aWxkL3V0aWxzL21hbmlmZXN0LW1hbmFnZXIvYmFzZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19zZXRNb2R1bGVEZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX3NldE1vZHVsZURlZmF1bHQpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgXCJkZWZhdWx0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHYgfSk7XG59KSA6IGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBvW1wiZGVmYXVsdFwiXSA9IHY7XG59KTtcbnZhciBfX2ltcG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0U3RhcikgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChrICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrKTtcbiAgICBfX3NldE1vZHVsZURlZmF1bHQocmVzdWx0LCBtb2QpO1xuICAgIHJldHVybiByZXN1bHQ7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5CYXNlTWFuaWZlc3RNYW5hZ2VyID0gdm9pZCAwO1xuY29uc3QgZnMgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcImZzL3Byb21pc2VzXCIpKTtcbmNvbnN0IHBhdGggPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcInBhdGhcIikpO1xuY29uc3QgZXJyb3JzXzEgPSByZXF1aXJlKFwiLi9lcnJvcnNcIik7XG5jb25zdCBCQVNFX0RJUiA9IFwiLm5vdGlvbi10by1tZFwiO1xuLyoqXG4gKiBBYnN0cmFjdCBiYXNlIGNsYXNzIGZvciBtYW5pZmVzdCBtYW5hZ2VtZW50LlxuICogUHJvdmlkZXMgY29tbW9uIGZ1bmN0aW9uYWxpdHkgZm9yIGRpcmVjdG9yeSBoYW5kbGluZyBhbmQgZmlsZSBvcGVyYXRpb25zLlxuICovXG5jbGFzcyBCYXNlTWFuaWZlc3RNYW5hZ2VyIHtcbiAgICBjb25zdHJ1Y3RvcihjdXN0b21CYXNlRGlyKSB7XG4gICAgICAgIHRoaXMuYmFzZURpciA9IGN1c3RvbUJhc2VEaXIgfHwgcGF0aC5qb2luKHByb2Nlc3MuY3dkKCksIEJBU0VfRElSKTtcbiAgICB9XG4gICAgYXN5bmMgZW5zdXJlRGlyZWN0b3J5KGRpcikge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgYXdhaXQgZnMubWtkaXIoZGlyLCB7IHJlY3Vyc2l2ZTogdHJ1ZSB9KTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcnNfMS5NYW5pZmVzdElPRXJyb3IoXCJjcmVhdGUgZGlyZWN0b3J5XCIsIGRpciwgZXJyb3IpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFzeW5jIGluaXRpYWxpemUoZGlyKSB7XG4gICAgICAgIGNvbnN0IG1hbmlmZXN0RGlyID0gcGF0aC5qb2luKHRoaXMuYmFzZURpciwgZGlyIHx8IFwiXCIpO1xuICAgICAgICBhd2FpdCB0aGlzLmVuc3VyZURpcmVjdG9yeShtYW5pZmVzdERpcik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdlbmVyaWMgbWV0aG9kIHRvIHNhdmUgYW55IHZhbGlkIEpTT04gZGF0YSB0byBhIG1hbmlmZXN0IGZpbGVcbiAgICAgKiBAcGFyYW0gZmlsZW5hbWUgVGhlIG5hbWUgb2YgdGhlIG1hbmlmZXN0IGZpbGVcbiAgICAgKiBAcGFyYW0gZGF0YSBUaGUgZGF0YSB0byBzYXZlIChtdXN0IGJlIEpTT04tc2VyaWFsaXphYmxlKVxuICAgICAqL1xuICAgIGFzeW5jIHNhdmUoZmlsZW5hbWUsIGRhdGEpIHtcbiAgICAgICAgY29uc3QgbWFuaWZlc3RQYXRoID0gdGhpcy5nZXRNYW5pZmVzdFBhdGgoZmlsZW5hbWUpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLnZhbGlkYXRlSnNvbihkYXRhKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcnNfMS5NYW5pZmVzdEVycm9yKFwiSW52YWxpZCBKU09OIGRhdGEgc3RydWN0dXJlXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYXdhaXQgZnMud3JpdGVGaWxlKG1hbmlmZXN0UGF0aCwgSlNPTi5zdHJpbmdpZnkoZGF0YSwgbnVsbCwgMiksIFwidXRmLThcIik7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBlcnJvcnNfMS5NYW5pZmVzdEVycm9yKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzXzEuTWFuaWZlc3RJT0Vycm9yKFwic2F2ZVwiLCBtYW5pZmVzdFBhdGgsIGVycm9yKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZW5lcmljIG1ldGhvZCB0byBsb2FkIGRhdGEgZnJvbSBhIG1hbmlmZXN0IGZpbGVcbiAgICAgKiBAcGFyYW0gZmlsZW5hbWUgVGhlIG5hbWUgb2YgdGhlIG1hbmlmZXN0IGZpbGUgdG8gbG9hZFxuICAgICAqIEByZXR1cm5zIFRoZSBwYXJzZWQgZGF0YSB3aXRoIHRoZSBzcGVjaWZpZWQgdHlwZVxuICAgICAqL1xuICAgIGFzeW5jIGxvYWQoZmlsZW5hbWUpIHtcbiAgICAgICAgY29uc3QgbWFuaWZlc3RQYXRoID0gdGhpcy5nZXRNYW5pZmVzdFBhdGgoZmlsZW5hbWUpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgY29udGVudCA9IGF3YWl0IGZzLnJlYWRGaWxlKG1hbmlmZXN0UGF0aCwgXCJ1dGYtOFwiKTtcbiAgICAgICAgICAgIHJldHVybiBKU09OLnBhcnNlKGNvbnRlbnQpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY29uc3Qgbm9kZUVycm9yID0gZXJyb3I7XG4gICAgICAgICAgICBpZiAobm9kZUVycm9yLmNvZGUgPT09IFwiRU5PRU5UXCIpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzXzEuTWFuaWZlc3ROb3RGb3VuZEVycm9yKG1hbmlmZXN0UGF0aCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzXzEuTWFuaWZlc3RJT0Vycm9yKFwicmVhZFwiLCBtYW5pZmVzdFBhdGgsIGVycm9yKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB2YWxpZGF0ZUpzb24oZGF0YSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgSlNPTi5zdHJpbmdpZnkoZGF0YSk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0TWFuaWZlc3RQYXRoKHBhdGhUb0ZpbGUpIHtcbiAgICAgICAgcmV0dXJuIHBhdGguam9pbih0aGlzLmJhc2VEaXIsIHBhdGhUb0ZpbGUpO1xuICAgIH1cbn1cbmV4cG9ydHMuQmFzZU1hbmlmZXN0TWFuYWdlciA9IEJhc2VNYW5pZmVzdE1hbmFnZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1iYXNlLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/notion-to-md/build/utils/manifest-manager/base.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/notion-to-md/build/utils/manifest-manager/errors.js":
/*!**************************************************************************!*\
  !*** ./node_modules/notion-to-md/build/utils/manifest-manager/errors.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.PageReferenceStateError = exports.PageReferenceNotFoundError = exports.PageReferenceError = exports.MediaManifestStateError = exports.MediaEntryNotFoundError = exports.MediaManifestError = exports.ManifestNotInitializedError = exports.ManifestNotFoundError = exports.ManifestIOError = exports.ManifestError = void 0;\nclass ManifestError extends Error {\n    constructor(message, cause) {\n        super(message);\n        this.cause = cause;\n        this.name = \"ManifestError\";\n    }\n}\nexports.ManifestError = ManifestError;\nclass ManifestIOError extends ManifestError {\n    constructor(operation, path, cause) {\n        super(`Failed to ${operation} manifest at ${path}`, cause);\n        this.name = \"ManifestIOError\";\n    }\n}\nexports.ManifestIOError = ManifestIOError;\nclass ManifestNotFoundError extends ManifestError {\n    constructor(path) {\n        super(`Manifest not found at ${path}`);\n        this.name = \"ManifestNotFoundError\";\n    }\n}\nexports.ManifestNotFoundError = ManifestNotFoundError;\nclass ManifestNotInitializedError extends ManifestError {\n    constructor() {\n        super(\"Manifest not initialized. Call initializeForPage first.\");\n        this.name = \"ManifestNotInitializedError\";\n    }\n}\nexports.ManifestNotInitializedError = ManifestNotInitializedError;\nclass MediaManifestError extends ManifestError {\n    constructor(message, cause) {\n        super(message);\n        this.cause = cause;\n        this.name = \"MediaManifestError\";\n    }\n}\nexports.MediaManifestError = MediaManifestError;\nclass MediaEntryNotFoundError extends MediaManifestError {\n    constructor(blockId) {\n        super(`Media entry not found for block: ${blockId}`);\n        this.name = \"MediaEntryNotFoundError\";\n    }\n}\nexports.MediaEntryNotFoundError = MediaEntryNotFoundError;\nclass MediaManifestStateError extends MediaManifestError {\n    constructor(message) {\n        super(message);\n        this.name = \"MediaManifestStateError\";\n    }\n}\nexports.MediaManifestStateError = MediaManifestStateError;\nclass PageReferenceError extends ManifestError {\n    constructor(message, cause) {\n        super(message);\n        this.cause = cause;\n        this.name = \"PageReferenceError\";\n    }\n}\nexports.PageReferenceError = PageReferenceError;\nclass PageReferenceNotFoundError extends PageReferenceError {\n    constructor(pageId) {\n        super(`Page reference not found for page: ${pageId}`);\n        this.name = \"PageReferenceNotFoundError\";\n    }\n}\nexports.PageReferenceNotFoundError = PageReferenceNotFoundError;\nclass PageReferenceStateError extends PageReferenceError {\n    constructor(message) {\n        super(message);\n        this.name = \"PageReferenceStateError\";\n    }\n}\nexports.PageReferenceStateError = PageReferenceStateError;\n//# sourceMappingURL=errors.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm90aW9uLXRvLW1kL2J1aWxkL3V0aWxzL21hbmlmZXN0LW1hbmFnZXIvZXJyb3JzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELCtCQUErQixHQUFHLGtDQUFrQyxHQUFHLDBCQUEwQixHQUFHLCtCQUErQixHQUFHLCtCQUErQixHQUFHLDBCQUEwQixHQUFHLG1DQUFtQyxHQUFHLDZCQUE2QixHQUFHLHVCQUF1QixHQUFHLHFCQUFxQjtBQUMxVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0EsMkJBQTJCLFdBQVcsY0FBYyxLQUFLO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0EsdUNBQXVDLEtBQUs7QUFDNUM7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQztBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0Esa0RBQWtELFFBQVE7QUFDMUQ7QUFDQTtBQUNBO0FBQ0EsK0JBQStCO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQjtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0Esb0RBQW9ELE9BQU87QUFDM0Q7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQjtBQUMvQiIsInNvdXJjZXMiOlsiL1VzZXJzL2xicmV2b29ydC9EZXNrdG9wL3Byb2plY3RzL3BlcnNvbmFsLXdlYnNpdGUvbm9kZV9tb2R1bGVzL25vdGlvbi10by1tZC9idWlsZC91dGlscy9tYW5pZmVzdC1tYW5hZ2VyL2Vycm9ycy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuUGFnZVJlZmVyZW5jZVN0YXRlRXJyb3IgPSBleHBvcnRzLlBhZ2VSZWZlcmVuY2VOb3RGb3VuZEVycm9yID0gZXhwb3J0cy5QYWdlUmVmZXJlbmNlRXJyb3IgPSBleHBvcnRzLk1lZGlhTWFuaWZlc3RTdGF0ZUVycm9yID0gZXhwb3J0cy5NZWRpYUVudHJ5Tm90Rm91bmRFcnJvciA9IGV4cG9ydHMuTWVkaWFNYW5pZmVzdEVycm9yID0gZXhwb3J0cy5NYW5pZmVzdE5vdEluaXRpYWxpemVkRXJyb3IgPSBleHBvcnRzLk1hbmlmZXN0Tm90Rm91bmRFcnJvciA9IGV4cG9ydHMuTWFuaWZlc3RJT0Vycm9yID0gZXhwb3J0cy5NYW5pZmVzdEVycm9yID0gdm9pZCAwO1xuY2xhc3MgTWFuaWZlc3RFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlLCBjYXVzZSkge1xuICAgICAgICBzdXBlcihtZXNzYWdlKTtcbiAgICAgICAgdGhpcy5jYXVzZSA9IGNhdXNlO1xuICAgICAgICB0aGlzLm5hbWUgPSBcIk1hbmlmZXN0RXJyb3JcIjtcbiAgICB9XG59XG5leHBvcnRzLk1hbmlmZXN0RXJyb3IgPSBNYW5pZmVzdEVycm9yO1xuY2xhc3MgTWFuaWZlc3RJT0Vycm9yIGV4dGVuZHMgTWFuaWZlc3RFcnJvciB7XG4gICAgY29uc3RydWN0b3Iob3BlcmF0aW9uLCBwYXRoLCBjYXVzZSkge1xuICAgICAgICBzdXBlcihgRmFpbGVkIHRvICR7b3BlcmF0aW9ufSBtYW5pZmVzdCBhdCAke3BhdGh9YCwgY2F1c2UpO1xuICAgICAgICB0aGlzLm5hbWUgPSBcIk1hbmlmZXN0SU9FcnJvclwiO1xuICAgIH1cbn1cbmV4cG9ydHMuTWFuaWZlc3RJT0Vycm9yID0gTWFuaWZlc3RJT0Vycm9yO1xuY2xhc3MgTWFuaWZlc3ROb3RGb3VuZEVycm9yIGV4dGVuZHMgTWFuaWZlc3RFcnJvciB7XG4gICAgY29uc3RydWN0b3IocGF0aCkge1xuICAgICAgICBzdXBlcihgTWFuaWZlc3Qgbm90IGZvdW5kIGF0ICR7cGF0aH1gKTtcbiAgICAgICAgdGhpcy5uYW1lID0gXCJNYW5pZmVzdE5vdEZvdW5kRXJyb3JcIjtcbiAgICB9XG59XG5leHBvcnRzLk1hbmlmZXN0Tm90Rm91bmRFcnJvciA9IE1hbmlmZXN0Tm90Rm91bmRFcnJvcjtcbmNsYXNzIE1hbmlmZXN0Tm90SW5pdGlhbGl6ZWRFcnJvciBleHRlbmRzIE1hbmlmZXN0RXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcihcIk1hbmlmZXN0IG5vdCBpbml0aWFsaXplZC4gQ2FsbCBpbml0aWFsaXplRm9yUGFnZSBmaXJzdC5cIik7XG4gICAgICAgIHRoaXMubmFtZSA9IFwiTWFuaWZlc3ROb3RJbml0aWFsaXplZEVycm9yXCI7XG4gICAgfVxufVxuZXhwb3J0cy5NYW5pZmVzdE5vdEluaXRpYWxpemVkRXJyb3IgPSBNYW5pZmVzdE5vdEluaXRpYWxpemVkRXJyb3I7XG5jbGFzcyBNZWRpYU1hbmlmZXN0RXJyb3IgZXh0ZW5kcyBNYW5pZmVzdEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlLCBjYXVzZSkge1xuICAgICAgICBzdXBlcihtZXNzYWdlKTtcbiAgICAgICAgdGhpcy5jYXVzZSA9IGNhdXNlO1xuICAgICAgICB0aGlzLm5hbWUgPSBcIk1lZGlhTWFuaWZlc3RFcnJvclwiO1xuICAgIH1cbn1cbmV4cG9ydHMuTWVkaWFNYW5pZmVzdEVycm9yID0gTWVkaWFNYW5pZmVzdEVycm9yO1xuY2xhc3MgTWVkaWFFbnRyeU5vdEZvdW5kRXJyb3IgZXh0ZW5kcyBNZWRpYU1hbmlmZXN0RXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKGJsb2NrSWQpIHtcbiAgICAgICAgc3VwZXIoYE1lZGlhIGVudHJ5IG5vdCBmb3VuZCBmb3IgYmxvY2s6ICR7YmxvY2tJZH1gKTtcbiAgICAgICAgdGhpcy5uYW1lID0gXCJNZWRpYUVudHJ5Tm90Rm91bmRFcnJvclwiO1xuICAgIH1cbn1cbmV4cG9ydHMuTWVkaWFFbnRyeU5vdEZvdW5kRXJyb3IgPSBNZWRpYUVudHJ5Tm90Rm91bmRFcnJvcjtcbmNsYXNzIE1lZGlhTWFuaWZlc3RTdGF0ZUVycm9yIGV4dGVuZHMgTWVkaWFNYW5pZmVzdEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlKSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgICAgICB0aGlzLm5hbWUgPSBcIk1lZGlhTWFuaWZlc3RTdGF0ZUVycm9yXCI7XG4gICAgfVxufVxuZXhwb3J0cy5NZWRpYU1hbmlmZXN0U3RhdGVFcnJvciA9IE1lZGlhTWFuaWZlc3RTdGF0ZUVycm9yO1xuY2xhc3MgUGFnZVJlZmVyZW5jZUVycm9yIGV4dGVuZHMgTWFuaWZlc3RFcnJvciB7XG4gICAgY29uc3RydWN0b3IobWVzc2FnZSwgY2F1c2UpIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSk7XG4gICAgICAgIHRoaXMuY2F1c2UgPSBjYXVzZTtcbiAgICAgICAgdGhpcy5uYW1lID0gXCJQYWdlUmVmZXJlbmNlRXJyb3JcIjtcbiAgICB9XG59XG5leHBvcnRzLlBhZ2VSZWZlcmVuY2VFcnJvciA9IFBhZ2VSZWZlcmVuY2VFcnJvcjtcbmNsYXNzIFBhZ2VSZWZlcmVuY2VOb3RGb3VuZEVycm9yIGV4dGVuZHMgUGFnZVJlZmVyZW5jZUVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihwYWdlSWQpIHtcbiAgICAgICAgc3VwZXIoYFBhZ2UgcmVmZXJlbmNlIG5vdCBmb3VuZCBmb3IgcGFnZTogJHtwYWdlSWR9YCk7XG4gICAgICAgIHRoaXMubmFtZSA9IFwiUGFnZVJlZmVyZW5jZU5vdEZvdW5kRXJyb3JcIjtcbiAgICB9XG59XG5leHBvcnRzLlBhZ2VSZWZlcmVuY2VOb3RGb3VuZEVycm9yID0gUGFnZVJlZmVyZW5jZU5vdEZvdW5kRXJyb3I7XG5jbGFzcyBQYWdlUmVmZXJlbmNlU3RhdGVFcnJvciBleHRlbmRzIFBhZ2VSZWZlcmVuY2VFcnJvciB7XG4gICAgY29uc3RydWN0b3IobWVzc2FnZSkge1xuICAgICAgICBzdXBlcihtZXNzYWdlKTtcbiAgICAgICAgdGhpcy5uYW1lID0gXCJQYWdlUmVmZXJlbmNlU3RhdGVFcnJvclwiO1xuICAgIH1cbn1cbmV4cG9ydHMuUGFnZVJlZmVyZW5jZVN0YXRlRXJyb3IgPSBQYWdlUmVmZXJlbmNlU3RhdGVFcnJvcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVycm9ycy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/notion-to-md/build/utils/manifest-manager/errors.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/notion-to-md/build/utils/manifest-manager/index.js":
/*!*************************************************************************!*\
  !*** ./node_modules/notion-to-md/build/utils/manifest-manager/index.js ***!
  \*************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./media */ \"(rsc)/./node_modules/notion-to-md/build/utils/manifest-manager/media.js\"), exports);\n__exportStar(__webpack_require__(/*! ./page */ \"(rsc)/./node_modules/notion-to-md/build/utils/manifest-manager/page.js\"), exports);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm90aW9uLXRvLW1kL2J1aWxkL3V0aWxzL21hbmlmZXN0LW1hbmFnZXIvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsb0NBQW9DO0FBQ25EO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsYUFBYSxtQkFBTyxDQUFDLHdGQUFTO0FBQzlCLGFBQWEsbUJBQU8sQ0FBQyxzRkFBUTtBQUM3QiIsInNvdXJjZXMiOlsiL1VzZXJzL2xicmV2b29ydC9EZXNrdG9wL3Byb2plY3RzL3BlcnNvbmFsLXdlYnNpdGUvbm9kZV9tb2R1bGVzL25vdGlvbi10by1tZC9idWlsZC91dGlscy9tYW5pZmVzdC1tYW5hZ2VyL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXhwb3J0cywgcCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vbWVkaWFcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3BhZ2VcIiksIGV4cG9ydHMpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/notion-to-md/build/utils/manifest-manager/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/notion-to-md/build/utils/manifest-manager/media.js":
/*!*************************************************************************!*\
  !*** ./node_modules/notion-to-md/build/utils/manifest-manager/media.js ***!
  \*************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MediaManifestManager = void 0;\nconst path = __importStar(__webpack_require__(/*! path */ \"path\"));\nconst base_1 = __webpack_require__(/*! ./base */ \"(rsc)/./node_modules/notion-to-md/build/utils/manifest-manager/base.js\");\nconst errors_1 = __webpack_require__(/*! ./errors */ \"(rsc)/./node_modules/notion-to-md/build/utils/manifest-manager/errors.js\");\nconst BASE_DIR = \"media\";\nclass MediaManifestManager extends base_1.BaseManifestManager {\n    constructor(customBaseDir) {\n        super(customBaseDir);\n        this.manifest = null;\n        this.currentPageId = null;\n        this.mediaDir = BASE_DIR;\n    }\n    /**\n     * Initializes the media manifest manager for a specific page.\n     * This sets up the required directory structure and loads/creates\n     * the manifest file for the given page.\n     *\n     * @param pageId The Notion page ID to initialize the manager for\n     * @throws {ManifestIOError} If directory creation or file operations fail\n     */\n    async initialize(pageId) {\n        try {\n            await super.initialize(this.mediaDir);\n            this.currentPageId = pageId;\n            try {\n                const manifestFilename = this.getManifestFilename();\n                this.manifest = await this.load(manifestFilename);\n            }\n            catch (error) {\n                if (error instanceof errors_1.ManifestNotFoundError) {\n                    this.manifest = {\n                        pageId,\n                        lastUpdated: new Date().toISOString(),\n                        mediaEntries: {},\n                    };\n                }\n                else {\n                    throw error;\n                }\n            }\n        }\n        catch (error) {\n            // Reset state if initialization fails\n            this.manifest = null;\n            this.currentPageId = null;\n            if (error instanceof errors_1.ManifestIOError) {\n                throw error;\n            }\n            throw new errors_1.ManifestIOError(\"initialize media manifest manager\", this.mediaDir, error);\n        }\n    }\n    /**\n     * Updates or creates a media entry for a block\n     * @throws {MediaManifestStateError} If manager is not initialized\n     * @throws {ManifestIOError} If saving fails\n     */\n    async updateEntry(blockId, input) {\n        this.ensureInitialized();\n        const now = new Date().toISOString();\n        const existing = this.manifest.mediaEntries[blockId];\n        try {\n            this.manifest.mediaEntries[blockId] = {\n                ...input,\n                createdAt: (existing === null || existing === void 0 ? void 0 : existing.createdAt) || now,\n                updatedAt: now,\n            };\n            this.manifest.lastUpdated = now;\n        }\n        catch (error) {\n            throw new errors_1.MediaManifestError(`Failed to update entry for block ${blockId}`, error);\n        }\n    }\n    /**\n     * Retrieves a media entry for a block\n     * @throws {MediaManifestStateError} If manager is not initialized\n     * @throws {MediaEntryNotFoundError} If entry doesn't exist\n     */\n    getEntry(blockId) {\n        this.ensureInitialized();\n        const entry = this.manifest.mediaEntries[blockId];\n        return entry;\n    }\n    /**\n     * Removes a media entry for a block\n     * @throws {MediaManifestStateError} If manager is not initialized\n     */\n    removeEntry(blockId) {\n        this.ensureInitialized();\n        delete this.manifest.mediaEntries[blockId];\n        this.manifest.lastUpdated = new Date().toISOString();\n    }\n    /**\n     * Saves the current manifest to disk\n     * @throws {MediaManifestStateError} If manager is not initialized\n     * @throws {ManifestIOError} If saving fails\n     */\n    async save() {\n        this.ensureInitialized();\n        try {\n            await super.save(this.getManifestFilename(), this.manifest);\n        }\n        catch (error) {\n            if (error instanceof errors_1.ManifestIOError) {\n                throw error;\n            }\n            throw new errors_1.ManifestIOError(\"save media manifest\", this.getManifestFilename(), error);\n        }\n    }\n    /**\n     * Gets the current manifest data (primarily for testing)\n     * @throws {MediaManifestStateError} If manager is not initialized\n     */\n    getManifest() {\n        this.ensureInitialized();\n        return this.manifest;\n    }\n    /**\n     * Gets the manifest filename for the current page\n     * @throws {MediaManifestStateError} If no page ID is set\n     */\n    getManifestFilename() {\n        if (!this.currentPageId) {\n            throw new errors_1.MediaManifestStateError(\"No page ID set. Call initialize first.\");\n        }\n        return path.join(this.mediaDir, `${this.currentPageId}_media.json`);\n    }\n    /**\n     * Ensures the manager is properly initialized\n     * @throws {MediaManifestStateError} If manager is not initialized\n     */\n    ensureInitialized() {\n        if (!this.manifest || !this.currentPageId) {\n            throw new errors_1.MediaManifestStateError(\"Manager not initialized. Call initialize first.\");\n        }\n    }\n}\nexports.MediaManifestManager = MediaManifestManager;\n//# sourceMappingURL=media.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/notion-to-md/build/utils/manifest-manager/media.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/notion-to-md/build/utils/manifest-manager/page.js":
/*!************************************************************************!*\
  !*** ./node_modules/notion-to-md/build/utils/manifest-manager/page.js ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.PageReferenceManifestManager = void 0;\nconst path = __importStar(__webpack_require__(/*! path */ \"path\"));\nconst base_1 = __webpack_require__(/*! ./base */ \"(rsc)/./node_modules/notion-to-md/build/utils/manifest-manager/base.js\");\nconst errors_1 = __webpack_require__(/*! ./errors */ \"(rsc)/./node_modules/notion-to-md/build/utils/manifest-manager/errors.js\");\nconst BASE_DIR = \"ref\";\nconst PAGE_REF_FILENAME = \"page_ref.json\";\nclass PageReferenceManifestManager extends base_1.BaseManifestManager {\n    constructor(customBaseDir) {\n        super(customBaseDir);\n        this.manifest = null;\n        this.refDir = BASE_DIR;\n    }\n    /**\n     * Initializes the page reference manager.\n     * Sets up directory structure and loads/creates the manifest file.\n     *\n     * @throws {ManifestIOError} If directory creation or file operations fail\n     * @throws {PageReferenceError} If manifest initialization fails\n     */\n    async initialize() {\n        try {\n            await super.initialize(this.refDir);\n            try {\n                const manifestFilename = this.getManifestFilename();\n                this.manifest = await this.load(manifestFilename);\n            }\n            catch (error) {\n                if (error instanceof errors_1.ManifestNotFoundError) {\n                    this.manifest = {\n                        lastUpdated: new Date().toISOString(),\n                        references: {},\n                    };\n                }\n                else {\n                    throw error;\n                }\n            }\n        }\n        catch (error) {\n            // Reset state if initialization fails\n            this.manifest = null;\n            if (error instanceof errors_1.ManifestIOError) {\n                throw error;\n            }\n            throw new errors_1.PageReferenceError(\"Failed to initialize page reference manager\", error);\n        }\n    }\n    /**\n     * Updates or creates a page reference entry\n     *\n     * @throws {PageReferenceStateError} If manager is not initialized\n     * @throws {PageReferenceError} If update fails\n     */\n    async updateEntry(pageId, input) {\n        this.ensureInitialized();\n        try {\n            this.manifest.references[pageId] = {\n                ...input,\n            };\n            this.manifest.lastUpdated = new Date().toISOString();\n        }\n        catch (error) {\n            throw new errors_1.PageReferenceError(`Failed to update reference for page ${pageId}`, error);\n        }\n    }\n    /**\n     * Retrieves a page reference entry\n     *\n     * @throws {PageReferenceStateError} If manager is not initialized\n     * @throws {PageReferenceNotFoundError} If reference doesn't exist\n     */\n    getEntry(pageId) {\n        this.ensureInitialized();\n        const entry = this.manifest.references[pageId];\n        if (!entry) {\n            throw new errors_1.PageReferenceNotFoundError(pageId);\n        }\n        return entry;\n    }\n    /**\n     * Checks if a reference exists for a page\n     *\n     * @throws {PageReferenceStateError} If manager is not initialized\n     */\n    hasEntry(pageId) {\n        this.ensureInitialized();\n        return pageId in this.manifest.references;\n    }\n    /**\n     * Removes a page reference entry\n     *\n     * @throws {PageReferenceStateError} If manager is not initialized\n     */\n    removeEntry(pageId) {\n        this.ensureInitialized();\n        delete this.manifest.references[pageId];\n        this.manifest.lastUpdated = new Date().toISOString();\n    }\n    /**\n     * Gets all page references\n     *\n     * @throws {PageReferenceStateError} If manager is not initialized\n     */\n    getAllEntries() {\n        this.ensureInitialized();\n        return { ...this.manifest.references };\n    }\n    /**\n     * Saves the current manifest to disk\n     *\n     * @throws {PageReferenceStateError} If manager is not initialized\n     * @throws {ManifestIOError} If save operation fails\n     */\n    async save() {\n        this.ensureInitialized();\n        try {\n            await super.save(this.getManifestFilename(), this.manifest);\n        }\n        catch (error) {\n            if (error instanceof errors_1.ManifestIOError) {\n                throw error;\n            }\n            throw new errors_1.ManifestIOError(\"save page reference manifest\", this.getManifestFilename(), error);\n        }\n    }\n    /**\n     * Gets the current manifest data (primarily for testing)\n     *\n     * @throws {PageReferenceStateError} If manager is not initialized\n     */\n    getManifest() {\n        this.ensureInitialized();\n        return this.manifest;\n    }\n    getManifestFilename() {\n        return path.join(this.refDir, PAGE_REF_FILENAME);\n    }\n    ensureInitialized() {\n        if (!this.manifest) {\n            throw new errors_1.PageReferenceStateError(\"Manager not initialized. Call initialize first.\");\n        }\n    }\n}\nexports.PageReferenceManifestManager = PageReferenceManifestManager;\n//# sourceMappingURL=page.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/notion-to-md/build/utils/manifest-manager/page.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/notion-to-md/build/utils/notion/index.js":
/*!***************************************************************!*\
  !*** ./node_modules/notion-to-md/build/utils/notion/index.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.isPageRefBlock = exports.isMediaBlock = void 0;\nfunction isMediaBlock(block) {\n    // @ts-ignore\n    return ['image', 'video', 'file', 'pdf'].includes(block.type);\n}\nexports.isMediaBlock = isMediaBlock;\nfunction isPageRefBlock(block) {\n    //@ts-ignore - Check for page mentions in paragraphs\n    if (block.type && block[block.type].rich_text) {\n        // @ts-ignore - Check for mentions in rich text for any block\n        const hasPageMention = block[block.type].rich_text.some((text) => { var _a; return text.type === 'mention' && ((_a = text.mention) === null || _a === void 0 ? void 0 : _a.type) === 'page'; });\n        if (hasPageMention)\n            return true;\n    }\n    // @ts-ignore - Check for direct page links\n    return block.type === 'link_to_page' || block.type === 'child_page';\n}\nexports.isPageRefBlock = isPageRefBlock;\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm90aW9uLXRvLW1kL2J1aWxkL3V0aWxzL25vdGlvbi9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxzQkFBc0IsR0FBRyxvQkFBb0I7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0RUFBNEUsUUFBUSxrSEFBa0g7QUFDdE07QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCIiwic291cmNlcyI6WyIvVXNlcnMvbGJyZXZvb3J0L0Rlc2t0b3AvcHJvamVjdHMvcGVyc29uYWwtd2Vic2l0ZS9ub2RlX21vZHVsZXMvbm90aW9uLXRvLW1kL2J1aWxkL3V0aWxzL25vdGlvbi9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuaXNQYWdlUmVmQmxvY2sgPSBleHBvcnRzLmlzTWVkaWFCbG9jayA9IHZvaWQgMDtcbmZ1bmN0aW9uIGlzTWVkaWFCbG9jayhibG9jaykge1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICByZXR1cm4gWydpbWFnZScsICd2aWRlbycsICdmaWxlJywgJ3BkZiddLmluY2x1ZGVzKGJsb2NrLnR5cGUpO1xufVxuZXhwb3J0cy5pc01lZGlhQmxvY2sgPSBpc01lZGlhQmxvY2s7XG5mdW5jdGlvbiBpc1BhZ2VSZWZCbG9jayhibG9jaykge1xuICAgIC8vQHRzLWlnbm9yZSAtIENoZWNrIGZvciBwYWdlIG1lbnRpb25zIGluIHBhcmFncmFwaHNcbiAgICBpZiAoYmxvY2sudHlwZSAmJiBibG9ja1tibG9jay50eXBlXS5yaWNoX3RleHQpIHtcbiAgICAgICAgLy8gQHRzLWlnbm9yZSAtIENoZWNrIGZvciBtZW50aW9ucyBpbiByaWNoIHRleHQgZm9yIGFueSBibG9ja1xuICAgICAgICBjb25zdCBoYXNQYWdlTWVudGlvbiA9IGJsb2NrW2Jsb2NrLnR5cGVdLnJpY2hfdGV4dC5zb21lKCh0ZXh0KSA9PiB7IHZhciBfYTsgcmV0dXJuIHRleHQudHlwZSA9PT0gJ21lbnRpb24nICYmICgoX2EgPSB0ZXh0Lm1lbnRpb24pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS50eXBlKSA9PT0gJ3BhZ2UnOyB9KTtcbiAgICAgICAgaWYgKGhhc1BhZ2VNZW50aW9uKVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIC8vIEB0cy1pZ25vcmUgLSBDaGVjayBmb3IgZGlyZWN0IHBhZ2UgbGlua3NcbiAgICByZXR1cm4gYmxvY2sudHlwZSA9PT0gJ2xpbmtfdG9fcGFnZScgfHwgYmxvY2sudHlwZSA9PT0gJ2NoaWxkX3BhZ2UnO1xufVxuZXhwb3J0cy5pc1BhZ2VSZWZCbG9jayA9IGlzUGFnZVJlZkJsb2NrO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/notion-to-md/build/utils/notion/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/notion-to-md/build/utils/url.js":
/*!******************************************************!*\
  !*** ./node_modules/notion-to-md/build/utils/url.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.isExternalUrl = void 0;\nfunction isExternalUrl(url) {\n    return !url.includes('prod-files-secure.s3.us-west-2.amazonaws.com');\n}\nexports.isExternalUrl = isExternalUrl;\n//# sourceMappingURL=url.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm90aW9uLXRvLW1kL2J1aWxkL3V0aWxzL3VybC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCIiwic291cmNlcyI6WyIvVXNlcnMvbGJyZXZvb3J0L0Rlc2t0b3AvcHJvamVjdHMvcGVyc29uYWwtd2Vic2l0ZS9ub2RlX21vZHVsZXMvbm90aW9uLXRvLW1kL2J1aWxkL3V0aWxzL3VybC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuaXNFeHRlcm5hbFVybCA9IHZvaWQgMDtcbmZ1bmN0aW9uIGlzRXh0ZXJuYWxVcmwodXJsKSB7XG4gICAgcmV0dXJuICF1cmwuaW5jbHVkZXMoJ3Byb2QtZmlsZXMtc2VjdXJlLnMzLnVzLXdlc3QtMi5hbWF6b25hd3MuY29tJyk7XG59XG5leHBvcnRzLmlzRXh0ZXJuYWxVcmwgPSBpc0V4dGVybmFsVXJsO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXJsLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/notion-to-md/build/utils/url.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/notion-to-md/node_modules/mime/Mime.js":
/*!*************************************************************!*\
  !*** ./node_modules/notion-to-md/node_modules/mime/Mime.js ***!
  \*************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/**\n * @param typeMap [Object] Map of MIME type -> Array[extensions]\n * @param ...\n */\nfunction Mime() {\n  this._types = Object.create(null);\n  this._extensions = Object.create(null);\n\n  for (let i = 0; i < arguments.length; i++) {\n    this.define(arguments[i]);\n  }\n\n  this.define = this.define.bind(this);\n  this.getType = this.getType.bind(this);\n  this.getExtension = this.getExtension.bind(this);\n}\n\n/**\n * Define mimetype -> extension mappings.  Each key is a mime-type that maps\n * to an array of extensions associated with the type.  The first extension is\n * used as the default extension for the type.\n *\n * e.g. mime.define({'audio/ogg', ['oga', 'ogg', 'spx']});\n *\n * If a type declares an extension that has already been defined, an error will\n * be thrown.  To suppress this error and force the extension to be associated\n * with the new type, pass `force`=true.  Alternatively, you may prefix the\n * extension with \"*\" to map the type to extension, without mapping the\n * extension to the type.\n *\n * e.g. mime.define({'audio/wav', ['wav']}, {'audio/x-wav', ['*wav']});\n *\n *\n * @param map (Object) type definitions\n * @param force (Boolean) if true, force overriding of existing definitions\n */\nMime.prototype.define = function(typeMap, force) {\n  for (let type in typeMap) {\n    let extensions = typeMap[type].map(function(t) {\n      return t.toLowerCase();\n    });\n    type = type.toLowerCase();\n\n    for (let i = 0; i < extensions.length; i++) {\n      const ext = extensions[i];\n\n      // '*' prefix = not the preferred type for this extension.  So fixup the\n      // extension, and skip it.\n      if (ext[0] === '*') {\n        continue;\n      }\n\n      if (!force && (ext in this._types)) {\n        throw new Error(\n          'Attempt to change mapping for \"' + ext +\n          '\" extension from \"' + this._types[ext] + '\" to \"' + type +\n          '\". Pass `force=true` to allow this, otherwise remove \"' + ext +\n          '\" from the list of extensions for \"' + type + '\".'\n        );\n      }\n\n      this._types[ext] = type;\n    }\n\n    // Use first extension as default\n    if (force || !this._extensions[type]) {\n      const ext = extensions[0];\n      this._extensions[type] = (ext[0] !== '*') ? ext : ext.substr(1);\n    }\n  }\n};\n\n/**\n * Lookup a mime type based on extension\n */\nMime.prototype.getType = function(path) {\n  path = String(path);\n  let last = path.replace(/^.*[/\\\\]/, '').toLowerCase();\n  let ext = last.replace(/^.*\\./, '').toLowerCase();\n\n  let hasPath = last.length < path.length;\n  let hasDot = ext.length < last.length - 1;\n\n  return (hasDot || !hasPath) && this._types[ext] || null;\n};\n\n/**\n * Return file extension associated with a mime type\n */\nMime.prototype.getExtension = function(type) {\n  type = /^\\s*([^;\\s]*)/.test(type) && RegExp.$1;\n  return type && this._extensions[type.toLowerCase()] || null;\n};\n\nmodule.exports = Mime;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm90aW9uLXRvLW1kL25vZGVfbW9kdWxlcy9taW1lL01pbWUuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsa0JBQWtCLHNCQUFzQjtBQUN4QztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsbUNBQW1DO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLHFCQUFxQixHQUFHLHdCQUF3QjtBQUNyRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUEsb0JBQW9CLHVCQUF1QjtBQUMzQzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsiL1VzZXJzL2xicmV2b29ydC9EZXNrdG9wL3Byb2plY3RzL3BlcnNvbmFsLXdlYnNpdGUvbm9kZV9tb2R1bGVzL25vdGlvbi10by1tZC9ub2RlX21vZHVsZXMvbWltZS9NaW1lLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBAcGFyYW0gdHlwZU1hcCBbT2JqZWN0XSBNYXAgb2YgTUlNRSB0eXBlIC0+IEFycmF5W2V4dGVuc2lvbnNdXG4gKiBAcGFyYW0gLi4uXG4gKi9cbmZ1bmN0aW9uIE1pbWUoKSB7XG4gIHRoaXMuX3R5cGVzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgdGhpcy5fZXh0ZW5zaW9ucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB0aGlzLmRlZmluZShhcmd1bWVudHNbaV0pO1xuICB9XG5cbiAgdGhpcy5kZWZpbmUgPSB0aGlzLmRlZmluZS5iaW5kKHRoaXMpO1xuICB0aGlzLmdldFR5cGUgPSB0aGlzLmdldFR5cGUuYmluZCh0aGlzKTtcbiAgdGhpcy5nZXRFeHRlbnNpb24gPSB0aGlzLmdldEV4dGVuc2lvbi5iaW5kKHRoaXMpO1xufVxuXG4vKipcbiAqIERlZmluZSBtaW1ldHlwZSAtPiBleHRlbnNpb24gbWFwcGluZ3MuICBFYWNoIGtleSBpcyBhIG1pbWUtdHlwZSB0aGF0IG1hcHNcbiAqIHRvIGFuIGFycmF5IG9mIGV4dGVuc2lvbnMgYXNzb2NpYXRlZCB3aXRoIHRoZSB0eXBlLiAgVGhlIGZpcnN0IGV4dGVuc2lvbiBpc1xuICogdXNlZCBhcyB0aGUgZGVmYXVsdCBleHRlbnNpb24gZm9yIHRoZSB0eXBlLlxuICpcbiAqIGUuZy4gbWltZS5kZWZpbmUoeydhdWRpby9vZ2cnLCBbJ29nYScsICdvZ2cnLCAnc3B4J119KTtcbiAqXG4gKiBJZiBhIHR5cGUgZGVjbGFyZXMgYW4gZXh0ZW5zaW9uIHRoYXQgaGFzIGFscmVhZHkgYmVlbiBkZWZpbmVkLCBhbiBlcnJvciB3aWxsXG4gKiBiZSB0aHJvd24uICBUbyBzdXBwcmVzcyB0aGlzIGVycm9yIGFuZCBmb3JjZSB0aGUgZXh0ZW5zaW9uIHRvIGJlIGFzc29jaWF0ZWRcbiAqIHdpdGggdGhlIG5ldyB0eXBlLCBwYXNzIGBmb3JjZWA9dHJ1ZS4gIEFsdGVybmF0aXZlbHksIHlvdSBtYXkgcHJlZml4IHRoZVxuICogZXh0ZW5zaW9uIHdpdGggXCIqXCIgdG8gbWFwIHRoZSB0eXBlIHRvIGV4dGVuc2lvbiwgd2l0aG91dCBtYXBwaW5nIHRoZVxuICogZXh0ZW5zaW9uIHRvIHRoZSB0eXBlLlxuICpcbiAqIGUuZy4gbWltZS5kZWZpbmUoeydhdWRpby93YXYnLCBbJ3dhdiddfSwgeydhdWRpby94LXdhdicsIFsnKndhdiddfSk7XG4gKlxuICpcbiAqIEBwYXJhbSBtYXAgKE9iamVjdCkgdHlwZSBkZWZpbml0aW9uc1xuICogQHBhcmFtIGZvcmNlIChCb29sZWFuKSBpZiB0cnVlLCBmb3JjZSBvdmVycmlkaW5nIG9mIGV4aXN0aW5nIGRlZmluaXRpb25zXG4gKi9cbk1pbWUucHJvdG90eXBlLmRlZmluZSA9IGZ1bmN0aW9uKHR5cGVNYXAsIGZvcmNlKSB7XG4gIGZvciAobGV0IHR5cGUgaW4gdHlwZU1hcCkge1xuICAgIGxldCBleHRlbnNpb25zID0gdHlwZU1hcFt0eXBlXS5tYXAoZnVuY3Rpb24odCkge1xuICAgICAgcmV0dXJuIHQudG9Mb3dlckNhc2UoKTtcbiAgICB9KTtcbiAgICB0eXBlID0gdHlwZS50b0xvd2VyQ2FzZSgpO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBleHRlbnNpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBleHQgPSBleHRlbnNpb25zW2ldO1xuXG4gICAgICAvLyAnKicgcHJlZml4ID0gbm90IHRoZSBwcmVmZXJyZWQgdHlwZSBmb3IgdGhpcyBleHRlbnNpb24uICBTbyBmaXh1cCB0aGVcbiAgICAgIC8vIGV4dGVuc2lvbiwgYW5kIHNraXAgaXQuXG4gICAgICBpZiAoZXh0WzBdID09PSAnKicpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmICghZm9yY2UgJiYgKGV4dCBpbiB0aGlzLl90eXBlcykpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICdBdHRlbXB0IHRvIGNoYW5nZSBtYXBwaW5nIGZvciBcIicgKyBleHQgK1xuICAgICAgICAgICdcIiBleHRlbnNpb24gZnJvbSBcIicgKyB0aGlzLl90eXBlc1tleHRdICsgJ1wiIHRvIFwiJyArIHR5cGUgK1xuICAgICAgICAgICdcIi4gUGFzcyBgZm9yY2U9dHJ1ZWAgdG8gYWxsb3cgdGhpcywgb3RoZXJ3aXNlIHJlbW92ZSBcIicgKyBleHQgK1xuICAgICAgICAgICdcIiBmcm9tIHRoZSBsaXN0IG9mIGV4dGVuc2lvbnMgZm9yIFwiJyArIHR5cGUgKyAnXCIuJ1xuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl90eXBlc1tleHRdID0gdHlwZTtcbiAgICB9XG5cbiAgICAvLyBVc2UgZmlyc3QgZXh0ZW5zaW9uIGFzIGRlZmF1bHRcbiAgICBpZiAoZm9yY2UgfHwgIXRoaXMuX2V4dGVuc2lvbnNbdHlwZV0pIHtcbiAgICAgIGNvbnN0IGV4dCA9IGV4dGVuc2lvbnNbMF07XG4gICAgICB0aGlzLl9leHRlbnNpb25zW3R5cGVdID0gKGV4dFswXSAhPT0gJyonKSA/IGV4dCA6IGV4dC5zdWJzdHIoMSk7XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIExvb2t1cCBhIG1pbWUgdHlwZSBiYXNlZCBvbiBleHRlbnNpb25cbiAqL1xuTWltZS5wcm90b3R5cGUuZ2V0VHlwZSA9IGZ1bmN0aW9uKHBhdGgpIHtcbiAgcGF0aCA9IFN0cmluZyhwYXRoKTtcbiAgbGV0IGxhc3QgPSBwYXRoLnJlcGxhY2UoL14uKlsvXFxcXF0vLCAnJykudG9Mb3dlckNhc2UoKTtcbiAgbGV0IGV4dCA9IGxhc3QucmVwbGFjZSgvXi4qXFwuLywgJycpLnRvTG93ZXJDYXNlKCk7XG5cbiAgbGV0IGhhc1BhdGggPSBsYXN0Lmxlbmd0aCA8IHBhdGgubGVuZ3RoO1xuICBsZXQgaGFzRG90ID0gZXh0Lmxlbmd0aCA8IGxhc3QubGVuZ3RoIC0gMTtcblxuICByZXR1cm4gKGhhc0RvdCB8fCAhaGFzUGF0aCkgJiYgdGhpcy5fdHlwZXNbZXh0XSB8fCBudWxsO1xufTtcblxuLyoqXG4gKiBSZXR1cm4gZmlsZSBleHRlbnNpb24gYXNzb2NpYXRlZCB3aXRoIGEgbWltZSB0eXBlXG4gKi9cbk1pbWUucHJvdG90eXBlLmdldEV4dGVuc2lvbiA9IGZ1bmN0aW9uKHR5cGUpIHtcbiAgdHlwZSA9IC9eXFxzKihbXjtcXHNdKikvLnRlc3QodHlwZSkgJiYgUmVnRXhwLiQxO1xuICByZXR1cm4gdHlwZSAmJiB0aGlzLl9leHRlbnNpb25zW3R5cGUudG9Mb3dlckNhc2UoKV0gfHwgbnVsbDtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gTWltZTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/notion-to-md/node_modules/mime/Mime.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/notion-to-md/node_modules/mime/lite.js":
/*!*************************************************************!*\
  !*** ./node_modules/notion-to-md/node_modules/mime/lite.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nlet Mime = __webpack_require__(/*! ./Mime */ \"(rsc)/./node_modules/notion-to-md/node_modules/mime/Mime.js\");\nmodule.exports = new Mime(__webpack_require__(/*! ./types/standard */ \"(rsc)/./node_modules/notion-to-md/node_modules/mime/types/standard.js\"));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm90aW9uLXRvLW1kL25vZGVfbW9kdWxlcy9taW1lL2xpdGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsV0FBVyxtQkFBTyxDQUFDLDJFQUFRO0FBQzNCLDBCQUEwQixtQkFBTyxDQUFDLCtGQUFrQiIsInNvdXJjZXMiOlsiL1VzZXJzL2xicmV2b29ydC9EZXNrdG9wL3Byb2plY3RzL3BlcnNvbmFsLXdlYnNpdGUvbm9kZV9tb2R1bGVzL25vdGlvbi10by1tZC9ub2RlX21vZHVsZXMvbWltZS9saXRlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxubGV0IE1pbWUgPSByZXF1aXJlKCcuL01pbWUnKTtcbm1vZHVsZS5leHBvcnRzID0gbmV3IE1pbWUocmVxdWlyZSgnLi90eXBlcy9zdGFuZGFyZCcpKTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/notion-to-md/node_modules/mime/lite.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/notion-to-md/node_modules/mime/types/standard.js":
/*!***********************************************************************!*\
  !*** ./node_modules/notion-to-md/node_modules/mime/types/standard.js ***!
  \***********************************************************************/
/***/ ((module) => {

eval("module.exports = {\"application/andrew-inset\":[\"ez\"],\"application/applixware\":[\"aw\"],\"application/atom+xml\":[\"atom\"],\"application/atomcat+xml\":[\"atomcat\"],\"application/atomdeleted+xml\":[\"atomdeleted\"],\"application/atomsvc+xml\":[\"atomsvc\"],\"application/atsc-dwd+xml\":[\"dwd\"],\"application/atsc-held+xml\":[\"held\"],\"application/atsc-rsat+xml\":[\"rsat\"],\"application/bdoc\":[\"bdoc\"],\"application/calendar+xml\":[\"xcs\"],\"application/ccxml+xml\":[\"ccxml\"],\"application/cdfx+xml\":[\"cdfx\"],\"application/cdmi-capability\":[\"cdmia\"],\"application/cdmi-container\":[\"cdmic\"],\"application/cdmi-domain\":[\"cdmid\"],\"application/cdmi-object\":[\"cdmio\"],\"application/cdmi-queue\":[\"cdmiq\"],\"application/cu-seeme\":[\"cu\"],\"application/dash+xml\":[\"mpd\"],\"application/davmount+xml\":[\"davmount\"],\"application/docbook+xml\":[\"dbk\"],\"application/dssc+der\":[\"dssc\"],\"application/dssc+xml\":[\"xdssc\"],\"application/ecmascript\":[\"es\",\"ecma\"],\"application/emma+xml\":[\"emma\"],\"application/emotionml+xml\":[\"emotionml\"],\"application/epub+zip\":[\"epub\"],\"application/exi\":[\"exi\"],\"application/express\":[\"exp\"],\"application/fdt+xml\":[\"fdt\"],\"application/font-tdpfr\":[\"pfr\"],\"application/geo+json\":[\"geojson\"],\"application/gml+xml\":[\"gml\"],\"application/gpx+xml\":[\"gpx\"],\"application/gxf\":[\"gxf\"],\"application/gzip\":[\"gz\"],\"application/hjson\":[\"hjson\"],\"application/hyperstudio\":[\"stk\"],\"application/inkml+xml\":[\"ink\",\"inkml\"],\"application/ipfix\":[\"ipfix\"],\"application/its+xml\":[\"its\"],\"application/java-archive\":[\"jar\",\"war\",\"ear\"],\"application/java-serialized-object\":[\"ser\"],\"application/java-vm\":[\"class\"],\"application/javascript\":[\"js\",\"mjs\"],\"application/json\":[\"json\",\"map\"],\"application/json5\":[\"json5\"],\"application/jsonml+json\":[\"jsonml\"],\"application/ld+json\":[\"jsonld\"],\"application/lgr+xml\":[\"lgr\"],\"application/lost+xml\":[\"lostxml\"],\"application/mac-binhex40\":[\"hqx\"],\"application/mac-compactpro\":[\"cpt\"],\"application/mads+xml\":[\"mads\"],\"application/manifest+json\":[\"webmanifest\"],\"application/marc\":[\"mrc\"],\"application/marcxml+xml\":[\"mrcx\"],\"application/mathematica\":[\"ma\",\"nb\",\"mb\"],\"application/mathml+xml\":[\"mathml\"],\"application/mbox\":[\"mbox\"],\"application/mediaservercontrol+xml\":[\"mscml\"],\"application/metalink+xml\":[\"metalink\"],\"application/metalink4+xml\":[\"meta4\"],\"application/mets+xml\":[\"mets\"],\"application/mmt-aei+xml\":[\"maei\"],\"application/mmt-usd+xml\":[\"musd\"],\"application/mods+xml\":[\"mods\"],\"application/mp21\":[\"m21\",\"mp21\"],\"application/mp4\":[\"mp4s\",\"m4p\"],\"application/msword\":[\"doc\",\"dot\"],\"application/mxf\":[\"mxf\"],\"application/n-quads\":[\"nq\"],\"application/n-triples\":[\"nt\"],\"application/node\":[\"cjs\"],\"application/octet-stream\":[\"bin\",\"dms\",\"lrf\",\"mar\",\"so\",\"dist\",\"distz\",\"pkg\",\"bpk\",\"dump\",\"elc\",\"deploy\",\"exe\",\"dll\",\"deb\",\"dmg\",\"iso\",\"img\",\"msi\",\"msp\",\"msm\",\"buffer\"],\"application/oda\":[\"oda\"],\"application/oebps-package+xml\":[\"opf\"],\"application/ogg\":[\"ogx\"],\"application/omdoc+xml\":[\"omdoc\"],\"application/onenote\":[\"onetoc\",\"onetoc2\",\"onetmp\",\"onepkg\"],\"application/oxps\":[\"oxps\"],\"application/p2p-overlay+xml\":[\"relo\"],\"application/patch-ops-error+xml\":[\"xer\"],\"application/pdf\":[\"pdf\"],\"application/pgp-encrypted\":[\"pgp\"],\"application/pgp-signature\":[\"asc\",\"sig\"],\"application/pics-rules\":[\"prf\"],\"application/pkcs10\":[\"p10\"],\"application/pkcs7-mime\":[\"p7m\",\"p7c\"],\"application/pkcs7-signature\":[\"p7s\"],\"application/pkcs8\":[\"p8\"],\"application/pkix-attr-cert\":[\"ac\"],\"application/pkix-cert\":[\"cer\"],\"application/pkix-crl\":[\"crl\"],\"application/pkix-pkipath\":[\"pkipath\"],\"application/pkixcmp\":[\"pki\"],\"application/pls+xml\":[\"pls\"],\"application/postscript\":[\"ai\",\"eps\",\"ps\"],\"application/provenance+xml\":[\"provx\"],\"application/pskc+xml\":[\"pskcxml\"],\"application/raml+yaml\":[\"raml\"],\"application/rdf+xml\":[\"rdf\",\"owl\"],\"application/reginfo+xml\":[\"rif\"],\"application/relax-ng-compact-syntax\":[\"rnc\"],\"application/resource-lists+xml\":[\"rl\"],\"application/resource-lists-diff+xml\":[\"rld\"],\"application/rls-services+xml\":[\"rs\"],\"application/route-apd+xml\":[\"rapd\"],\"application/route-s-tsid+xml\":[\"sls\"],\"application/route-usd+xml\":[\"rusd\"],\"application/rpki-ghostbusters\":[\"gbr\"],\"application/rpki-manifest\":[\"mft\"],\"application/rpki-roa\":[\"roa\"],\"application/rsd+xml\":[\"rsd\"],\"application/rss+xml\":[\"rss\"],\"application/rtf\":[\"rtf\"],\"application/sbml+xml\":[\"sbml\"],\"application/scvp-cv-request\":[\"scq\"],\"application/scvp-cv-response\":[\"scs\"],\"application/scvp-vp-request\":[\"spq\"],\"application/scvp-vp-response\":[\"spp\"],\"application/sdp\":[\"sdp\"],\"application/senml+xml\":[\"senmlx\"],\"application/sensml+xml\":[\"sensmlx\"],\"application/set-payment-initiation\":[\"setpay\"],\"application/set-registration-initiation\":[\"setreg\"],\"application/shf+xml\":[\"shf\"],\"application/sieve\":[\"siv\",\"sieve\"],\"application/smil+xml\":[\"smi\",\"smil\"],\"application/sparql-query\":[\"rq\"],\"application/sparql-results+xml\":[\"srx\"],\"application/srgs\":[\"gram\"],\"application/srgs+xml\":[\"grxml\"],\"application/sru+xml\":[\"sru\"],\"application/ssdl+xml\":[\"ssdl\"],\"application/ssml+xml\":[\"ssml\"],\"application/swid+xml\":[\"swidtag\"],\"application/tei+xml\":[\"tei\",\"teicorpus\"],\"application/thraud+xml\":[\"tfi\"],\"application/timestamped-data\":[\"tsd\"],\"application/toml\":[\"toml\"],\"application/trig\":[\"trig\"],\"application/ttml+xml\":[\"ttml\"],\"application/ubjson\":[\"ubj\"],\"application/urc-ressheet+xml\":[\"rsheet\"],\"application/urc-targetdesc+xml\":[\"td\"],\"application/voicexml+xml\":[\"vxml\"],\"application/wasm\":[\"wasm\"],\"application/widget\":[\"wgt\"],\"application/winhlp\":[\"hlp\"],\"application/wsdl+xml\":[\"wsdl\"],\"application/wspolicy+xml\":[\"wspolicy\"],\"application/xaml+xml\":[\"xaml\"],\"application/xcap-att+xml\":[\"xav\"],\"application/xcap-caps+xml\":[\"xca\"],\"application/xcap-diff+xml\":[\"xdf\"],\"application/xcap-el+xml\":[\"xel\"],\"application/xcap-ns+xml\":[\"xns\"],\"application/xenc+xml\":[\"xenc\"],\"application/xhtml+xml\":[\"xhtml\",\"xht\"],\"application/xliff+xml\":[\"xlf\"],\"application/xml\":[\"xml\",\"xsl\",\"xsd\",\"rng\"],\"application/xml-dtd\":[\"dtd\"],\"application/xop+xml\":[\"xop\"],\"application/xproc+xml\":[\"xpl\"],\"application/xslt+xml\":[\"*xsl\",\"xslt\"],\"application/xspf+xml\":[\"xspf\"],\"application/xv+xml\":[\"mxml\",\"xhvml\",\"xvml\",\"xvm\"],\"application/yang\":[\"yang\"],\"application/yin+xml\":[\"yin\"],\"application/zip\":[\"zip\"],\"audio/3gpp\":[\"*3gpp\"],\"audio/adpcm\":[\"adp\"],\"audio/amr\":[\"amr\"],\"audio/basic\":[\"au\",\"snd\"],\"audio/midi\":[\"mid\",\"midi\",\"kar\",\"rmi\"],\"audio/mobile-xmf\":[\"mxmf\"],\"audio/mp3\":[\"*mp3\"],\"audio/mp4\":[\"m4a\",\"mp4a\"],\"audio/mpeg\":[\"mpga\",\"mp2\",\"mp2a\",\"mp3\",\"m2a\",\"m3a\"],\"audio/ogg\":[\"oga\",\"ogg\",\"spx\",\"opus\"],\"audio/s3m\":[\"s3m\"],\"audio/silk\":[\"sil\"],\"audio/wav\":[\"wav\"],\"audio/wave\":[\"*wav\"],\"audio/webm\":[\"weba\"],\"audio/xm\":[\"xm\"],\"font/collection\":[\"ttc\"],\"font/otf\":[\"otf\"],\"font/ttf\":[\"ttf\"],\"font/woff\":[\"woff\"],\"font/woff2\":[\"woff2\"],\"image/aces\":[\"exr\"],\"image/apng\":[\"apng\"],\"image/avif\":[\"avif\"],\"image/bmp\":[\"bmp\"],\"image/cgm\":[\"cgm\"],\"image/dicom-rle\":[\"drle\"],\"image/emf\":[\"emf\"],\"image/fits\":[\"fits\"],\"image/g3fax\":[\"g3\"],\"image/gif\":[\"gif\"],\"image/heic\":[\"heic\"],\"image/heic-sequence\":[\"heics\"],\"image/heif\":[\"heif\"],\"image/heif-sequence\":[\"heifs\"],\"image/hej2k\":[\"hej2\"],\"image/hsj2\":[\"hsj2\"],\"image/ief\":[\"ief\"],\"image/jls\":[\"jls\"],\"image/jp2\":[\"jp2\",\"jpg2\"],\"image/jpeg\":[\"jpeg\",\"jpg\",\"jpe\"],\"image/jph\":[\"jph\"],\"image/jphc\":[\"jhc\"],\"image/jpm\":[\"jpm\"],\"image/jpx\":[\"jpx\",\"jpf\"],\"image/jxr\":[\"jxr\"],\"image/jxra\":[\"jxra\"],\"image/jxrs\":[\"jxrs\"],\"image/jxs\":[\"jxs\"],\"image/jxsc\":[\"jxsc\"],\"image/jxsi\":[\"jxsi\"],\"image/jxss\":[\"jxss\"],\"image/ktx\":[\"ktx\"],\"image/ktx2\":[\"ktx2\"],\"image/png\":[\"png\"],\"image/sgi\":[\"sgi\"],\"image/svg+xml\":[\"svg\",\"svgz\"],\"image/t38\":[\"t38\"],\"image/tiff\":[\"tif\",\"tiff\"],\"image/tiff-fx\":[\"tfx\"],\"image/webp\":[\"webp\"],\"image/wmf\":[\"wmf\"],\"message/disposition-notification\":[\"disposition-notification\"],\"message/global\":[\"u8msg\"],\"message/global-delivery-status\":[\"u8dsn\"],\"message/global-disposition-notification\":[\"u8mdn\"],\"message/global-headers\":[\"u8hdr\"],\"message/rfc822\":[\"eml\",\"mime\"],\"model/3mf\":[\"3mf\"],\"model/gltf+json\":[\"gltf\"],\"model/gltf-binary\":[\"glb\"],\"model/iges\":[\"igs\",\"iges\"],\"model/mesh\":[\"msh\",\"mesh\",\"silo\"],\"model/mtl\":[\"mtl\"],\"model/obj\":[\"obj\"],\"model/step+xml\":[\"stpx\"],\"model/step+zip\":[\"stpz\"],\"model/step-xml+zip\":[\"stpxz\"],\"model/stl\":[\"stl\"],\"model/vrml\":[\"wrl\",\"vrml\"],\"model/x3d+binary\":[\"*x3db\",\"x3dbz\"],\"model/x3d+fastinfoset\":[\"x3db\"],\"model/x3d+vrml\":[\"*x3dv\",\"x3dvz\"],\"model/x3d+xml\":[\"x3d\",\"x3dz\"],\"model/x3d-vrml\":[\"x3dv\"],\"text/cache-manifest\":[\"appcache\",\"manifest\"],\"text/calendar\":[\"ics\",\"ifb\"],\"text/coffeescript\":[\"coffee\",\"litcoffee\"],\"text/css\":[\"css\"],\"text/csv\":[\"csv\"],\"text/html\":[\"html\",\"htm\",\"shtml\"],\"text/jade\":[\"jade\"],\"text/jsx\":[\"jsx\"],\"text/less\":[\"less\"],\"text/markdown\":[\"markdown\",\"md\"],\"text/mathml\":[\"mml\"],\"text/mdx\":[\"mdx\"],\"text/n3\":[\"n3\"],\"text/plain\":[\"txt\",\"text\",\"conf\",\"def\",\"list\",\"log\",\"in\",\"ini\"],\"text/richtext\":[\"rtx\"],\"text/rtf\":[\"*rtf\"],\"text/sgml\":[\"sgml\",\"sgm\"],\"text/shex\":[\"shex\"],\"text/slim\":[\"slim\",\"slm\"],\"text/spdx\":[\"spdx\"],\"text/stylus\":[\"stylus\",\"styl\"],\"text/tab-separated-values\":[\"tsv\"],\"text/troff\":[\"t\",\"tr\",\"roff\",\"man\",\"me\",\"ms\"],\"text/turtle\":[\"ttl\"],\"text/uri-list\":[\"uri\",\"uris\",\"urls\"],\"text/vcard\":[\"vcard\"],\"text/vtt\":[\"vtt\"],\"text/xml\":[\"*xml\"],\"text/yaml\":[\"yaml\",\"yml\"],\"video/3gpp\":[\"3gp\",\"3gpp\"],\"video/3gpp2\":[\"3g2\"],\"video/h261\":[\"h261\"],\"video/h263\":[\"h263\"],\"video/h264\":[\"h264\"],\"video/iso.segment\":[\"m4s\"],\"video/jpeg\":[\"jpgv\"],\"video/jpm\":[\"*jpm\",\"jpgm\"],\"video/mj2\":[\"mj2\",\"mjp2\"],\"video/mp2t\":[\"ts\"],\"video/mp4\":[\"mp4\",\"mp4v\",\"mpg4\"],\"video/mpeg\":[\"mpeg\",\"mpg\",\"mpe\",\"m1v\",\"m2v\"],\"video/ogg\":[\"ogv\"],\"video/quicktime\":[\"qt\",\"mov\"],\"video/webm\":[\"webm\"]};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/notion-to-md/node_modules/mime/types/standard.js\n");

/***/ })

};
;